{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","components/LoginIcon.tsx","components/ErrorMessage.tsx","DfmContext.ts","components/MainMenu.tsx","states/DurableOrchestrationStatus.ts","DateTimeHelpers.ts","states/ErrorMessageState.ts","states/OrchestrationsState.ts","CancelToken.ts","states/ResultsListTabState.ts","services/BackendClient.ts","states/LoginState.ts","states/MermaidDiagramStateBase.ts","states/ResultsGanttDiagramTabState.ts","states/ResultsHistogramTabState.ts","states/QueryString.ts","theme.ts","components/OrchestrationLink.tsx","components/LongJsonDialog.tsx","components/OrchestrationsList.tsx","components/OrchestrationsHistogram.tsx","components/SaveAsSvgButton.tsx","components/OrchestrationsGanttChart.tsx","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/FunctionGraph.tsx","components/PurgeHistoryDialog.tsx","components/CleanEntityStorageDialog.tsx","components/Main.tsx","states/MainMenuState.ts","states/MermaidDiagramTabState.ts","states/SequenceDiagramTabState.ts","states/GanttDiagramTabState.ts","states/LiquidMarkupTabState.ts","states/OrchestrationDetailsState.ts","states/az-func-as-a-graph/buildFunctionDiagramCode.ts","states/FunctionGraphState.ts","states/PurgeHistoryDialogState.ts","states/CleanEntityStorageDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","states/MainState.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","LoginIcon","observer","state","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","fontSize","DialogContentText","allowedTaskHubNames","DialogTitle","List","hubName","ListItem","button","key","Link","href","locationPathName","CircularProgress","React","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","aria-label","DfmContext","DfmClientConfig","showTimeAs","_showTimeAsLocal","localStorage","getItem","theme","val","setItem","t","isValid","local","utc","moment","toISOString","slice","utcString","length","dotPoint","lastIndexOf","milliseconds","substring","format","computed","observable","DfmContextType","dfmContextInstance","MainMenu","context","setWindowTitle","RadioGroup","row","value","showTimeAsLocal","toString","onChange","target","doRefresh","FormControlLabel","control","Radio","label","showConnectionParamsDialog","showPurgeHistoryDialog","showCleanEntityStorageDialog","connectionParamsDialogOpen","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","connectionString","DialogActions","saveConnectionParams","isDirty","contextType","HistoryEventFields","RuntimeStatuses","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","duration","tabTemplateNames","instance","DurableOrchestrationStatusFields","DateTimeHelpers","isAfter","MinMoment","isBefore","MaxMoment","durationInMs","isNaN","days","Math","floor","c","result","toFixed","hours","minutes","seconds","FilterOperatorEnum","ResultsTabEnum","TimeRangeEnum","ErrorMessageState","CancelToken","ResultsListTabState","_backendClient","_localStorage","_refresh","_noMorePagesToLoad","_pageSize","orderByString","_orderBy","orderByDirectionString","_orderByDirection","hiddenColumnsString","_hiddenColumns","split","_orchestrations","resetOrderBy","push","join","removeItem","filterClause","cancelToken","isAutoRefresh","Promise","setItems","fieldName","skip","orderByClause","orderByDirection","hiddenColumnsClause","uri","call","then","response","isCancelled","RoutePrefix","DfmRoutePrefix","BackendUri","process","BackendClient","_getTaskHubName","_getAuthorizationHeaderAsync","method","url","data","includes","toLowerCase","reject","headers","axios","request","r","OrchestrationsPathPrefix","LoginState","_aadApp","defaults","maxRedirects","login","_isLoggedIn","_userName","_taskHubName","_allowedTaskHubNames","window","location","pathname","pos","endsWith","tryGetTaskHubName","origin","substr","get","loginWithEasyAuthConfig","err","replace","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","console","log","idToken","rawIdToken","Authorization","acquireTokenRedirect","config","interceptors","use","reload","initializeTaskHubNameAndConfirmLogin","Msal","authority","redirectUri","rootUri","handleRedirectCallback","authErr","accountState","errorCode","account","getAccount","loginRedirect","getAuthorizationHeaderAsync","hubNames","pathParts","filter","p","MermaidDiagramStateBase","_mermaidInitialized","mermaid","initialize","startOnLoad","sequence","noteMargin","boxMargin","boxTextMargin","flowchart","curve","useMaxWidth","htmlLabels","formatDuration","ceil","ResultsGanttDiagramTabState","_instances","_diagramSvg","_diagramCode","initMermaidWhenNeeded","instances","renderDiagram","render","svg","oneBasedInstanceIndex","isVsCode","routePrefixAndTaskHubName","prevSectionName","sectionNr","nextLine","sectionName","getFunctionName","escapeTitle","Date","getTime","formatDateTime","formatDurationInSeconds","utcDateTimeString","ResultsHistogramTabState","_filterState","_counts","_originalTimeInterval","_applyingZoom","_timeRangeInMilliseconds","_numOfIntervals","_zoomedIn","_histograms","_numOfInstancesShown","timeFrom","timeTill","timeRange","startTime","valueOf","bucketLength","loadNextBatch","left","right","cancel","from","till","reloadOrchestrations","pageNumber","instanceTypeName","emptyHistogram","i","x0","x","y","instanceStartPos","QueryString","_values","pairs","search","pair","decodeURIComponent","queryString","encodeURIComponent","history","replaceState","OrchestrationsState","momentFrom","_tabStates","_refreshToken","_delayedRefreshDelay","_oldFilterValue","_oldTimeFrom","_oldTimeTill","timeFromString","subtract","_timeFrom","timeTillString","_timeTill","timeRangeString","values","_timeRange","filteredColumnString","_filteredColumn","filterOperatorString","_filterOperator","filterValueString","_filterValue","showStatusesString","_showStatuses","JSON","parse","autoRefreshString","_autoRefresh","Number","tabIndexString","tabIndex","_tabIndex","_cancelToken","loadOrchestrations","LastMinute","Last10Minutes","LastHour","Last24Hours","Last7Days","Last30Days","Last90Days","Custom","listState","status","checked","indexOf","splice","clearTimeout","setTimeout","isValidMoment","reset","stringify","s","encodedFilterValue","Equals","StartsWith","Contains","NotEquals","NotStartsWith","NotContains","selectedTabState","load","finally","colorTheme","REACT_APP_COLOR_THEME","Theme","createMuiTheme","palette","type","CustomTabStyle","backgroundColor","RuntimeStatusToStyle","hexToRGBA","error","light","success","warning","background","paper","hex","alpha","parseInt","OrchestrationLink","backendClient","onLinkClicked","orchestrationId","extraSanitizeHrefComponent","LongJsonDialog","maxWidth","jsonString","InputBase","multiline","jsonObject","dialogTitle","dialogState","rowsMax","jsonFormattedString","component","variant","OrchestrationsList","FormHelperText","orchestrations","hiddenColumns","unhide","Paper","elevation","renderTable","longJsonDialogState","visibleColumns","f","showLastEventColumn","Table","size","TableHead","TableRow","col","onlyOneVisibleColumnLeft","TableCell","onMouseEnter","columnUnderMouse","onMouseLeave","TableSortLabel","active","orderBy","direction","hideColumn","TableBody","orchestration","rowStyle","cellStyle","verticalAlign","style","formatDateTimeString","renderJson","OrchestrationsHistogram","typeNames","histograms","sort","numOfInstancesShown","zoomedIn","resetZoom","innerWidth","innerHeight","xType","stackBy","top","tickTotal","tickFormat","formatTimeTick","timeRangeInMilliseconds","typeName","stroke","getColorCodeForInstanceType","drag","enableY","onDragEnd","area","applyZoom","colors","items","counts","orientation","instanceType","hashCode","charCodeAt","m","second","millisecond","SaveAsSvgButton","fileName","URL","createObjectURL","Blob","download","getStyledSvg","OrchestrationsGanttChart","svgElement","document","getElementById","mountClickEventToFunctionNodes","getElementsByClassName","rawHtml","dangerouslySetInnerHTML","__html","Toolbar","flex","navigator","clipboard","writeText","diagramCode","nodes","el","onclick","goto","cursor","Orchestrations","addEventListener","scrollingElement","scrollHeight","scrollTop","Histogram","ctrlKey","keyCode","histogramState","ganttChartState","timeZone","AppBar","position","Grid","container","item","xs","timeRangeToString","ampm","autoOk","invalidDateMessage","getMoment","setMoment","onBlur","applyTimeFrom","onAccept","onKeyPress","handleKeyPress","FormControl","Checkbox","timeTillEnabled","applyTimeTill","placeholder","InputLabel","htmlFor","Select","filteredColumn","inputProps","filterOperator","filterValue","applyFilterValue","FormGroup","showStatuses","onScroll","rescheduleDelayedRefresh","isStatusChecked","setStatusChecked","autoRefresh","Tabs","ev","Tab","Gantt","event","preventDefault","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","raiseEventDialogOpen","purge","eventName","rows","eventData","raiseEvent","DurableEntityFields","details","runtimeStatusStyle","sm","md","zeroMinWidth","OrchestrationButtons","restartDialogOpen","rewindConfirmationOpen","terminateConfirmationOpen","setCustomStatusDialogOpen","rewind","terminate","newCustomStatus","setCustomStatus","isCustomStatusDirty","restartWithNewInstanceId","restart","OrchestrationFields","loadHistory","totalItems","historyTotalCount","itemsShown","Name","FunctionName","SubOrchestrationId","functionName","functionNames","gotoFunctionCode","events","index","Timestamp","EventType","renderEventLink","ScheduledTime","Result","Details","OrchestrationDetails","loadDetails","loadInProgress","tabStates","functionGraphAvailable","tabState","showFunctionsGraph","selectedTab","isMermaidDiagram","description","getAttribute","innerHTML","match","exec","closuredFunctionName","FunctionGraph","projectPath","diagramSvg","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","CleanEntityStorageDialog","removeEmptyEntities","releaseOrphanedLocks","clean","numberOfEmptyEntitiesRemoved","numberOfOrphanedLocksRemoved","Main","utils","MomentUtils","Provider","loginState","mainMenuState","orchestrationsState","src","Breadcrumbs","taskHubName","orchestrationDetailsState","Autocomplete","freeSolo","options","isExactMatch","suggestions","typedInstanceId","newValue","renderInput","params","functionGraphState","purgeHistoryDialogState","cleanEntityStorageDialogState","MainMenuState","_purgeHistoryDialogState","_cleanEntityStorageDialogState","_oldConnectionString","_oldHubName","_inProgress","_isReadOnly","isReadOnly","alert","accountName","version","MermaidDiagramTabState","_loadHistory","buildDiagram","SequenceDiagramTabState","all","getSequenceForOrchestration","sequenceLines","orchestrationName","parentOrchestrationName","historyEvents","externalActor","results","formatTimestamp","subOrchestrationId","subOrchestrationName","maxDurationInMs","DurationInMs","j","timestamp","GanttDiagramTabState","renderOrchestration","arrayOfArrays","lines","flat","linesWithMetadata","l","injectFunctionNameAttributes","adjustIntervalsSmallerThanOneSecond","RegExp","tagName","taskIndex","oneBasedLineIndex","lineMetadata","activityWidth","activityMetadata","parentInstanceId","widthPercentage","orchIndex","findIndex","orchMatch","orchWidth","newActivityWidth","isParentOrchestration","startedEvent","find","completedEvent","needToAddAxisFormat","orchDuration","longerThanADay","lineName","eventTimestamp","LiquidMarkupTabState","_orchestrationId","_rawHtml","OrchestrationDetailsState","_autoRefreshToken","_functionNames","functions","loadCustomTab","_history","_details","_historyTotalCount","_raiseEventDialogOpen","_setCustomStatusDialogOpen","_restartDialogOpen","fn","requestBody","setAutoRefresh","tabStateIndex","orchId","loadAllHistory","templateName","totalCount","space","getTriggerBindingText","binding","methods","route","path","databaseName","collectionName","eventHubName","queueName","topicName","subscriptionName","schedule","getBindingText","tableName","FunctionGraphState","_projectPath","funcs","func","triggerBinding","inputBindings","outputBindings","otherBindings","nodeCode","bindings","f1","f2","s1","isCalledBy","s2","calledBy","inputBinding","outputBinding","otherBinding","isSignalledBy","signalledBy","signalName","isCalledByItself","buildFunctionDiagramCode","clickCode","filePath","applyIcons","iconsSvg","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","statuses","Array","has","included","add","delete","CleanEntityStorageDialogState","isOpen","_response","TypedLocalStorage","_prefix","apply","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","random","postMessage","purgeHistoryHandler","cleanEntityStorageHandler","VsCodeTypedLocalStorage","_state","StateFromVsCode","save","MainState","vsCodeApi","acquireVsCodeApi","functionProjectPath","setCustomHandlers","_typedInstanceId","reloadSuggestions","_suggestions","DfmFunctionProjectPath","OrchestrationIdFromVsCode","body","appState","ReactDOM","ThemeProvider"],"mappings":"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","file":"static/js/main.c65a1ffe.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 368,\n\t\"./locale.js\": 368\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 665;","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    List, ListItem, Link,\r\n    Menu, MenuItem, Tooltip, Typography, DialogTitle\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage ? (!state.allowedTaskHubNames ? (<>\r\n                            \r\n                            <Container className=\"login-progress\">\r\n                                <CircularProgress />\r\n                            </Container>\r\n                            <DialogContentText>Login in progress...</DialogContentText>\r\n\r\n                        </>) : (<>\r\n                                \r\n                            <DialogTitle>Select your Task Hub</DialogTitle>\r\n                            <List className=\"task-hub-list\">\r\n                                {state.allowedTaskHubNames.map(hubName => (\r\n                                    <ListItem button key={hubName}>\r\n                                        <Link href={state.locationPathName + hubName}>{hubName}</Link>\r\n                                    </ListItem>)\r\n                                )}\r\n                            </List>\r\n                            \r\n                        </>)): (<>\r\n                        \r\n                            <Container className=\"login-progress\">\r\n                                <Error color=\"secondary\" fontSize=\"large\" />\r\n                            </Container>\r\n                            <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            \r\n                        </>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\n// Config object passed as a global variable via index.html\r\ndeclare const DfmClientConfig: {\r\n    theme: string,\r\n    showTimeAs: string\r\n};\r\n\r\n// Global observable context object with global settings and other cross-cutting concerns in it\r\nexport class DfmContext {\r\n\r\n    get theme(): string { return DfmClientConfig.theme; }\r\n\r\n    @computed\r\n    get showTimeAsLocal(): boolean {\r\n        return this._showTimeAsLocal;\r\n    }\r\n    set showTimeAsLocal(val) {\r\n        localStorage?.setItem('showTimeAs', val ? 'Local' : 'UTC');\r\n        this._showTimeAsLocal = val;\r\n    }\r\n\r\n    constructor() {\r\n        if (DfmClientConfig.showTimeAs !== 'Local') {\r\n            this._showTimeAsLocal = localStorage?.getItem('showTimeAs') === 'Local';\r\n        } else {\r\n            this._showTimeAsLocal = true;\r\n        }\r\n    }\r\n\r\n    // Prepares a moment for visualizing with @material-ui/pickers\r\n    public getMoment(t: moment.Moment): moment.Moment {\r\n\r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to call either .utc() or .local() on moment value, to make it _render_ correctly.\r\n        if (!this._showTimeAsLocal) {\r\n            t.utc();\r\n        } else {\r\n            t.local();\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    // Converts a moment taken from @material-ui/pickers\r\n    public setMoment(t: moment.Moment): moment.Moment {\r\n\r\n        if (!t || !t.isValid() || !!this._showTimeAsLocal) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        return moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n    }\r\n\r\n    public formatDateTimeString(utcString: string): string {\r\n\r\n        if (!this._showTimeAsLocal || !utcString || utcString.length < 11) {\r\n            return utcString;\r\n        }\r\n\r\n        // need to handle milliseconds separately (because it might also be microseconds, and those are omitted by moment)\r\n        const dotPoint = utcString.lastIndexOf('.');\r\n        const milliseconds = (dotPoint >= 0) ? '.' + utcString.substring(dotPoint + 1, utcString.length - 1) : '';\r\n\r\n        return moment(utcString).format(`YYYY-MM-DDTHH:mm:ss`) + milliseconds;\r\n    }\r\n\r\n    @observable\r\n    private _showTimeAsLocal;\r\n}\r\n\r\nexport const DfmContextType = React.createContext<DfmContext>(new DfmContext());\r\nexport const dfmContextInstance = new DfmContext();","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControlLabel, \r\n    IconButton, LinearProgress, Menu, MenuItem, Radio, RadioGroup, TextField, Typography\r\n} from '@material-ui/core';\r\n\r\nimport './MainMenu.css';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\nimport { DfmContextType } from '../DfmContext';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState, doRefresh: () => void }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <IconButton color=\"inherit\"\r\n                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n            >\r\n                <MenuIcon/>\r\n            </IconButton>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <RadioGroup row value={this.context.showTimeAsLocal.toString()} onChange={(evt) => {\r\n                    this.context.showTimeAsLocal = (evt.target as HTMLInputElement).value === 'true';\r\n                    state.menuAnchorElement = undefined;\r\n                    this.props.doRefresh();\r\n                }}>\r\n                    <Typography className=\"show-time-as-typography\">Show time as:</Typography>\r\n                    <FormControlLabel control={<Radio color=\"primary\"/>} label=\"UTC\" value={'false'} />\r\n                    <FormControlLabel control={<Radio color=\"primary\"/>} label=\"Local\" value={'true'} />\r\n                </RadioGroup>\r\n\r\n                <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                <MenuItem onClick={() => state.showCleanEntityStorageDialog()}>Clean Entity Storage...</MenuItem>\r\n            </Menu>\r\n\r\n            <Dialog\r\n                open={state.connectionParamsDialogOpen}\r\n                onClose={() => state.connectionParamsDialogOpen = false}\r\n            >\r\n                <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                    \r\n                    <DialogContentText>\r\n                        {\r\n                            state.isReadonly ?\r\n                                \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively)\" :\r\n                                \"The below values will be saved to local.settings.json file.\"\r\n                        }\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Hub Name\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.hubName}\r\n                        onChange={(evt) => state.hubName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Azure Storage Connection String\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: state.isReadonly }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.connectionString}\r\n                        onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                    />\r\n\r\n                    <ErrorMessage state={state}/>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    {(!state.isReadonly) && (\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    )}\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    FunctionName: string;\r\n    ScheduledTime: string;\r\n    DurationInMs: number;\r\n    SubOrchestrationId: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport const RuntimeStatuses = ['Completed', 'Running', 'Failed', 'Pending', 'Terminated', 'Canceled', 'ContinuedAsNew'] as const;\r\nexport type RuntimeStatus = typeof RuntimeStatuses[number];\r\n\r\nexport type EntityType = 'Orchestration' | 'DurableEntity';\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    duration: number;\r\n    tabTemplateNames?: string[];\r\n\r\n    static getFunctionName(instance: DurableOrchestrationStatus): string {\r\n        return instance.entityType === 'DurableEntity' ? instance.entityId.name : instance.name;\r\n    }\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'duration',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01');\r\n    private static MaxMoment = moment('2100-01-01');\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDuration(durationInMs: number): string {\r\n\r\n        if (isNaN(durationInMs) || (durationInMs < 0)) {\r\n            return '';\r\n        }\r\n\r\n        const days = Math.floor(durationInMs / 86400000);\r\n        var c = 0;\r\n        var result = '';\r\n\r\n        if (days > 0) {\r\n            result += days.toFixed(0) + 'd';\r\n            ++c;\r\n            durationInMs = durationInMs % 86400000;\r\n        }\r\n\r\n        const hours = Math.floor(durationInMs / 3600000);\r\n        if (hours > 0) {\r\n            result += hours.toFixed(0) + 'h';\r\n\r\n            if (++c > 1) {\r\n                return result;\r\n            }\r\n\r\n            durationInMs = durationInMs % 3600000;\r\n        }\r\n\r\n        const minutes = Math.floor(durationInMs / 60000);\r\n        if (minutes > 0) {\r\n            result += minutes.toFixed(0) + 'm';\r\n\r\n            if (++c > 1) {\r\n                return result;\r\n            }\r\n\r\n            durationInMs = durationInMs % 60000;\r\n        }\r\n\r\n        const seconds = Math.floor(durationInMs / 1000);\r\n        if (seconds > 0) {\r\n            result += seconds.toFixed(0) + 's';\r\n\r\n            if (++c > 1) {\r\n                return result;\r\n            }\r\n\r\n            durationInMs = durationInMs % 1000;\r\n        }\r\n\r\n        if (durationInMs > 0) {\r\n            result += durationInMs.toFixed(0) + 'ms';\r\n        }\r\n\r\n        if (!result) {\r\n            result = '0ms';\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState, ResultsListTabState } from './ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from './ResultsGanttDiagramTabState';\r\nimport { ResultsHistogramTabState } from './ResultsHistogramTabState';\r\nimport { RuntimeStatus } from './DurableOrchestrationStatus';\r\nimport { QueryString } from './QueryString';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains,\r\n    NotEquals,\r\n    NotStartsWith,\r\n    NotContains\r\n}\r\n\r\nexport enum ResultsTabEnum {\r\n    List = 0,\r\n    Histogram,\r\n    Gantt\r\n}\r\n\r\nexport enum TimeRangeEnum {\r\n    Custom = 0,\r\n    LastMinute,\r\n    Last10Minutes,\r\n    LastHour,\r\n    Last24Hours,\r\n    Last7Days,\r\n    Last30Days,\r\n    Last90Days\r\n}\r\n\r\nexport type RuntimeStatusOrDurableEntities = RuntimeStatus | 'DurableEntities';\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get tabIndex(): ResultsTabEnum { return this._tabIndex; }\r\n    set tabIndex(val: ResultsTabEnum) {\r\n\r\n        if (this._tabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._tabIndex = val;\r\n        this._localStorage.setItem('tabIndex', val.toString());\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    get selectedTabState(): IResultsTabState {\r\n        return this._tabStates[this._tabIndex];\r\n    }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment {\r\n\r\n        switch (this._timeRange) {\r\n            case TimeRangeEnum.LastMinute:\r\n                return moment().subtract(1, 'minutes');\r\n            case TimeRangeEnum.Last10Minutes:\r\n                return moment().subtract(10, 'minutes');\r\n            case TimeRangeEnum.LastHour:\r\n                return moment().subtract(1, 'hours');\r\n            case TimeRangeEnum.Last24Hours:\r\n                return moment().subtract(1, 'days');\r\n            case TimeRangeEnum.Last7Days:\r\n                return moment().subtract(7, 'days');\r\n            case TimeRangeEnum.Last30Days:\r\n                return moment().subtract(30, 'days');\r\n            case TimeRangeEnum.Last90Days:\r\n                return moment().subtract(90, 'days');\r\n            default:\r\n                return this._timeFrom;\r\n        }\r\n    }\r\n    set timeFrom(val: moment.Moment) {\r\n\r\n        this._timeFrom = val;\r\n        this._timeRange = TimeRangeEnum.Custom;\r\n        this.listState.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment {\r\n        return (!!this._timeRange || !this._timeTill) ? moment() : this._timeTill;\r\n    }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this._timeRange = TimeRangeEnum.Custom;\r\n        this.listState.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment() : null;\r\n\r\n        if (!val) {\r\n            this.listState.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get timeRange(): TimeRangeEnum { return this._timeRange; }\r\n    set timeRange(val: TimeRangeEnum) {\r\n\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._timeRange = val;\r\n\r\n        this.listState.resetOrderBy();\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showStatuses(): RuntimeStatusOrDurableEntities[] { return this._showStatuses; }\r\n    \r\n    isStatusChecked(status?: RuntimeStatusOrDurableEntities): boolean {\r\n\r\n        if (!status) {\r\n            return !this._showStatuses;\r\n        }\r\n\r\n        if (!this._showStatuses) {\r\n            return true;\r\n        }\r\n\r\n        return !!this._showStatuses.includes(status);\r\n    }\r\n\r\n    setStatusChecked(checked: boolean, status?: RuntimeStatusOrDurableEntities): void {\r\n\r\n        if (checked) {\r\n\r\n            if (!status) {\r\n                this._showStatuses = null;\r\n            } else {\r\n                if (!this._showStatuses) {\r\n                    this._showStatuses = [];\r\n                }\r\n                this._showStatuses.push(status);\r\n            }\r\n            \r\n        } else {\r\n\r\n            if (!status) {\r\n                this._showStatuses = [];\r\n            } else {\r\n                if (!this._showStatuses) {\r\n                    this._showStatuses = [];\r\n                }\r\n\r\n                const i = this._showStatuses.indexOf(status);\r\n                if (i >= 0) {\r\n                    this._showStatuses.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n        }\r\n        this._refreshToken = setTimeout(() => this.reloadOrchestrations(), this._delayedRefreshDelay);\r\n    }\r\n\r\n    rescheduleDelayedRefresh() {\r\n        \r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = setTimeout(() => this.reloadOrchestrations(), this._delayedRefreshDelay);\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState & ResultsListTabState>) {\r\n        super();\r\n        \r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const timeRangeString = this._localStorage.getItem('timeRange');\r\n        if (!!timeRangeString) {\r\n\r\n            // timeRange and [timeFrom,timeTill] are mutually exclusive.\r\n            // So when the latter comes from query string, we should not pay attention to the former.\r\n            const queryString = new QueryString();\r\n            if (!queryString.values['timeFrom'] && !queryString.values['timeTill']) {   \r\n                this._timeRange = TimeRangeEnum[timeRangeString];\r\n            }\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showStatusesString = this._localStorage.getItem('showStatuses');\r\n        if (!!showStatusesString) {\r\n            this._showStatuses = JSON.parse(showStatusesString);\r\n        }\r\n        \r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const tabIndexString = this._localStorage.getItem('tabIndex');\r\n        if (!!tabIndexString) {\r\n            const tabIndex = Number(tabIndexString);\r\n            if (tabIndex >= 0 && tabIndex < this._tabStates.length) {\r\n                this._tabIndex = tabIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n\r\n        // Canceling delayed refresh, if any\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = null;\r\n        }\r\n\r\n        for (const resultState of this._tabStates) {\r\n            resultState.reset();\r\n        }\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: !this._timeRange ? this._timeFrom.toISOString(): null },\r\n            { fieldName: 'timeTill', value: (!!this._timeTill && !this._timeRange) ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'timeRange', value: !!this._timeRange ? TimeRangeEnum[this._timeRange] : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showStatuses', value: !!this._showStatuses ? JSON.stringify(this._showStatuses) : null },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        const cancelToken = this._cancelToken;\r\n        if (!!cancelToken.inProgress) {\r\n            return;            \r\n        }\r\n        cancelToken.inProgress = true;\r\n        \r\n        var filterClause = `&$filter=createdTime ge '${this.timeFrom.toISOString()}' and createdTime le '${this.timeTill.toISOString()}'`;\r\n        \r\n        if (!!this._showStatuses) {\r\n\r\n            filterClause += ` and runtimeStatus in (${this._showStatuses.map(s => `'${s}'`).join(',')})`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            const encodedFilterValue = encodeURIComponent(this._filterValue);\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${encodedFilterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${encodedFilterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${encodedFilterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.NotEquals:\r\n                    filterClause += `${this._filteredColumn} ne '${encodedFilterValue}'`;\r\n                    break;\r\n                case FilterOperatorEnum.NotStartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${encodedFilterValue}') eq false`;\r\n                    break;\r\n                case FilterOperatorEnum.NotContains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${encodedFilterValue}') eq false`;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.selectedTabState.load(filterClause, cancelToken, isAutoRefresh).then(() => {\r\n\r\n            if (!!this._refreshToken) {\r\n                clearTimeout(this._refreshToken);\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                this._refreshToken = setTimeout(() => {\r\n\r\n                    this.loadOrchestrations(true);\r\n\r\n                }, this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n                \r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _tabIndex: ResultsTabEnum = ResultsTabEnum.List;\r\n\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n    @observable\r\n    private _timeRange: TimeRangeEnum = TimeRangeEnum.Custom;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    @observable\r\n    private _showStatuses: RuntimeStatusOrDurableEntities[] = null;\r\n\r\n    private readonly _tabStates: IResultsTabState[] = [\r\n        new ResultsListTabState(this._backendClient, this._localStorage, () => this.reloadOrchestrations()),\r\n        new ResultsHistogramTabState(this._backendClient, this),\r\n        new ResultsGanttDiagramTabState(this._backendClient)\r\n    ];\r\n\r\n    private get listState(): ResultsListTabState { return this._tabStates[0] as ResultsListTabState; }\r\n\r\n    private _refreshToken: NodeJS.Timeout;\r\n    private readonly _delayedRefreshDelay = 2500;\r\n\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n}","import { observable } from 'mobx'\r\n\r\nexport class CancelToken {\r\n    @observable\r\n    inProgress: boolean = false;\r\n    @observable\r\n    isCancelled: boolean = false;\r\n}\r\n","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// Represents the state of a tab in the results pane\r\nexport interface IResultsTabState {\r\n\r\n    reset(): void;\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void>;\r\n}\r\n\r\n// Resulting list of orchestrations represented as a plain table\r\nexport class ResultsListTabState implements IResultsTabState {\r\n\r\n    @observable\r\n    longJsonDialogState = {};\r\n    \r\n    @observable\r\n    columnUnderMouse: string;\r\n\r\n    @computed\r\n    get hiddenColumns(): string[] { return this._hiddenColumns; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection; }\r\n\r\n    @computed\r\n    get orderBy(): string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val) {\r\n\r\n            this._orderBy = val;\r\n            this._orderByDirection = 'asc';\r\n\r\n        } else if (this._orderByDirection === 'desc') {\r\n\r\n            this.resetOrderBy();\r\n        }\r\n        else {\r\n            this._orderByDirection = 'desc';\r\n        }\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<ResultsListTabState>, private _refresh: () => void) {\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n\r\n        const hiddenColumnsString = this._localStorage.getItem('hiddenColumns');\r\n        if (!!hiddenColumnsString) {\r\n            this._hiddenColumns = hiddenColumnsString.split('|');\r\n        }\r\n    }\r\n\r\n    hideColumn(name: string) {\r\n        this._hiddenColumns.push(name);\r\n        this._localStorage.setItem('hiddenColumns', this._hiddenColumns.join('|'));\r\n    }\r\n\r\n    unhide() {\r\n        this._hiddenColumns = [];\r\n        this._localStorage.removeItem('hiddenColumns');\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean = false): Promise<void> {\r\n\r\n        if (isAutoRefresh) { \r\n\r\n            this._noMorePagesToLoad = false;\r\n\r\n        } else {\r\n\r\n            if (!!this._noMorePagesToLoad) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            // persisting state as a batch\r\n            this._localStorage.setItems([\r\n                { fieldName: 'orderBy', value: this._orderBy },\r\n                { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n            ]);            \r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const hiddenColumnsClause = !this._hiddenColumns.length ? '' : `&hidden-columns=${this._hiddenColumns.join('|')}`;\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}${hiddenColumnsClause}`;\r\n\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n            \r\n            if (isAutoRefresh) {\r\n                this._orchestrations = response;\r\n            } else {\r\n                this._orchestrations.push(...response);\r\n            }\r\n\r\n            if (!response.length) {\r\n\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n\r\n    @observable\r\n    private _hiddenColumns: string[] = [];\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nconst RoutePrefix = !process.env.REACT_APP_BACKEND_BASE_URI ? (!DfmRoutePrefix ? '/' : `/${DfmRoutePrefix}/`) : process.env.REACT_APP_BACKEND_BASE_URI + '/';\r\nexport const BackendUri = RoutePrefix + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return RoutePrefix + this._getTaskHubName(); }\r\n\r\n    constructor(private _getTaskHubName: () => string, private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n\r\n        // Two-bugs away\r\n        if (!['get', 'post', 'put'].includes(method.toLowerCase())) {\r\n            return Promise.reject(new Error(`Method ${method} not supported`));\r\n        }\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + '/' + this._getTaskHubName() + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nexport const OrchestrationsPathPrefix = `/orchestrations/`;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @computed\r\n    get taskHubName(): string { return this._taskHubName;  }\r\n\r\n    @computed\r\n    get allowedTaskHubNames(): string[] { return this._allowedTaskHubNames; }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    // Returns window.location.pathname minus DFM's client-side routing\r\n    get locationPathName(): string {\r\n\r\n        var result = window.location.pathname;\r\n\r\n        const pos = result.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos >= 0) {\r\n            result = result.substring(0, pos);\r\n        }\r\n\r\n        if (!result.endsWith('/')) {\r\n            result += '/';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Returns the site's root URI (everything _before_ Task Hub name)\r\n    get rootUri(): string {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            const pos = window.location.href.toLowerCase().lastIndexOf('/' + hubName.toLowerCase());\r\n            if (pos >= 0) {\r\n                return window.location.href.substring(0, pos);\r\n            }\r\n        }\r\n\r\n        return window.location.origin +\r\n            (\r\n                window.location.pathname.endsWith('/') ?\r\n                    window.location.pathname.substr(0, window.location.pathname.length - 1) :\r\n                    window.location.pathname\r\n            );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Turning redirects off, as we don't ever need them anyway\r\n        axios.defaults.maxRedirects = 0;\r\n\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(response => this.loginWithEasyAuthConfig(response.data), err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        if (!this._aadApp) {\r\n\r\n            window.location.replace('/.auth/logout');\r\n\r\n        } else {\r\n            \r\n            this._aadApp.logout();\r\n        }\r\n    }\r\n\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<undefined>((resolve, reject) => resolve(undefined));\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    @observable\r\n    private _taskHubName: string;\r\n\r\n    @observable\r\n    private _allowedTaskHubNames: string[];\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    private loginWithEasyAuthConfig(config: {userName: string, clientId: string, authority: string}) {\r\n\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost or using server-directed login flow\r\n            // and proceed with no client-side auth\r\n            \r\n            this._userName = config.userName;\r\n\r\n            // Reloading the page upon cookie expiration\r\n            axios.interceptors.response.use(response => response, err => {\r\n\r\n                // Couldn't find a better way to detect this\r\n                if (err.message === 'Network Error') {\r\n                    window.location.reload(true);\r\n                }\r\n\r\n                return Promise.reject(err);\r\n            });\r\n\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority,\r\n                redirectUri: this.rootUri\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, (authErr: Msal.AuthError, accountState: string) => {\r\n\r\n            console.log(`Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`);\r\n        });\r\n\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            this._aadApp.loginRedirect();\r\n\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n        }\r\n    }\r\n\r\n    private initializeTaskHubNameAndConfirmLogin(): void {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            this._taskHubName = hubName;\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Trying to load the list of allowed Task Hubs from the backend\r\n        this.getAuthorizationHeaderAsync().then(headers => {\r\n\r\n            const uri = `${BackendUri}/task-hub-names`;\r\n            axios.get(uri, { headers }).then(response => {\r\n                \r\n                const hubNames: string[] = response.data;\r\n\r\n                if (hubNames.length === 1) {\r\n                    \r\n                    // Redirecting to that Task Hub\r\n                    window.location.pathname = this.locationPathName + hubNames[0];\r\n                } else {\r\n\r\n                    // Asking the user to choose from\r\n                    this._allowedTaskHubNames = hubNames;\r\n                }\r\n\r\n            }, err => {\r\n                this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n            });\r\n        });\r\n    }\r\n\r\n    // Extracts Task Hub name from window.location.href, still honoring client-side routing and subpaths\r\n    private tryGetTaskHubName(): string {\r\n\r\n        const locationPathName = this.locationPathName;\r\n\r\n        // If current path ends with DfmRoutePrefix, then it doesn't actually contain Task Hub name\r\n        if (locationPathName.toLowerCase().endsWith(`/${DfmRoutePrefix.toLowerCase()}/`)) {\r\n            return null;\r\n        }\r\n\r\n        const pathParts = locationPathName.split('/').filter(p => !!p);\r\n        if (pathParts.length < 1) {\r\n            return null;\r\n        }\r\n\r\n        // Consider the last path part to be the Task Hub name.\r\n        // This should work even if we're hosted under some subpath\r\n        return pathParts[pathParts.length - 1];\r\n    }\r\n}","import { observable } from 'mobx';\r\nimport mermaid from 'mermaid';\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\n\r\n// Base class for all mermaid-related states\r\nexport abstract class MermaidDiagramStateBase {\r\n\r\n    @observable\r\n    protected _diagramCode: string;\r\n    @observable\r\n    protected _diagramSvg: string;\r\n\r\n    protected initMermaidWhenNeeded() : void {\r\n\r\n        if (MermaidDiagramStateBase._mermaidInitialized) { \r\n            return;\r\n        }\r\n\r\n        mermaid.initialize({\r\n            startOnLoad: true,\r\n            \r\n            sequence: {\r\n                noteMargin: 0,\r\n                boxMargin: 5,\r\n                boxTextMargin: 5\r\n            },\r\n\r\n            flowchart: {\r\n                curve: 'Basis',\r\n                useMaxWidth: true,\r\n                htmlLabels: false\r\n            }\r\n        });\r\n\r\n        MermaidDiagramStateBase._mermaidInitialized = true;\r\n    }\r\n\r\n    protected escapeTitle(id: string) {\r\n\r\n        return id.replace(/[@:;]/g, ' ');\r\n    }\r\n\r\n    protected formatDuration(durationInMs: number): string {\r\n\r\n        const result = DateTimeHelpers.formatDuration(durationInMs);\r\n        return !result ? '' : `(${result})`;\r\n    }\r\n\r\n    protected formatDurationInSeconds(durationInMs: number): string {\r\n\r\n        return Math.ceil(durationInMs / 1000).toFixed(0) + 's';\r\n    }\r\n\r\n    private static _mermaidInitialized = false;\r\n}","import { computed } from 'mobx'\r\nimport mermaid from 'mermaid';\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { OrchestrationsPathPrefix } from './LoginState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\nimport { dfmContextInstance } from '../DfmContext';\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsGanttDiagramTabState extends MermaidDiagramStateBase implements IResultsTabState {\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; }\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; }\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n        this._instances = [];\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            const uri = `/orchestrations?$top=500&$orderby=createdTime asc${filterClause}`;\r\n\r\n            this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n                this._instances = instances;\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title Gantt Chart (${instances.length} instances shown) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss \\n' +\r\n                    this.renderDiagram(instances);\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n                        resolve();\r\n                    });\r\n\r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Opens the selected orchestrationId in a new tab\r\n    goto(oneBasedInstanceIndex: number) {\r\n\r\n        if (!!oneBasedInstanceIndex && oneBasedInstanceIndex <= this._instances.length) {\r\n\r\n            const instanceId = this._instances[oneBasedInstanceIndex - 1].instanceId;\r\n\r\n            if (this._backendClient.isVsCode) {\r\n                this._backendClient.call('OpenInNewWindow', instanceId);\r\n            } else {\r\n                window.open(`${this._backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${instanceId}`);\r\n            }            \r\n        }\r\n    }\r\n\r\n    private _instances: DurableOrchestrationStatus[] = [];\r\n\r\n    private renderDiagram(instances: DurableOrchestrationStatus[]): string {\r\n\r\n        var result: string = '';\r\n\r\n        var prevSectionName = '';\r\n        var sectionNr = 0;\r\n        for (const instance of instances) {\r\n\r\n            var nextLine = '';\r\n\r\n            // Grouping instances by their type\r\n            const sectionName = DurableOrchestrationStatus.getFunctionName(instance);\r\n            if (sectionName !== prevSectionName) {\r\n                \r\n                nextLine = `section ${++sectionNr}. ${this.escapeTitle(sectionName)} \\n`;\r\n                prevSectionName = sectionName;\r\n            }\r\n\r\n            const instanceId = instance.entityType === 'DurableEntity' ? instance.entityId.key : instance.instanceId;\r\n            const durationInMs = new Date(instance.lastUpdatedTime).getTime() - new Date(instance.createdTime).getTime();\r\n\r\n            nextLine += `${this.escapeTitle(instanceId)} ${this.formatDuration(durationInMs)}: active, ${this.formatDateTime(instance.createdTime)}, ${this.formatDurationInSeconds(durationInMs)} \\n`;\r\n            \r\n            result += nextLine;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private formatDateTime(utcDateTimeString: string): string {\r\n\r\n        if (!dfmContextInstance.showTimeAsLocal) {\r\n            return utcDateTimeString.substr(0, 19);\r\n        }\r\n\r\n        return moment(utcDateTimeString).format('YYYY-MM-DDTHH:mm:ss')\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { TimeRangeEnum } from './OrchestrationsState';\r\n\r\ntype HistogramColumn = { x0: number, x: number, y: number };\r\ntype TimeInterval = { timeFrom: moment.Moment, timeTill: moment.Moment, timeRange: TimeRangeEnum };\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsHistogramTabState implements IResultsTabState {\r\n\r\n    @computed\r\n    get zoomedIn() { return this._zoomedIn; }\r\n\r\n    @computed\r\n    get histograms() { return this._histograms; }\r\n\r\n    @computed\r\n    get numOfInstancesShown() { return this._numOfInstancesShown; }\r\n\r\n    get counts() { return this._counts; }\r\n\r\n    get timeRangeInMilliseconds(): number {\r\n        return this._timeRangeInMilliseconds;\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _filterState: TimeInterval & { reloadOrchestrations: () => void, cancel: () => void })\r\n    {\r\n    }\r\n\r\n    reset() {\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        if (!this._applyingZoom && !this._zoomedIn) {\r\n\r\n            this._originalTimeInterval = {\r\n                timeFrom: this._filterState.timeFrom,\r\n                timeTill: this._filterState.timeTill,\r\n                timeRange: this._filterState.timeRange\r\n            };\r\n        }\r\n\r\n        this._numOfInstancesShown = 0;\r\n        this._histograms = {};\r\n        this._counts = {};\r\n\r\n        const startTime = this._filterState.timeFrom.valueOf();\r\n        var bucketLength = Math.ceil((this._filterState.timeTill.valueOf() - startTime) / this._numOfIntervals);\r\n        if (bucketLength <= 0) {\r\n            bucketLength = 1;\r\n        }\r\n\r\n        // Need to remember this value, for later time axis rendering\r\n        this._timeRangeInMilliseconds = this._filterState.timeTill.valueOf() - this._filterState.timeFrom.valueOf();\r\n\r\n        return this.loadNextBatch(filterClause, startTime, bucketLength, 0, cancelToken);\r\n    }\r\n\r\n    applyZoom(left: Date, right: Date) {\r\n\r\n        this._numOfInstancesShown = 0;\r\n\r\n        this._filterState.cancel();\r\n        \r\n        // rounding to next second\r\n        const from = Math.floor(left.getTime() / 1000) * 1000;\r\n        const till = Math.ceil(right.getTime() / 1000) * 1000;\r\n\r\n        this._filterState.timeFrom = moment(from);\r\n        this._filterState.timeTill = moment(till);\r\n\r\n        this._applyingZoom = true;\r\n        try {\r\n            this._filterState.reloadOrchestrations();\r\n        } finally {\r\n            this._applyingZoom = false;\r\n        }\r\n\r\n        this._zoomedIn = true;\r\n    }\r\n\r\n    resetZoom() {\r\n\r\n        if (!this._zoomedIn || !this._originalTimeInterval) {\r\n            return;\r\n        }\r\n\r\n        this._zoomedIn = false;\r\n\r\n        this._filterState.cancel();\r\n\r\n        this._filterState.timeFrom = this._originalTimeInterval.timeFrom;\r\n        this._filterState.timeTill = this._originalTimeInterval.timeTill;\r\n        this._filterState.timeRange = this._originalTimeInterval.timeRange;\r\n    }\r\n\r\n    @observable\r\n    private _histograms: { [typeName: string]: HistogramColumn[]; } = {};\r\n\r\n    private _counts: { [typeName: string]: number; } = {};\r\n\r\n    @observable\r\n    private _numOfInstancesShown: number = 0;\r\n\r\n    @observable\r\n    private _zoomedIn = false;\r\n\r\n    private _originalTimeInterval: TimeInterval = null;\r\n    private _applyingZoom = false;\r\n    private _timeRangeInMilliseconds = 0;\r\n\r\n    private readonly _numOfIntervals = 200;\r\n    private readonly _pageSize = 1000;\r\n\r\n    private loadNextBatch(filterClause: string, startTime: number, bucketLength: number, pageNumber: number, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${this._numOfInstancesShown}${filterClause}`;\r\n\r\n        const promise = this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            for (var instance of instances) {\r\n\r\n                const instanceTypeName = DurableOrchestrationStatus.getFunctionName(instance);\r\n\r\n                if (!this._histograms[instanceTypeName]) {\r\n                    \r\n                    const emptyHistogram = [];\r\n                    for (var i = 0; i < this._numOfIntervals; i++) {\r\n                        emptyHistogram[i] = { x0: startTime + i * bucketLength, x: startTime + (i + 1) * bucketLength, y: 0 };\r\n                    }\r\n                    this._histograms[instanceTypeName] = emptyHistogram;\r\n                }\r\n\r\n                const instanceStartPos = Math.floor((new Date(instance.createdTime).getTime() - startTime) / bucketLength);\r\n                if (instanceStartPos < 0 || instanceStartPos >= this._numOfIntervals) {\r\n                    continue;\r\n                }\r\n\r\n                this._histograms[instanceTypeName][instanceStartPos].y += 1;\r\n\r\n                if (!this._counts[instanceTypeName]) {\r\n                    this._counts[instanceTypeName] = 1;\r\n                } else {\r\n                    this._counts[instanceTypeName] += 1;\r\n                }\r\n            }\r\n\r\n            this._numOfInstancesShown += instances.length;\r\n\r\n            if (instances.length === this._pageSize) {\r\n                \r\n                return this.loadNextBatch(filterClause, startTime, bucketLength, pageNumber + 1, cancelToken);\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n}","\r\n// Helper class for dealing with browser's query string\r\nexport class QueryString {\r\n\r\n    constructor() {\r\n\r\n        const pairs = window.location.search.substr(1).split('&');\r\n        for (var pairString of pairs) {\r\n            const pair = pairString.split('=');\r\n            if (pair.length > 1) {\r\n                this._values[pair[0]] = decodeURIComponent(pair[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    get values(): { [key: string]: string } { return this._values; }\r\n\r\n    apply(): void {\r\n\r\n        var queryString = '';\r\n\r\n        for (var key in this._values) {\r\n            if (!!queryString) {\r\n                queryString += '&';\r\n            }\r\n            queryString += key + '=' + encodeURIComponent(this._values[key]);\r\n        }\r\n\r\n        window.history.replaceState(null, null, !queryString ? '' : '?' + queryString);\r\n    }\r\n\r\n    private _values: { [key: string]: string } = {};\r\n}","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nimport { RuntimeStatus } from './states/DurableOrchestrationStatus';\r\nimport { dfmContextInstance } from './DfmContext';\r\n\r\nconst colorTheme = !process.env.REACT_APP_COLOR_THEME ? dfmContextInstance.theme : process.env.REACT_APP_COLOR_THEME;\r\n\r\nexport const Theme = createMuiTheme({\r\n    palette: { type: colorTheme === 'dark' ? 'dark' : 'light' }\r\n});\r\n\r\nexport const CustomTabStyle = Theme.palette.type === \"dark\" ? {\r\n    backgroundColor: '#aaa'\r\n} : {};\r\n\r\nexport function RuntimeStatusToStyle(status: RuntimeStatus): {} {\r\n\r\n    var backgroundColor: string = null;\r\n\r\n    switch (status) {\r\n        case \"Failed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.error.light, 0.2);\r\n            break;\r\n        case \"Completed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.success.light, 0.2);\r\n            break;\r\n        case \"Running\":\r\n            backgroundColor = hexToRGBA(Theme.palette.warning.light, 0.2);\r\n            break;\r\n        case \"Terminated\":\r\n            backgroundColor = hexToRGBA(Theme.palette.background.paper, 0.1);\r\n            break;\r\n    }\r\n\r\n    return !!backgroundColor ? { backgroundColor } : {};\r\n}\r\n\r\nexport function hexToRGBA(hex: string, alpha: number): string {\r\n\r\n    if (hex.length > 4) {\r\n        return `rgba(${parseInt(hex.slice(1, 3), 16)}, ${parseInt(hex.slice(3, 5), 16)}, ${parseInt(hex.slice(5, 7), 16)}, ${alpha.toFixed(1)})`;\r\n    } else {\r\n        return `rgba(${parseInt(hex.slice(1, 2), 16)}, ${parseInt(hex.slice(2, 3), 16)}, ${parseInt(hex.slice(3, 4), 16)}, ${alpha.toFixed(1)})`;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationsPathPrefix } from '../states/LoginState';\r\nimport { Theme } from '../theme';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, title?: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href=\"/\" onClick={this.onLinkClicked} >\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href={`${this.props.backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Button, Dialog, DialogActions, DialogContent, DialogTitle, InputBase, Link\r\n} from '@material-ui/core';\r\n\r\nconst MaxJsonLengthToShow = 512;\r\nconst MaxJsonLengthToShowAsLink = 20;\r\n\r\nexport type LongJsonDialogState = { title?: string, jsonString?: string };\r\n\r\n// Dialog to display long JSON strings\r\n@observer\r\nexport class LongJsonDialog extends React.Component<{ state: LongJsonDialogState }> {\r\n    \r\n    public static renderJson(jsonObject: any, dialogTitle: string, dialogState: LongJsonDialogState): JSX.Element {\r\n\r\n        if (!jsonObject) {\r\n            return null;\r\n        }\r\n\r\n        const jsonString = (typeof jsonObject === 'string' ? jsonObject : JSON.stringify(jsonObject));\r\n \r\n        if (jsonString.length <= MaxJsonLengthToShow) {\r\n\r\n            return (<InputBase\r\n                className=\"long-text-cell-input\"\r\n                multiline fullWidth rowsMax={5} readOnly\r\n                value={jsonString}\r\n            />);\r\n        }\r\n\r\n        const jsonFormattedString = (typeof jsonObject === 'string' ? jsonObject : JSON.stringify(jsonObject, null, 3));\r\n\r\n        return (<Link className=\"unhide-button\"\r\n            component=\"button\"\r\n            variant=\"inherit\"\r\n            onClick={() => {\r\n                dialogState.title = dialogTitle;\r\n                dialogState.jsonString = jsonFormattedString;\r\n            }}\r\n        >\r\n            {jsonString.substr(0, MaxJsonLengthToShowAsLink)}...\r\n        </Link>)\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog fullWidth={true} maxWidth=\"md\" open={!!state.jsonString} onClose={() => state.jsonString = ''}>\r\n\r\n                <DialogTitle>{state.title}</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <InputBase\r\n                        multiline fullWidth readOnly\r\n                        value={state.jsonString}\r\n                    />                    \r\n                </DialogContent>\r\n                \r\n                <DialogActions>\r\n                    <Button onClick={() => state.jsonString = ''} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n       );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, IconButton, InputBase, Link, Paper, Table, TableBody, TableCell, TableHead, TableRow,\r\n    TableSortLabel, Typography\r\n} from '@material-ui/core';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { ResultsListTabState } from '../states/ResultsListTabState';\r\nimport { DfmContextType } from '../DfmContext';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { LongJsonDialog } from './LongJsonDialog';\r\n\r\n// Orchestrations list view\r\n@observer\r\nexport class OrchestrationsList extends React.Component<{ state: ResultsListTabState, showLastEventColumn: boolean, backendClient: IBackendClient }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            <FormHelperText className=\"items-count-label\">\r\n                {!!state.orchestrations.length && (<>\r\n                    \r\n                    {`${state.orchestrations.length} items shown`}\r\n\r\n                    {!!state.hiddenColumns.length && (<>\r\n\r\n                        {`, ${state.hiddenColumns.length} columns hidden `}\r\n\r\n                        (<Link className=\"unhide-button\"\r\n                            component=\"button\"\r\n                            variant=\"inherit\"\r\n                            onClick={() => state.unhide()}\r\n                        >\r\n                            unhide\r\n                        </Link>)\r\n\r\n                    </>)}\r\n\r\n                </>)}\r\n            </FormHelperText>\r\n\r\n            <Paper elevation={0}>\r\n                {this.renderTable(state)}\r\n            </Paper>\r\n\r\n            <LongJsonDialog state={state.longJsonDialogState} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderTable(state: ResultsListTabState): JSX.Element {\r\n\r\n        if (!state.orchestrations.length) {\r\n            return (\r\n                <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                    This list is empty\r\n                </Typography>\r\n            );\r\n        }\r\n\r\n        const visibleColumns = DurableOrchestrationStatusFields\r\n            // hiding artificial 'lastEvent' column, when not used\r\n            .filter(f => this.props.showLastEventColumn ? true : f !== 'lastEvent');\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {visibleColumns.map(col => {\r\n\r\n                            const onlyOneVisibleColumnLeft = visibleColumns.length <= state.hiddenColumns.length + 1;\r\n\r\n                            return !state.hiddenColumns.includes(col) && (\r\n                                <TableCell key={col}\r\n                                    onMouseEnter={() => state.columnUnderMouse = col}\r\n                                    onMouseLeave={() => state.columnUnderMouse = ''}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={state.orderBy === col}\r\n                                        direction={state.orderByDirection}\r\n                                        onClick={() => state.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n                                    </TableSortLabel>\r\n\r\n                                    {state.columnUnderMouse === col && !onlyOneVisibleColumnLeft && (\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size=\"small\"\r\n                                            className=\"column-hide-button\"\r\n                                            onClick={() => state.hideColumn(col)}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                    )}\r\n\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const rowStyle = RuntimeStatusToStyle(orchestration.runtimeStatus);\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                style={rowStyle}\r\n                            >\r\n                                {!state.hiddenColumns.includes('instanceId') && (\r\n                                    <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                        <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={this.props.backendClient} />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('name') && (\r\n                                    <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                        {orchestration.name}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('createdTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {this.context.formatDateTimeString(orchestration.createdTime)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('lastUpdatedTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {this.context.formatDateTimeString(orchestration.lastUpdatedTime)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('duration') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {DateTimeHelpers.formatDuration(orchestration.duration)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('runtimeStatus') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.runtimeStatus}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('lastEvent') && this.props.showLastEventColumn && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.lastEvent}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('input') && (\r\n                                    <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                        {LongJsonDialog.renderJson(orchestration.input, `${orchestration.instanceId} / input`, state.longJsonDialogState)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('output') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        {LongJsonDialog.renderJson(orchestration.output, `${orchestration.instanceId} / output`, state.longJsonDialogState)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('customStatus') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        {LongJsonDialog.renderJson(orchestration.customStatus, `${orchestration.instanceId} / customStatus`, state.longJsonDialogState)}\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport moment from 'moment';\r\n\r\nimport { FormHelperText, Link } from '@material-ui/core';\r\n\r\nimport { XYPlot, XAxis, YAxis, DiscreteColorLegend, VerticalRectSeries, Highlight } from 'react-vis';\r\n\r\nimport { ResultsHistogramTabState } from '../states/ResultsHistogramTabState';\r\nimport { DfmContextType } from '../DfmContext';\r\n\r\n// Orchestrations histogram view\r\n@observer\r\nexport class OrchestrationsHistogram extends React.Component<{ state: ResultsHistogramTabState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n        const typeNames = Object.keys(state.histograms).sort();\r\n\r\n        return (<>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {`${state.numOfInstancesShown} items shown`}\r\n\r\n                {state.zoomedIn && (<>\r\n\r\n                    {', '}\r\n                    <Link className=\"unhide-button\"\r\n                        component=\"button\"\r\n                        variant=\"inherit\"\r\n                        onClick={() => state.resetZoom()}\r\n                    >\r\n                        reset zoom (Ctrl+Z)\r\n                        </Link>\r\n                </>)}\r\n\r\n            </FormHelperText>\r\n\r\n            <XYPlot\r\n                width={window.innerWidth - 40} height={window.innerHeight - 400}\r\n                xType=\"time\"\r\n                stackBy=\"y\"\r\n                margin={{ left: 80, right: 10, top: 20 }}\r\n            >\r\n                {!!state.numOfInstancesShown && (\r\n                    <YAxis tickTotal={7} />\r\n                )}\r\n                <XAxis tickTotal={7} tickFormat={t => this.formatTimeTick(t, state.timeRangeInMilliseconds)} />\r\n\r\n                {typeNames.map(typeName => (<VerticalRectSeries\r\n                    key={typeName}\r\n                    stroke=\"white\"\r\n                    color={this.getColorCodeForInstanceType(typeName)}\r\n                    data={state.histograms[typeName]}\r\n                />))}\r\n\r\n                {!!state.numOfInstancesShown && (\r\n\r\n                    <Highlight\r\n                        color=\"#829AE3\"\r\n                        drag\r\n                        enableY={false}\r\n\r\n                        onDragEnd={(area) => {\r\n                            if (!!area) {\r\n                                state.applyZoom(area.left, area.right);\r\n                            }\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n            </XYPlot>\r\n\r\n            <DiscreteColorLegend className=\"histogram-legend\"\r\n                colors={typeNames.map(typeName => this.getColorCodeForInstanceType(typeName))}\r\n                items={typeNames.map(typeName => `${typeName} (${state.counts[typeName]})`)}\r\n                orientation=\"horizontal\"\r\n            />\r\n\r\n        </>);\r\n    }\r\n\r\n    private getColorCodeForInstanceType(instanceType: string): string {\r\n\r\n        // Taking hash out of input string (reversed, to make names like 'func1', 'func2' etc. look different)\r\n        var hashCode = 0;\r\n        for (var i = instanceType.length - 1; i >= 0; i--) {\r\n            hashCode = ((hashCode << 5) - hashCode) + instanceType.charCodeAt(i);\r\n            // Convert to positive 32-bit integer\r\n            hashCode &= 0x7FFFFFFF;\r\n        }\r\n\r\n        // min 6 hex digits\r\n        hashCode |= 0x100000;\r\n\r\n        // Not too white\r\n        hashCode &= 0xFFFFEF;\r\n\r\n        return '#' + hashCode.toString(16);\r\n    }\r\n\r\n    private formatTimeTick(t: Date, timeRange: number) {\r\n\r\n        const m = moment(t);\r\n\r\n        if (!this.context.showTimeAsLocal) {\r\n            m.utc();\r\n        }\r\n\r\n        if (timeRange > 5 * 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD');\r\n        }\r\n\r\n        if (timeRange > 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD HH:mm');\r\n        }\r\n\r\n        if (timeRange > 10000) {\r\n\r\n            return m.second() === 0 ? m.format('HH:mm') : m.format('HH:mm:ss');\r\n        }\r\n\r\n        return (m.millisecond() === 0) ? m.format('HH:mm:ss') : m.format(':SSS');\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport { Box, Button, Typography } from '@material-ui/core';\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// A button to save something as an .SVG file\r\nexport class SaveAsSvgButton extends React.Component<{ svg: string, fileName: string, inProgress: boolean, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => this.props.backendClient.call('SaveAs', this.props.fileName + '.svg', this.props.svg)}\r\n                >\r\n                    <SaveIcon />\r\n                    <Box width={20} />\r\n                    <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                </Button>\r\n            );\r\n\r\n        } else {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    href={URL.createObjectURL(new Blob([this.props.svg], { type: 'image/svg+xml' }))}\r\n                    download={this.props.fileName + '.svg'}\r\n                >\r\n                    <SaveIcon />\r\n                    <Box width={20} />\r\n                    <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Appends some styling to SVG code, so it can also be saved as file\r\nexport function getStyledSvg(svg: string): string {\r\n\r\n    return svg.replace('</style>',\r\n        '.note { stroke: none !important; fill: none !important; } ' +\r\n        '.noteText { font-size: 9px !important; } ' +\r\n        '</style>'\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport { ResultsGanttDiagramTabState } from '../states/ResultsGanttDiagramTabState';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\nimport { CustomTabStyle } from '../theme';\r\n\r\n// Orchestrations Gantt chart view\r\n@observer\r\nexport class OrchestrationsGanttChart extends React.Component<{ state: ResultsGanttDiagramTabState, inProgress: boolean, fileName: string, backendClient: IBackendClient }> {\r\n\r\n    componentDidUpdate() {\r\n\r\n        // Mounting click handlers to diagram nodes\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('task'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskText'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideLeft'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideRight'));\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        if (!state.rawHtml) {\r\n            return null;\r\n        }\r\n\r\n        return (<>\r\n\r\n            <div\r\n                className=\"raw-html-div\"\r\n                style={CustomTabStyle}\r\n                dangerouslySetInnerHTML={{ __html: getStyledSvg(state.rawHtml) }}\r\n            />\r\n\r\n            <Toolbar variant=\"dense\">\r\n\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                >\r\n                    <FileCopyIcon />\r\n                    <Box width={10} />\r\n                    <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                </Button>\r\n\r\n                <Box width={20} />\r\n\r\n                <SaveAsSvgButton\r\n                    svg={getStyledSvg(state.rawHtml)}\r\n                    fileName={this.props.fileName}\r\n                    inProgress={this.props.inProgress}\r\n                    backendClient={this.props.backendClient}\r\n                />\r\n\r\n                <Box width={20} />\r\n            </Toolbar>\r\n        </>);\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n\r\n            const oneBasedInstanceIndex = parseInt(el.id.substr(4));\r\n            el.onclick = () => state.goto(oneBasedInstanceIndex);\r\n            el.style.cursor = 'pointer';\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, Checkbox, FormGroup, FormControl, FormControlLabel, Grid,\r\n    InputLabel, LinearProgress, Menu, MenuItem, Select, Tab, Tabs, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DurableOrchestrationStatusFields, RuntimeStatuses } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationsState, ResultsTabEnum, FilterOperatorEnum, TimeRangeEnum } from '../states/OrchestrationsState';\r\nimport { ResultsListTabState } from '../states/ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from '../states/ResultsGanttDiagramTabState';\r\nimport { ResultsHistogramTabState } from 'src/states/ResultsHistogramTabState';\r\nimport { OrchestrationsList } from './OrchestrationsList';\r\nimport { OrchestrationsHistogram } from './OrchestrationsHistogram';\r\nimport { OrchestrationsGanttChart } from './OrchestrationsGanttChart';\r\nimport { DfmContextType } from '../DfmContext';\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const state = this.props.state;\r\n\r\n            if (state.tabIndex !== ResultsTabEnum.List ) {\r\n                return;\r\n            }\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                state.loadOrchestrations();\r\n            }\r\n        });\r\n\r\n        // Doing zoom reset\r\n        document.addEventListener('keydown', (evt: any) => {\r\n\r\n            const state = this.props.state;\r\n            if (state.tabIndex === ResultsTabEnum.Histogram && !!evt.ctrlKey && evt.keyCode === 90) {\r\n\r\n                const histogramState = state.selectedTabState as ResultsHistogramTabState;\r\n                histogramState.resetZoom();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n        const listState = state.selectedTabState as ResultsListTabState;\r\n        const histogramState = state.selectedTabState as ResultsHistogramTabState;\r\n        const ganttChartState = state.selectedTabState as ResultsGanttDiagramTabState;\r\n\r\n        const timeZone = !this.context.showTimeAsLocal ? 'UTC' : 'Local';\r\n\r\n        return (<>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.LastMinute}>Last Minute</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last10Minutes}>Last 10 Minutes</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.LastHour}>Last Hour</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last24Hours}>Last 24 Hours</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last7Days}>Last 7 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last30Days}>Last 30 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last90Days}>Last 90 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Custom}>Custom</MenuItem>\r\n            </Menu>\r\n            \r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Grid container className=\"toolbar-grid1\">\r\n                        <Grid item xs={12}>\r\n\r\n                            <Button size=\"small\" variant=\"outlined\" className=\"time-period-menu-drop-btn\"\r\n                                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                            >\r\n                                <ArrowDropDownIcon/>\r\n                            </Button>\r\n                            \r\n                            {!!state.timeRange ? (\r\n                                <TextField\r\n                                    className=\"from-input\"\r\n                                    label=\"Time Range\"\r\n                                    InputProps={{ readOnly: true }}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    type=\"text\"\r\n                                    value={this.timeRangeToString(state.timeRange)}\r\n                                />\r\n                            ) : (\r\n                                <KeyboardDateTimePicker\r\n                                    className=\"from-input\"\r\n                                    ampm={false}\r\n                                    autoOk={true}\r\n                                    label={`From (${timeZone})`}\r\n                                    invalidDateMessage=\"\"\r\n                                    format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                    disabled={state.inProgress}\r\n                                    value={this.context.getMoment(state.timeFrom)}\r\n                                    onChange={(t) => state.timeFrom = this.context.setMoment(t)}\r\n                                    onBlur={() => state.applyTimeFrom()}\r\n                                    onAccept={() => state.applyTimeFrom()}\r\n                                    onKeyPress={this.handleKeyPress}\r\n                                />\r\n                            )}\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n\r\n                            {!state.timeRange && (<>\r\n\r\n                                <FormControl>\r\n                                    <Checkbox\r\n                                        id=\"till-checkbox\"\r\n                                        className=\"till-checkbox\"\r\n                                        disabled={state.inProgress}\r\n                                        checked={state.timeTillEnabled}\r\n                                        onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                                    />\r\n                                </FormControl>\r\n\r\n                                {state.timeTillEnabled ? (\r\n                                    <KeyboardDateTimePicker\r\n                                        className=\"till-input\"\r\n                                        ampm={false}\r\n                                        autoOk={true}\r\n                                        label={`Till (${timeZone})`}\r\n                                        invalidDateMessage=\"\"\r\n                                        format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                        disabled={state.inProgress}\r\n                                        value={this.context.getMoment(state.timeTill)}\r\n                                        onChange={(t) => state.timeTill = this.context.setMoment(t)}\r\n                                        onBlur={() => state.applyTimeTill()}\r\n                                        onAccept={() => state.applyTimeTill()}\r\n                                        onKeyPress={this.handleKeyPress}\r\n                                    />\r\n                                ) : (\r\n                                    <TextField\r\n                                        className=\"till-input\"\r\n                                        label={`Till (${timeZone})`}\r\n                                        placeholder=\"[Now]\"\r\n                                        InputLabelProps={{ shrink: true }}\r\n                                        type=\"text\"\r\n                                        disabled={true}\r\n                                    />\r\n                                )}\r\n\r\n                            </>)}\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid2\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl>\r\n                                <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select filtered-column-input\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filteredColumn}\r\n                                    onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                    inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                    <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                    {DurableOrchestrationStatusFields.map(col => {\r\n                                        return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                    })}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className=\"toolbar-grid2-item1-select\">\r\n                                <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filterOperator}\r\n                                    onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                    inputProps={{ id: \"filter-operator-select\" }}>\r\n                                    <MenuItem value={FilterOperatorEnum.Equals}>Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.StartsWith}>Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.Contains}>Contains</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotEquals}>Not Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotStartsWith}>Not Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotContains}>Not Contains</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                            <TextField\r\n                                className=\"filter-value-input\"\r\n                                label=\"Filter Value\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                placeholder=\"[some text or 'null']\"\r\n                                disabled={state.filteredColumn === '0' || state.inProgress}\r\n                                value={state.filterValue}\r\n                                onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                                onBlur={() => state.applyFilterValue()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <FormGroup className=\"toolbar-runtime-status-group\">\r\n\r\n                        <InputLabel className=\"toolbar-runtime-status-group-label\" shrink={true}>Type/Status {!state.showStatuses ? '' : ` (${state.showStatuses.length} selected)`}</InputLabel>\r\n\r\n                        <FormGroup className=\"toolbar-runtime-status-checkbox-group\" onScroll={() => state.rescheduleDelayedRefresh()}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked()}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked)}\r\n                                />}\r\n                                label=\"[All]\"\r\n                            />\r\n\r\n                            {RuntimeStatuses.map(status => (<FormControlLabel key={status}\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked(status)}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked, status)}\r\n                                />}\r\n                                label={'Orchestations:' + status}\r\n                            />))}\r\n\r\n                            <FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked('DurableEntities')}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked, 'DurableEntities')}\r\n                                />}\r\n                                label=\"Durable Entities\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                    </FormGroup>\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Grid container className=\"toolbar-grid3\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl className=\"form-control-float-right\">\r\n                                <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                                <Select\r\n                                    className=\"autorefresh-select\"\r\n                                    inputProps={{ id: \"auto-refresh-select\" }}\r\n                                    value={state.autoRefresh}\r\n                                    onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                                >\r\n                                    <MenuItem value={0}>Never</MenuItem>\r\n                                    <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                    <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                    <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                            <Button\r\n                                className=\"refresh-button form-control-float-right\"\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                size=\"large\"\r\n                                onClick={() => state.inProgress ? state.cancel() : state.reloadOrchestrations()}\r\n                            >\r\n                                {state.inProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <AppBar color=\"inherit\" position=\"static\">\r\n                <Tabs className=\"tab-buttons\" value={state.tabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.tabIndex = val}>\r\n\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">List</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Time Histogram</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Gantt Chart</Typography>} />\r\n\r\n                </Tabs>\r\n            </AppBar>\r\n\r\n            {state.tabIndex === ResultsTabEnum.List && (<>\r\n\r\n                <OrchestrationsList state={listState} showLastEventColumn={state.showLastEventColumn} backendClient={state.backendClient} />\r\n\r\n                {state.inProgress && !!listState.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                \r\n            </>)}\r\n\r\n            {state.tabIndex === ResultsTabEnum.Histogram &&\r\n                (<OrchestrationsHistogram state={histogramState} />)\r\n            }\r\n            \r\n            {state.tabIndex === ResultsTabEnum.Gantt &&\r\n                (<OrchestrationsGanttChart\r\n                    state={ganttChartState}\r\n                    inProgress={state.inProgress}\r\n                    fileName={`gantt-chart-${state.timeFrom.format('YYYY-MM-DD-HH-mm-ss')}-${state.timeTill.format('YYYY-MM-DD-HH-mm-ss')}`} \r\n                    backendClient={state.backendClient} \r\n                />)\r\n            }\r\n                \r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private timeRangeToString(timeRange: TimeRangeEnum): string {\r\n        switch (timeRange) {\r\n            case TimeRangeEnum.LastMinute: return 'Last Minute';\r\n            case TimeRangeEnum.Last10Minutes: return 'Last 10 Minutes';\r\n            case TimeRangeEnum.LastHour: return 'Last Hour';\r\n            case TimeRangeEnum.Last24Hours: return 'Last 24 Hours';\r\n            case TimeRangeEnum.Last7Days: return 'Last 7 Days';\r\n            case TimeRangeEnum.Last30Days: return 'Last 30 Days';\r\n            case TimeRangeEnum.Last90Days: return 'Last 90 Days';\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Send Signal\r\n            </Button>\r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Send Signal</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide signal name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Signal Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Signal Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Send\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Grid, TextField } from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId?.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId?.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    FormControlLabel, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.restartDialogOpen = true}>\r\n                Restart\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.restartDialogOpen}\r\n                onClose={() => state.restartDialogOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Restart</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to restart orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n\r\n                    <FormControlLabel control={<Checkbox\r\n                        checked={state.restartWithNewInstanceId}\r\n                        onChange={(evt) => state.restartWithNewInstanceId = evt.target.checked} />}\r\n                        label=\"Restart with new instanceId\"\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.restartDialogOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.restart()} color=\"secondary\">\r\n                        Restart\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, Link, Table, TableBody, TableCell, TableHead, TableRow, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { HistoryEventFields, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { DfmContextType } from '../DfmContext';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\nimport { Theme } from '../theme';\r\nimport { LongJsonDialog } from './LongJsonDialog';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    componentDidMount() {\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) {\r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 50;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadHistory();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        const totalItems = state.historyTotalCount;\r\n        const details = state.details;\r\n        const history = state.history;\r\n        const itemsShown = history.length;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"instanceId\"\r\n                        value={details.instanceId}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={this.context.formatDateTimeString(details.createdTime)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={this.context.formatDateTimeString(details.lastUpdatedTime)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: { totalItems === itemsShown ? `${itemsShown} items` : `${itemsShown} of ${totalItems} items shown` }\r\n            </FormHelperText>\r\n\r\n            {!!history.length && this.renderTable(history)}\r\n\r\n            <LongJsonDialog state={state.longJsonDialogState} />\r\n\r\n        </>);\r\n    }\r\n\r\n    private getFunctionName(event: HistoryEvent): string {\r\n\r\n        if (!!event.Name) {\r\n            return event.Name;\r\n        }\r\n\r\n        return event.FunctionName ?? '';\r\n    }\r\n\r\n    private renderEventLink(event: HistoryEvent): JSX.Element | string {\r\n\r\n        const state = this.props.state;\r\n\r\n        if (!!event.SubOrchestrationId) {\r\n            return (<OrchestrationLink orchestrationId={event.SubOrchestrationId}\r\n                title={event.FunctionName}\r\n                backendClient={state.backendClient}\r\n            />);\r\n        }\r\n\r\n        const functionName = this.getFunctionName(event);\r\n\r\n        if (!!state.functionNames[functionName]) {\r\n            \r\n            // Showing link to sources\r\n            return (<Link href=\"/\"\r\n                color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'}\r\n                onClick={() => { state.gotoFunctionCode(functionName) }}\r\n            >\r\n                {functionName}\r\n            </Link>);\r\n        }\r\n\r\n        return functionName;\r\n    }\r\n\r\n    private renderTable(events: HistoryEvent[]): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: HistoryEvent, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {this.context.formatDateTimeString(event.Timestamp)}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {this.renderEventLink(event)}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {this.context.formatDateTimeString(event.ScheduledTime)}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    {LongJsonDialog.renderJson(event.Result, `${event.EventType} / ${this.getFunctionName(event)} / ${HistoryEventFields[4]}`, this.props.state.longJsonDialogState)}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    {LongJsonDialog.renderJson(event.Details, `${event.EventType} / ${this.getFunctionName(event)} / ${HistoryEventFields[5]}`, this.props.state.longJsonDialogState)}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, FormControl, InputLabel, LinearProgress, MenuItem,\r\n    Select, Tabs, Tab, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\nimport { CustomTabStyle } from '../theme';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        // Mounting click handlers to diagram nodes\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('actor'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('messageText'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('task'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskText'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideLeft'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideRight'));\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"details-top-toolbar\">\r\n\r\n                    {state.details.entityType === \"Orchestration\" && (\r\n                        <OrchestrationButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    {state.details.entityType === \"DurableEntity\" && (\r\n                        <DurableEntityButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            inputProps={{ id: 'auto-refresh-select' }}>\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress && !state.loadInProgress}\r\n                        onClick={() => state.loadInProgress ? state.cancel() : state.loadDetails()}\r\n                    >\r\n                        {state.loadInProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {(!!state.tabStates.length || state.functionGraphAvailable) && (<>\r\n                <AppBar color=\"inherit\" position=\"static\">\r\n                    <Tabs className=\"tab-buttons\" value={state.tabIndex}\r\n                        onChange={(ev: React.ChangeEvent<{}>, val) => {\r\n                            // Link to functions graph should not be selectable\r\n                            if (val !== 'functions-graph-link') {\r\n                                state.tabIndex = val;\r\n                            }\r\n                        }}>\r\n                        \r\n                        <Tab className=\"tab-buttons\" disabled={state.inProgress} \r\n                            label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Details</Typography>}\r\n                        />\r\n                        \r\n                        {state.tabStates.map(tabState => (\r\n                            <Tab className=\"tab-buttons\" key={tabState.name} disabled={state.inProgress} \r\n                                label={<Typography color=\"textPrimary\" variant=\"subtitle2\">{tabState.name}</Typography>}\r\n                            />\r\n                        ))}\r\n\r\n                        {state.functionGraphAvailable && (\r\n                            <Tab className=\"tab-buttons\"\r\n                                disabled={state.inProgress}\r\n                                value={'functions-graph-link'}\r\n                                onClick={(ev: React.MouseEvent) => {\r\n                                    ev.preventDefault();\r\n                                    state.showFunctionsGraph();\r\n                                }}\r\n                                label={<span className=\"functions-graph-tab-span\">\r\n                                    <Typography color=\"textPrimary\" variant=\"subtitle2\">Functions Graph</Typography>\r\n                                    <OpenInNewIcon className=\"functions-graph-link-icon\" />\r\n                                </span>}\r\n                            />\r\n                        )}\r\n\r\n                    </Tabs>\r\n                </AppBar>\r\n            </>)}\r\n\r\n            {!state.tabIndex && state.details.entityType === \"Orchestration\" && (<>\r\n                <OrchestrationFields state={state} />\r\n\r\n                {state.inProgress && !!state.history.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            </>)}\r\n\r\n            {!state.tabIndex && state.details.entityType === \"DurableEntity\" &&\r\n                <DurableEntityFields details={state.details} />\r\n            }\r\n\r\n            {!!state.selectedTab && !!state.selectedTab.rawHtml && (<>\r\n\r\n                <div\r\n                    className=\"raw-html-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.selectedTab.rawHtml) }}\r\n                />\r\n                \r\n                {state.selectedTab.isMermaidDiagram && (\r\n\r\n                    <Toolbar variant=\"dense\">\r\n                        <Typography style={{ flex: 1 }} />\r\n\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"default\"\r\n                            disabled={state.inProgress}\r\n                            onClick={() => window.navigator.clipboard.writeText(state.selectedTab.description)}\r\n                        >\r\n                            <FileCopyIcon />\r\n                            <Box width={10} />\r\n                            <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                        </Button>\r\n\r\n                        <Box width={20} />\r\n\r\n                        <SaveAsSvgButton\r\n                            svg={getStyledSvg(state.selectedTab.rawHtml)}\r\n                            fileName={state.orchestrationId}\r\n                            inProgress={state.inProgress}\r\n                            backendClient={state.backendClient}\r\n                        />\r\n\r\n                        <Box width={20} />\r\n                    </Toolbar>\r\n                )}\r\n                \r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n            \r\n            var functionName = el.getAttribute('data-function-name');\r\n            if (!functionName) {\r\n                \r\n                functionName = el.innerHTML;\r\n                const match = />(.+)</.exec(functionName);\r\n                if (!!match) {\r\n                    functionName = match[1];\r\n                }\r\n            }\r\n\r\n            if (!!state.functionNames[functionName]) {\r\n\r\n                const closuredFunctionName = functionName;\r\n                el.onclick = () => state.gotoFunctionCode(closuredFunctionName);\r\n                el.style.cursor = 'pointer';\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Box, Button, LinearProgress, TextField, Toolbar, Typography } from '@material-ui/core';\r\n\r\nimport './FunctionGraph.css';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { FunctionGraphState } from '../states/FunctionGraphState';\r\nimport { CustomTabStyle } from '../theme';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\n\r\n// Function Graph view\r\n@observer\r\nexport class FunctionGraph extends React.Component<{ state: FunctionGraphState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.load();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        // Mounting click handlers to diagram nodes. Built-in mermaid feature for this doesn't work inside vsCode (no idea why)\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('function'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('orchestrator'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('activity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('entity'));\r\n        }\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"details-top-toolbar\">\r\n                    <Box width={20} />\r\n\r\n                    <TextField\r\n                        fullWidth\r\n                        label=\"Function Project Path\"\r\n                        disabled={true}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        type=\"text\"\r\n                        value={state.projectPath}\r\n                    />\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => state.load()}\r\n                    >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {!!state.diagramSvg && (<>\r\n\r\n                <div\r\n                    className=\"diagram-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.diagramSvg) }}\r\n                />\r\n\r\n                <Toolbar variant=\"dense\">\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                    >\r\n                        <FileCopyIcon />\r\n                        <Box width={10} />\r\n                        <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                    </Button>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <SaveAsSvgButton\r\n                        svg={getStyledSvg(state.diagramSvg)}\r\n                        fileName=\"functions.svg\"\r\n                        inProgress={state.inProgress}\r\n                        backendClient={state.backendClient}\r\n                    />\r\n\r\n                </Toolbar>\r\n\r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n\r\n            const match = /flowchart-(.+)-/.exec(el.id);\r\n            if (!!match) {\r\n\r\n                const closuredFunctionName = match[1];\r\n                el.onclick = () => state.gotoFunctionCode(closuredFunctionName);\r\n           }\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\nimport { DfmContextType } from '../DfmContext';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        const timeZone = !this.context.showTimeAsLocal ? 'UTC' : 'Local';\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                        To clean up deleted Entities use the 'Clean Entity Storage' command instead. \r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-from-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? `Last Updated From (${timeZone})` : `From (${timeZone})`}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={this.context.getMoment(state.timeFrom)}\r\n                                onChange={(t) => state.timeFrom = this.context.setMoment(t)}\r\n                            />\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? `Last Updated Till (${timeZone})` : `Till (${timeZone})`}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={this.context.getMoment(state.timeTill)}\r\n                                onChange={(t) => state.timeTill = this.context.setMoment(t)}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === 'Orchestration' && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === 'DurableEntity' && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, LinearProgress, \r\n} from '@material-ui/core';\r\n\r\nimport './CleanEntityStorageDialog.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { CleanEntityStorageDialogState } from '../states/CleanEntityStorageDialogState';\r\n\r\n// Dialog with parameters for cleaning entity storage\r\n@observer\r\nexport class CleanEntityStorageDialog extends React.Component<{ state: CleanEntityStorageDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Clean Entity Storage</DialogTitle>\r\n\r\n                {!state.response && (<>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                        <DialogContentText>\r\n                            An entity is considered empty, and is removed, if it has no state, is not locked, and has been idle for more than EntityMessageReorderWindowInMinutes. Locks are considered orphaned, and are released, if the orchestration that holds them is not in state Running.\r\n                        </DialogContentText>\r\n\r\n                        <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                            <FormGroup row>\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.removeEmptyEntities}\r\n                                    onChange={(evt) => state.removeEmptyEntities = evt.target.checked} />}\r\n                                    label=\"Remove Empty Entities\"\r\n                                />\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.releaseOrphanedLocks}\r\n                                    onChange={(evt) => state.releaseOrphanedLocks = evt.target.checked} />}\r\n                                    label=\"Release Orphaned Locks\"\r\n                                />\r\n                                \r\n                            </FormGroup>\r\n                        </FormControl>\r\n\r\n                        <ErrorMessage state={state} />\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => state.clean()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                            Clean\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n                {!!state.response && (<>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfEmptyEntitiesRemoved} empty entities removed. \r\n                        </DialogContentText>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfOrphanedLocksRemoved} orphaned locks removed.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { FunctionGraph } from './FunctionGraph';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\nimport { CleanEntityStorageDialog } from './CleanEntityStorageDialog';\r\n\r\nimport { DfmContextType, dfmContextInstance } from '../DfmContext';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><DfmContextType.Provider value={dfmContextInstance}>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} doRefresh={() => state.orchestrationsState.reloadOrchestrations()} />\r\n                            )}\r\n\r\n                            <img src={`${!DfmRoutePrefix ? '' : '/'}${DfmRoutePrefix}/logo.svg`} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                <Link color=\"inherit\" href={state.loginState.rootUri}>\r\n                                    Durable Functions Monitor\r\n                                </Link>\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={state.loginState.locationPathName}>\r\n                                    / {state.loginState.taskHubName}\r\n                                </Link>\r\n\r\n                                {!state.orchestrationDetailsState ?\r\n                                    (\r\n                                        <Autocomplete\r\n                                            className=\"instance-id-input\"\r\n                                            freeSolo\r\n                                            options={state.isExactMatch ? [] : state.suggestions}\r\n                                            value={state.typedInstanceId}\r\n                                            onChange={(evt, newValue) => {\r\n                                                state.typedInstanceId = newValue ?? '';\r\n                                                if (!!newValue) {\r\n                                                    state.goto();\r\n                                                }\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    className={state.isExactMatch ? 'instance-id-valid' : null}\r\n                                                    size=\"small\"\r\n                                                    label=\"instanceId to go to...\"\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(evt) => state.typedInstanceId = evt.target.value as string}\r\n                                                    onKeyPress={(evt) => this.handleKeyPress(evt)}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    )\r\n                                    :\r\n                                    (<Typography color=\"inherit\">\r\n                                        <Link color=\"inherit\" href={window.location.pathname}>\r\n                                            {state.orchestrationDetailsState.orchestrationId}\r\n                                        </Link>\r\n                                    </Typography>)\r\n                                }\r\n\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                {!!state.functionGraphState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <FunctionGraph state={state.functionGraphState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n                <CleanEntityStorageDialog state={state.cleanEntityStorageDialogState} />\r\n\r\n            </DfmContextType.Provider></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.goto();\r\n        }\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _purgeHistoryDialogState: PurgeHistoryDialogState,\r\n        private _cleanEntityStorageDialogState: CleanEntityStorageDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    showCleanEntityStorageDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this._cleanEntityStorageDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n\r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { computed } from 'mobx';\r\n\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// Base class for all mermaid diagram tab states\r\nexport abstract class MermaidDiagramTabState extends MermaidDiagramStateBase implements ICustomTabState {\r\n\r\n    readonly name: string = \"Diagram\";\r\n    readonly isMermaidDiagram: boolean = true;\r\n\r\n    @computed\r\n    get description(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; };\r\n\r\n    constructor(protected _loadHistory: (orchestrationId: string) => Promise<HistoryEvent[]>) {\r\n        super();\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n        \r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return this._loadHistory(details.instanceId).then(history => {\r\n\r\n            if (!history.length || cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            return this.buildDiagram(details, history, cancelToken);\r\n        });\r\n    }\r\n\r\n    protected abstract buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void>;\r\n}","import mermaid from 'mermaid';\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { dfmContextInstance } from '../DfmContext';\r\n\r\n// State of Sequence Diagram tab on OrchestrationDetails view\r\nexport class SequenceDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Sequence Diagram\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken) : Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.getSequenceForOrchestration(details.name, '.', history)).then(sequenceLines => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'sequenceDiagram \\n' + sequenceLines.join('');\r\n\r\n                try {\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private getSequenceForOrchestration(orchestrationName: string, parentOrchestrationName: string, historyEvents: HistoryEvent[]): Promise<string>[] {\r\n\r\n        const externalActor = '.'\r\n        const results: Promise<string>[] = [];\r\n        var nextLine: string;\r\n\r\n        var i = 0;\r\n        while (i < historyEvents.length) {\r\n            const event = historyEvents[i];\r\n\r\n            switch (event.EventType) {\r\n                case 'ExecutionStarted':\r\n\r\n                    nextLine =\r\n                        `${parentOrchestrationName}->>+${orchestrationName}:[ExecutionStarted] \\n` +\r\n                        `Note over ${parentOrchestrationName},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.getSequenceForOrchestration(subOrchestrationName, orchestrationName, history)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`${orchestrationName}-x${subOrchestrationName}:[FailedToLoad] \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    nextLine = `rect rgba(255,0,0,0.4) \\n` +\r\n                        `${orchestrationName}-x${event.FunctionName}:[SubOrchestrationInstanceFailed] \\n` +\r\n                        'end \\n';\r\n\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    // Trying to aggregate multiple parallel calls\r\n                    var maxDurationInMs = event.DurationInMs;\r\n                    var j = i + 1;\r\n                    for (; j < historyEvents.length &&\r\n                        historyEvents[j].EventType === 'TaskCompleted' &&\r\n                        historyEvents[j].FunctionName === event.FunctionName &&\r\n                        historyEvents[j].ScheduledTime.substr(0, 23) === event.ScheduledTime.substr(0, 23);\r\n                        j++) {\r\n\r\n                        if (maxDurationInMs < historyEvents[j].DurationInMs) {\r\n                            maxDurationInMs = historyEvents[j].DurationInMs;\r\n                        }\r\n                    }\r\n\r\n                    if (j === i + 1) {\r\n\r\n                        const nextLine =\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n                        \r\n                    } else {\r\n\r\n                        const nextLine =\r\n                            `par ${j - i} calls \\n` +\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(maxDurationInMs)} \\n` +\r\n                            `end \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n\r\n                        i = j - 1;\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `rect rgba(255,0,0,0.4) \\n` +\r\n                        `${orchestrationName}-x${orchestrationName}:${event.FunctionName} \\n` + \r\n                        'end \\n';\r\n                    \r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'EventRaised':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:${event.Name} \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TimerFired':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[TimerFired] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionTerminated':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[ExecutionTerminated] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionCompleted':\r\n\r\n                    nextLine =\r\n                        `${orchestrationName}-->>-${parentOrchestrationName}:[ExecutionCompleted] \\n` +\r\n                        `Note over ${orchestrationName},${parentOrchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatTimestamp(timestamp: string): string {\r\n\r\n        if (timestamp.length <= 11) {\r\n            return timestamp;\r\n        }\r\n\r\n        if (!!dfmContextInstance.showTimeAsLocal) {\r\n            return moment(timestamp).format('(HH:mm:ss.SSS)')\r\n        }\r\n\r\n        return '(' + timestamp.substr(11, 12) + 'Z)';\r\n    }\r\n}","import mermaid from 'mermaid';\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { dfmContextInstance } from '../DfmContext';\r\n\r\ntype LineTextAndMetadata = { nextLine: string, functionName?: string, instanceId?: string, parentInstanceId?: string, duration?: number, widthPercentage?: number };\r\n\r\n// State of Gantt Diagram tab on OrchestrationDetails view\r\nexport class GanttDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Gantt Chart\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.renderOrchestration(details.instanceId, details.name, history, true)).then(arrayOfArrays => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                const lines = arrayOfArrays.flat();\r\n                const linesWithMetadata = lines.filter(l => !!l.functionName);\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title ${details.name}(${details.instanceId}) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss.SSS \\n' +\r\n                    lines.map(item => item.nextLine).join('');\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n\r\n                        svg = this.injectFunctionNameAttributes(svg, linesWithMetadata);\r\n                        svg = this.adjustIntervalsSmallerThanOneSecond(svg, linesWithMetadata);\r\n\r\n                        this._diagramSvg = svg;\r\n\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Adds data-function-name attributes to diagram lines, so that Function names can be further used by rendering\r\n    private injectFunctionNameAttributes(svg: string, linesWithMetadata: LineTextAndMetadata[]): string {\r\n        \r\n        return svg.replace(new RegExp(`<(rect|text) id=\"task([0-9]+)(-text)?\"`, 'gi'), (match, tagName, taskIndex) => {\r\n\r\n            const oneBasedLineIndex = parseInt(taskIndex);\r\n\r\n            if (oneBasedLineIndex <= 0 || oneBasedLineIndex > linesWithMetadata.length) {\r\n                return match;\r\n            }\r\n\r\n            const lineMetadata = linesWithMetadata[oneBasedLineIndex - 1];\r\n            if (!lineMetadata.functionName) {\r\n                return match;\r\n            }\r\n\r\n            return match + ` data-function-name=\"${lineMetadata.functionName}\"`;\r\n        });\r\n    }\r\n\r\n    // Workaround for mermaid being unable to render intervals shorter than 1 second\r\n    private adjustIntervalsSmallerThanOneSecond(svg: string, linesWithMetadata: LineTextAndMetadata[]): string {\r\n\r\n        return svg.replace(new RegExp(`<rect id=\"task([0-9]+)\" [^>]+ width=\"([0-9]+)\"`, 'gi'), (match, taskIndex, activityWidth) => {\r\n\r\n            const oneBasedLineIndex = parseInt(taskIndex);\r\n\r\n            if (oneBasedLineIndex <= 0 || oneBasedLineIndex > linesWithMetadata.length) {\r\n                return match;\r\n            }\r\n\r\n            const activityMetadata = linesWithMetadata[oneBasedLineIndex - 1];\r\n            if (!activityMetadata.parentInstanceId || !activityMetadata.widthPercentage || (activityMetadata.duration > 10000)) {\r\n                return match;\r\n            }\r\n\r\n            // now we need to figure out the width (in pixels) of parent orchestration line\r\n            const orchIndex = linesWithMetadata.findIndex(l => l.instanceId === activityMetadata.parentInstanceId);\r\n            if (orchIndex < 0) {\r\n                return match;\r\n            }\r\n\r\n            const orchMatch = new RegExp(`<rect id=\"task${orchIndex + 1}\" [^>]+ width=\"([0-9]+)\"`, 'i').exec(svg);\r\n            if (!orchMatch) {\r\n                return match;\r\n            }\r\n\r\n            const orchWidth = parseInt(orchMatch[1]);\r\n            const newActivityWidth = activityMetadata.widthPercentage > 1 ? orchWidth : Math.ceil(orchWidth * activityMetadata.widthPercentage);\r\n\r\n            return match.replace(`width=\"${activityWidth}\"`, `width=\"${newActivityWidth.toFixed(0)}\"`)\r\n        });\r\n    }\r\n\r\n    private renderOrchestration(orchestrationId: string, orchestrationName: string, historyEvents: HistoryEvent[], isParentOrchestration: boolean):\r\n        Promise<LineTextAndMetadata[]>[] {\r\n\r\n        const results: Promise<LineTextAndMetadata[]>[] = [];\r\n\r\n        const startedEvent = historyEvents.find(event => event.EventType === 'ExecutionStarted');\r\n        const completedEvent = historyEvents.find(event => event.EventType === 'ExecutionCompleted');\r\n\r\n        var needToAddAxisFormat = isParentOrchestration;\r\n        var nextLine: string;\r\n        var orchDuration = 0;\r\n\r\n        if (!!startedEvent && !!completedEvent) {\r\n\r\n            if (needToAddAxisFormat) {\r\n\r\n                const longerThanADay = completedEvent.DurationInMs > 86400000;\r\n                nextLine = longerThanADay ? 'axisFormat %Y-%m-%d %H:%M \\n' : 'axisFormat %H:%M:%S \\n';\r\n                results.push(Promise.resolve([{ nextLine }]));\r\n                needToAddAxisFormat = false;\r\n            }\r\n            \r\n            nextLine = isParentOrchestration ? '' : `section ${orchestrationName}(${this.escapeTitle(orchestrationId)}) \\n`;\r\n\r\n            var lineName = this.formatDuration(completedEvent.DurationInMs);\r\n            if (!lineName) {\r\n                lineName = orchestrationName;\r\n            }\r\n\r\n            nextLine += `${lineName}: ${isParentOrchestration ? '' : 'active,'} ${this.formatDateTime(startedEvent.Timestamp)}, ${this.formatDurationInSeconds(completedEvent.DurationInMs)} \\n`;\r\n            results.push(Promise.resolve([{ nextLine, functionName: orchestrationName, instanceId: orchestrationId }]));\r\n            \r\n            orchDuration = completedEvent.DurationInMs;\r\n        }\r\n\r\n        if (needToAddAxisFormat) {\r\n\r\n            nextLine = 'axisFormat %H:%M:%S \\n';\r\n            results.push(Promise.resolve([{ nextLine }]));\r\n        }\r\n\r\n        for (var event of historyEvents) {\r\n\r\n            var eventTimestamp = event.ScheduledTime;\r\n\r\n            // Sometimes activity timestamp might appear to be earlier than orchestration start (due to machine time difference, I assume),\r\n            // and that breaks the diagram\r\n            if (!!startedEvent && (Date.parse(eventTimestamp) < Date.parse(startedEvent.Timestamp))) {\r\n                eventTimestamp = startedEvent.Timestamp;\r\n            }\r\n        \r\n            switch (event.EventType) {\r\n                case 'SubOrchestrationInstanceCompleted':\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n                        \r\n                        results.push(new Promise<LineTextAndMetadata[]>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.renderOrchestration(subOrchestrationId, subOrchestrationName, history, false)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.flat());\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve([{ nextLine: `%% Failed to load ${subOrchestrationName}. ${err.message} \\n` }]);\r\n                            });\r\n                        }));\r\n\r\n                        nextLine = `section ${orchestrationName}(${this.escapeTitle(orchestrationId)}) \\n`;\r\n                        results.push(Promise.resolve([{ nextLine }]));\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: done, ${this.formatDateTime(eventTimestamp)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve([{\r\n                        nextLine,\r\n                        functionName: event.FunctionName,\r\n                        parentInstanceId: orchestrationId,\r\n                        duration: event.DurationInMs,\r\n                        widthPercentage: orchDuration ? event.DurationInMs / orchDuration : 0\r\n                    }]));\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: crit, ${this.formatDateTime(eventTimestamp)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve([{\r\n                        nextLine,\r\n                        functionName: event.FunctionName,\r\n                        parentInstanceId: orchestrationId,\r\n                        duration: event.DurationInMs,\r\n                        widthPercentage: orchDuration ? event.DurationInMs / orchDuration : 0\r\n                    }]));\r\n\r\n                    break;\r\n                    case 'TimerFired':\r\n\r\n                        nextLine = `[TimerFired]: done, ${this.formatDateTime(event.Timestamp)}, 1s \\n`;\r\n                        results.push(Promise.resolve([{\r\n                            nextLine,\r\n                            functionName: orchestrationName,\r\n                            parentInstanceId: orchestrationId,\r\n                            duration: 1,\r\n                            widthPercentage: 0.0001\r\n                        }]));\r\n    \r\n                        break;\r\n                }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatDateTime(utcDateTimeString: string): string {\r\n\r\n        if (!dfmContextInstance.showTimeAsLocal) {\r\n            return utcDateTimeString.substr(0, 23);\r\n        }\r\n\r\n        return moment(utcDateTimeString).format('YYYY-MM-DDTHH:mm:ss.SSS')\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of a custom liquid markup tab on OrchestrationDetails view\r\nexport class LiquidMarkupTabState implements ICustomTabState {\r\n\r\n    name: string = \"\";\r\n    readonly description: string = \"\";\r\n    readonly isMermaidDiagram: boolean = false;\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._rawHtml; };\r\n\r\n    constructor(private _orchestrationId: string, private _backendClient: IBackendClient) {\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/custom-tab-markup('${this.name}')`;\r\n        return this._backendClient.call('POST', uri).then(response => {\r\n\r\n            if (!cancelToken.isCancelled) {\r\n               \r\n                this._rawHtml = response;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _rawHtml: string;\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { SequenceDiagramTabState } from './SequenceDiagramTabState';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { GanttDiagramTabState } from './GanttDiagramTabState';\r\nimport { LiquidMarkupTabState } from './LiquidMarkupTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get tabIndex(): number { return this._tabIndex; }\r\n    set tabIndex(val: number) {\r\n\r\n        if (this._tabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._tabIndex = val;\r\n        this._localStorage.setItem('tabIndex', val.toString());\r\n\r\n        if (!!this.selectedTab) {\r\n\r\n            this.loadCustomTab();\r\n\r\n        } else if (!this._history.length) {\r\n\r\n            this.loadHistory();\r\n        }\r\n    }\r\n\r\n    get selectedTab(): ICustomTabState {\r\n        return !this._tabIndex ? null : this._tabStates[this._tabIndex - 1];\r\n    }\r\n\r\n    @computed\r\n    get details(): DurableOrchestrationStatus { return this._details; }\r\n\r\n    @computed\r\n    get history(): HistoryEvent[] { return this._history; }\r\n\r\n    @computed\r\n    get historyTotalCount(): number { return this._historyTotalCount; }\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get loadInProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress || this.loadInProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        this.newCustomStatus = !!this._details.customStatus ? JSON.stringify(this._details.customStatus) : '';\r\n    }\r\n\r\n    @computed\r\n    get restartDialogOpen(): boolean { return this._restartDialogOpen; }\r\n    set restartDialogOpen(val: boolean) {\r\n        this._restartDialogOpen = val;\r\n        this.restartWithNewInstanceId = true;\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this._details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this._details.customStatus);\r\n    }\r\n\r\n    @computed\r\n    get functionNames(): { [name: string]: any } { return this._functionNames; };\r\n\r\n    @computed\r\n    get functionGraphAvailable(): boolean {\r\n\r\n        const functionName = DurableOrchestrationStatus.getFunctionName(this._details);\r\n        if (!functionName) {\r\n            return false;\r\n        }\r\n\r\n        // Entities have their names lowered, so we need to do a case-insensitive match\r\n        const functionNames = Object.keys(this._functionNames).map(fn => fn.toLowerCase());\r\n        \r\n        return functionNames.includes(functionName.toLowerCase());\r\n    };\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n    @observable\r\n    restartWithNewInstanceId: boolean = true;\r\n\r\n    @observable\r\n    longJsonDialogState = {};\r\n\r\n    @computed\r\n    get tabStates(): ICustomTabState[] { return this._tabStates; }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _orchestrationId: string,\r\n        projectPath: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const tabIndexString = this._localStorage.getItem('tabIndex');\r\n        if (!!tabIndexString) {\r\n            this._tabIndex = Number(tabIndexString);\r\n        }\r\n\r\n        // If we're inside VsCode and the currently opened project is a Functions project\r\n        if (!!projectPath) {\r\n\r\n            // trying to parse the project and get function names out of it\r\n            this._backendClient.call('TraverseFunctionProject', projectPath).then(response => {\r\n\r\n                this._functionNames = response.functions;\r\n\r\n            }, err => {\r\n                console.log(`Failed to traverse: ${err.message}.${(!!err.response ? err.response.data : '')} `);\r\n            });\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this._history = [];\r\n            this._details = new DurableOrchestrationStatus();\r\n            this._tabStates = [];\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    restart() {\r\n        this.restartDialogOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/restart`;\r\n        const requestBody = { restartWithNewInstanceId: this.restartWithNewInstanceId };\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to restart: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse event data: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse custom status: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to set custom status: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) { // We might end up here, if next timer occurs while a custom tab is still loading\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n            return;\r\n        }\r\n\r\n        this._inProgress = true;\r\n        this._noMorePagesToLoad = false;\r\n\r\n        if (!this._autoRefresh && (!this.selectedTab)) {\r\n            \r\n            this._history = [];\r\n            this._historyTotalCount = 0;\r\n        }\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n        \r\n            this._details = response;\r\n\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n\r\n            var tabStateIndex = 0;\r\n\r\n            // Loading sequence diagram tab\r\n            if (this._details.entityType === \"Orchestration\") {\r\n               \r\n                if (this._tabStates.length <= tabStateIndex) {\r\n                    this._tabStates.push(new SequenceDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                    this._tabStates.push(new GanttDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                }\r\n                tabStateIndex += 2;\r\n            }\r\n\r\n            // Loading custom tabs\r\n            if (!!this._details.tabTemplateNames) {\r\n                for (var templateName of this._details.tabTemplateNames) {\r\n\r\n                    if (this._tabStates.length <= tabStateIndex) {\r\n                        this._tabStates.push(new LiquidMarkupTabState(this._orchestrationId, this._backendClient));\r\n                    }\r\n                    this._tabStates[tabStateIndex].name = templateName;\r\n                    tabStateIndex++;\r\n                }                \r\n            }\r\n\r\n            // Ensuring tab index does not go out of sync\r\n            if (this._tabIndex < 0 || this._tabIndex > this._tabStates.length) {\r\n                this._tabIndex = 0;\r\n            }\r\n\r\n            this._inProgress = false;\r\n\r\n            if (!this.selectedTab) {\r\n                \r\n                this.loadHistory(!!this._autoRefresh);\r\n\r\n            } else {\r\n\r\n                this.loadCustomTab();\r\n            }\r\n            \r\n        }, err => {\r\n            this._inProgress = false;\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadHistory(isAutoRefresh: boolean = false): void {\r\n\r\n        if (!!this.inProgress || !!this.selectedTab || !!this._noMorePagesToLoad) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._history.length;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/history?$top=${this._pageSize}&$skip=${skip}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            this._historyTotalCount = response.totalCount;\r\n\r\n            if (isAutoRefresh) {\r\n                this._history = response.history;\r\n            } else {\r\n                this._history.push(...response.history);\r\n\r\n                if (response.history.length < this._pageSize) {\r\n\r\n                    // Stop the infinite scrolling\r\n                    this._noMorePagesToLoad = true;\r\n                }\r\n            }\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Failed to load history: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    gotoFunctionCode(functionName: string): void {\r\n\r\n        this.backendClient.call('GotoFunctionCode', functionName).then(() => {}, err => {\r\n            console.log(`Failed to goto function code: ${err.message}`);\r\n        });\r\n    }\r\n\r\n    showFunctionsGraph(): void {\r\n\r\n        this.backendClient.call('VisualizeFunctionsAsAGraph', '').then(() => {}, err => {\r\n            console.log(`Failed to goto functions graph: ${err.message}`);\r\n        });\r\n    }\r\n\r\n    private loadCustomTab(): void {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        this.selectedTab.load(this._details, cancelToken).then(() => {}, err => { \r\n                \r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Failed to load tab: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    private setAutoRefresh(): void {\r\n\r\n        if (!this._autoRefresh) {\r\n            return;\r\n        }\r\n\r\n        if (!!this._autoRefreshToken) {\r\n            clearTimeout(this._autoRefreshToken);\r\n        }\r\n        this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n    }\r\n\r\n    private loadAllHistory(orchestrationId: string): Promise<HistoryEvent[]> {\r\n\r\n        const uri = `/orchestrations('${orchestrationId}')/history`;\r\n        return this._backendClient.call('GET', uri).then(response => response.history);\r\n    }\r\n\r\n    @observable\r\n    private _tabStates: ICustomTabState[] = [];\r\n\r\n    @observable\r\n    private _details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n    @observable\r\n    private _history: HistoryEvent[] = [];\r\n    @observable\r\n    private _tabIndex: number = 0;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n    @observable\r\n    private _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _restartDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _historyTotalCount: number = 0;\r\n    @observable\r\n    private _functionNames: { [name: string]: any } = {};\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 200;\r\n}","import { FunctionsMap } from './FunctionsMap';\r\n\r\nconst space = '#32;';\r\n\r\nfunction getTriggerBindingText(binding: any): string {\r\n\r\n    switch (binding.type) {\r\n        case 'httpTrigger':\r\n            return `http${!binding.methods ? '' : ':[' + binding.methods.join(',') + ']'}${!binding.route ? '' : ':' + binding.route}`;\r\n        case 'blobTrigger':\r\n            return `blob:${binding.path ?? ''}`;\r\n        case 'cosmosDBTrigger':\r\n            return `cosmosDB:${binding.databaseName ?? ''}:${binding.collectionName ?? ''}`;\r\n        case 'eventHubTrigger':\r\n            return `eventHub:${binding.eventHubName ?? ''}`;\r\n        case 'serviceBusTrigger':\r\n            return `serviceBus:${!binding.queueName ? (binding.topicName ?? '') : binding.queueName}${!binding.subscriptionName ? '' : ':' + binding.subscriptionName}`;\r\n        case 'queueTrigger':\r\n            return `queue:${binding.queueName ?? ''}`;\r\n        case 'timerTrigger':\r\n            return `timer:${binding.schedule ?? ''}`;\r\n        default:\r\n            return binding.type;\r\n    }\r\n}\r\n\r\nfunction getBindingText(binding: any): string {\r\n\r\n    switch (binding.type) {\r\n        case 'table':\r\n            return `table:${binding.tableName ?? ''}`;\r\n        case 'blob':\r\n            return `blob:${binding.path ?? ''}`;\r\n        case 'cosmosDB':\r\n            return `cosmosDB:${binding.databaseName ?? ''}:${binding.collectionName ?? ''}`;\r\n        case 'eventHub':\r\n            return `eventHub:${binding.eventHubName ?? ''}`;\r\n        case 'serviceBus':\r\n            return `serviceBus:${!binding.queueName ? (binding.topicName ?? '') : binding.queueName}${!binding.subscriptionName ? '' : ':' + binding.subscriptionName}`;\r\n        case 'queue':\r\n            return `queue:${binding.queueName ?? ''}`;\r\n        default:\r\n            return binding.type;\r\n    }\r\n}\r\n\r\n// Translates functions and their bindings into a Mermaid Flowchart diagram code\r\nexport function buildFunctionDiagramCode(funcs: FunctionsMap): string {\r\n\r\n    const functions = [];\r\n\r\n    // Determine what kind of function this one is\r\n    for (const name in funcs) {\r\n        const func = funcs[name];\r\n\r\n        var triggerBinding = undefined, inputBindings = [], outputBindings = [], otherBindings = [];\r\n        var nodeCode = `${name}{{\"${space}${name}\"}}:::function`;\r\n\r\n        for (const binding of func.bindings) {\r\n\r\n            if (binding.type === 'orchestrationTrigger') {\r\n                nodeCode = `${name}[[\"${space}${name}\"]]:::orchestrator`;\r\n            } else if (binding.type === 'activityTrigger') {\r\n                nodeCode = `${name}[/\"${space}${name}\"/]:::activity`;\r\n            } else if (binding.type === 'entityTrigger') {\r\n                nodeCode = `${name}[(\"${space}${name}\")]:::entity`;\r\n            }\r\n\r\n            if (binding.type.endsWith('Trigger')) {\r\n                triggerBinding = binding;\r\n            } else if (binding.direction === 'in') {\r\n                inputBindings.push(binding);\r\n            } else if (binding.direction === 'out') {\r\n                outputBindings.push(binding);\r\n            } else {\r\n                otherBindings.push(binding);\r\n            }\r\n        }\r\n\r\n        functions.push({ name, nodeCode, triggerBinding, inputBindings, outputBindings, otherBindings, ...func });\r\n    }\r\n\r\n    // Sorting by trigger type, then by name\r\n    functions.sort((f1, f2) => {\r\n\r\n        var s1 = (!!f1.isCalledBy?.length || !f1.triggerBinding || !f1.triggerBinding.type) ? '' : f1.triggerBinding.type;\r\n        s1 += '~' + f1.name;\r\n\r\n        var s2 = (!!f2.isCalledBy?.length || !f2.triggerBinding || !f2.triggerBinding.type) ? '' : f2.triggerBinding.type;\r\n        s2 += '~' + f2.name;\r\n\r\n        return (s1 > s2) ? 1 : ((s2 > s1) ? -1 : 0);\r\n    });\r\n\r\n    // Rendering\r\n    var code = '';\r\n    for (const func of functions) {\r\n\r\n        code += `${func.nodeCode}\\n`;\r\n\r\n        if (!!func.isCalledBy?.length) {\r\n\r\n            for (const calledBy of func.isCalledBy) {\r\n                code += `${calledBy} --> ${func.name}\\n`;\r\n            }\r\n\r\n        } else if (!!func.triggerBinding) {\r\n\r\n            code += `${func.name}.${func.triggerBinding.type}>\"${space}${getTriggerBindingText(func.triggerBinding)}\"]:::${func.triggerBinding.type} --> ${func.name}\\n`;\r\n        }\r\n\r\n        for (const inputBinding of func.inputBindings) {\r\n            code += `${func.name}.${inputBinding.type}([\"${space}${getBindingText(inputBinding)}\"]):::${inputBinding.type} -.-> ${func.name}\\n`;\r\n        }\r\n\r\n        for (const outputBinding of func.outputBindings) {\r\n            code += `${func.name} -.-> ${func.name}.${outputBinding.type}([\"${space}${getBindingText(outputBinding)}\"]):::${outputBinding.type}\\n`;\r\n        }\r\n\r\n        for (const otherBinding of func.otherBindings) {\r\n            code += `${func.name} -.- ${func.name}.${otherBinding.type}([\"${space}${getBindingText(otherBinding)}\"]):::${otherBinding.type}\\n`;\r\n        }\r\n\r\n        if (!!func.isSignalledBy?.length) {\r\n\r\n            for (const signalledBy of func.isSignalledBy) {\r\n                code += `${signalledBy.name} -. \"#9889; ${signalledBy.signalName}\" .-> ${func.name}\\n`;\r\n            }\r\n        }\r\n\r\n        if (!!func.isCalledByItself) {\r\n\r\n            code += `${func.name} -- \"[ContinueAsNew]\" --> ${func.name}\\n`;\r\n        }\r\n    }\r\n\r\n    return code;\r\n}","import { observable, computed } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\nimport { buildFunctionDiagramCode } from './az-func-as-a-graph/buildFunctionDiagramCode';\r\n\r\n// State of FunctionGraph view\r\nexport class FunctionGraphState extends MermaidDiagramStateBase {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get diagramSvg(): string { return this._diagramSvg; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    get projectPath(): string { return this._projectPath; };\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _projectPath: string,\r\n        private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    gotoFunctionCode(functionName: string): void {\r\n\r\n        this.backendClient.call('GotoFunctionCode', functionName).then(() => { }, err => {\r\n            console.log(`Failed to goto function code: ${err.message}`);\r\n        });\r\n    }\r\n\r\n    load() {\r\n\r\n        if (this._inProgress) {\r\n            return;\r\n        }\r\n\r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        this._inProgress = true;\r\n        this.errorMessage = '';\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n\r\n        this._backendClient.call('TraverseFunctionProject', this._projectPath).then(response => {\r\n\r\n            try {\r\n                const diagramCode = buildFunctionDiagramCode(response.functions);\r\n\r\n                if (!diagramCode) {\r\n                    this._inProgress = false;\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = `graph LR\\n${diagramCode}`;\r\n\r\n                // Also making nodes look like they're clickable\r\n                const clickCode = Object.keys(response.functions)\r\n                    .filter(name => !!response.functions[name].filePath)\r\n                    .map(name => `click ${name} null\\n`).join('');\r\n\r\n                mermaid.render('mermaidSvgId', this._diagramCode + clickCode, (svg) => {\r\n\r\n                    this._diagramSvg = this.applyIcons(svg, response.iconsSvg);\r\n\r\n                    this._inProgress = false;\r\n                });\r\n\r\n            } catch (err) {\r\n                this.errorMessage = `Failed to render: ${err.message}`;\r\n                this._inProgress = false;\r\n            }\r\n\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to traverse: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    private applyIcons(svg: string, iconsSvg: string): string {\r\n\r\n        // Placing icons code into a <defs> block at the top\r\n        svg = svg.replace(`><style>`, `>\\n<defs>\\n${iconsSvg}</defs>\\n<style>`);\r\n\r\n        // Adding <use> blocks referencing relevant icons\r\n        svg = svg.replace(/<g class=\"node (\\w+).*?<g class=\"label\" transform=\"translate\\([0-9,.-]+\\)\"><g transform=\"translate\\([0-9,.-]+\\)\">/g,\r\n            `$&<use href=\"#az-icon-$1\" width=\"20px\" height=\"20px\"/>`);\r\n\r\n        return svg;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { observable, computed } from 'mobx'\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Clean Entity Storage Dialog\r\nexport class CleanEntityStorageDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(isOpen: boolean) {\r\n        this._dialogOpen = isOpen;\r\n\r\n        if (isOpen) {\r\n            this._response = null;\r\n            this.removeEmptyEntities = true;\r\n            this.releaseOrphanedLocks = true;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get response(): CleanEntityStorageResponse | null { return this._response; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return true;\r\n    };\r\n\r\n    @observable\r\n    removeEmptyEntities: boolean;\r\n    @observable\r\n    releaseOrphanedLocks: boolean;\r\n    \r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    clean() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/clean-entity-storage', {\r\n            removeEmptyEntities: this.removeEmptyEntities,\r\n            releaseOrphanedLocks: this.releaseOrphanedLocks\r\n        }).then(response => {\r\n            this._response = response;\r\n        }, err => {\r\n            this.errorMessage = `Clean Entity Storage failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _response: CleanEntityStorageResponse | null = null;\r\n}\r\n\r\nexport class CleanEntityStorageResponse\r\n{\r\n    numberOfEmptyEntitiesRemoved: number;\r\n    numberOfOrphanedLocksRemoved: number;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { QueryString } from './QueryString';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n\r\n        // Also placing into query string\r\n        const queryString = new QueryString();\r\n        queryString.values[fieldName] = value;\r\n        queryString.apply();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        // Also placing into query string\r\n        const queryString = new QueryString();\r\n\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n\r\n                delete queryString.values[item.fieldName];\r\n\r\n            } else {\r\n\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n\r\n                queryString.values[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        queryString.apply();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        // Query string should take precedence\r\n        const queryString = new QueryString();\r\n        if (!!queryString.values[fieldName]) {\r\n            return queryString.values[fieldName];\r\n        }\r\n\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n\r\n        // Also dropping from query string\r\n        const queryString = new QueryString();\r\n        delete queryString.values[fieldName];\r\n        queryString.apply();\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return null; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setCustomHandlers(purgeHistoryHandler: () => void, cleanEntityStorageHandler: () => void) {\r\n\r\n        this._handlers['purgeHistory'] = purgeHistoryHandler;\r\n        this._handlers['cleanEntityStorage'] = cleanEntityStorageHandler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const StateFromVsCode: {};\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n        this._state = StateFromVsCode[this._prefix];\r\n        if (!this._state) {\r\n            this._state = {};\r\n        }\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        this._state[fieldName] = value\r\n        this.save();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete this._state[item.fieldName];\r\n            } else {\r\n                this._state[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        this.save();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        return this._state[fieldName];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete this._state[fieldName];\r\n        this.save();\r\n    }\r\n\r\n    private readonly _state: any;\r\n\r\n    private save(): void {\r\n        this._vsCodeApi.postMessage({ method: 'PersistState', key: this._prefix, data: this._state });\r\n    }\r\n}\r\n","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { BackendClient } from '../services/BackendClient';\r\nimport { LoginState, OrchestrationsPathPrefix } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { ResultsListTabState } from './ResultsListTabState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { FunctionGraphState } from './FunctionGraphState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// Global variables declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\ndeclare const DfmFunctionProjectPath: string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    functionGraphState?: FunctionGraphState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n    cleanEntityStorageDialogState: CleanEntityStorageDialogState;\r\n\r\n    @computed\r\n    get typedInstanceId(): string {\r\n        return this._typedInstanceId;\r\n    }\r\n    set typedInstanceId(s: string) {\r\n        this._typedInstanceId = s;\r\n        this.reloadSuggestions();\r\n    }\r\n\r\n    @computed\r\n    get suggestions(): string[] {\r\n        return this._suggestions;\r\n    }\r\n\r\n    @computed\r\n    get isExactMatch(): boolean {\r\n        return this._suggestions.length === 1 && this._suggestions[0] === this._typedInstanceId;\r\n    }\r\n    \r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.instanceId) {\r\n\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.instanceId,\r\n                    this.functionProjectPath,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n                \r\n            } else if (!!this.functionProjectPath) {\r\n\r\n                this.functionGraphState = new FunctionGraphState(this.functionProjectPath, backendClient);\r\n\r\n            } else {\r\n\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState & ResultsListTabState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setCustomHandlers(\r\n                    () => this.purgeHistoryDialogState.dialogOpen = true,\r\n                    () => this.cleanEntityStorageDialogState.dialogOpen = true\r\n                );\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(() => this.loginState.taskHubName, () => this.loginState.getAuthorizationHeaderAsync());\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.instanceId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.instanceId,\r\n                    null,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState, this.cleanEntityStorageDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Opens the entered orchestrationId in a new tab\r\n    goto() {\r\n        window.open(`${this._backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this._typedInstanceId}`);\r\n        this._typedInstanceId = '';\r\n        this._suggestions = [];\r\n    }\r\n\r\n    @observable\r\n    private _suggestions: string[] = [];\r\n    @observable\r\n    private _typedInstanceId: string = '';\r\n\r\n    private readonly _backendClient: IBackendClient;\r\n\r\n    // Extracts functionProjectPath from URL or from VsCode\r\n    private get functionProjectPath(): string {\r\n\r\n        if (!!DfmFunctionProjectPath) {\r\n            return DfmFunctionProjectPath;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get instanceId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const pos = window.location.pathname.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos < 0) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(pos + OrchestrationsPathPrefix.length);\r\n    }\r\n\r\n    // Reloads list of suggested instanceIds\r\n    private reloadSuggestions(): void {\r\n\r\n        if (!this._typedInstanceId || this._typedInstanceId.length < 2) {\r\n            this._suggestions = [];\r\n            return;\r\n        }\r\n\r\n        const uri = `/id-suggestions(prefix='${this._typedInstanceId}')`;\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response || !this._typedInstanceId) {\r\n                this._suggestions = [];\r\n            } else {\r\n                this._suggestions = response;\r\n            }\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport './index.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\n\r\nimport { Main } from './components/Main';\r\nimport { MainState } from './states/MainState';\r\nimport { Theme } from './theme';\r\n\r\ndocument.body.style.backgroundColor = Theme.palette.background.paper;\r\n\r\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\r\nconst appState = new MainState();\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={Theme} >\r\n        <Main state={appState} />\r\n    </ThemeProvider>,\r\n    document.getElementById('root') as HTMLElement\r\n);"],"sourceRoot":""}