{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","DfmContext.ts","theme.ts","components/LoginIcon.tsx","components/MainMenu.tsx","states/DurableOrchestrationStatus.ts","components/ErrorMessage.tsx","DateTimeHelpers.ts","states/ErrorMessageState.ts","CancelToken.ts","states/results-view/ResultsListTabState.ts","states/MermaidDiagramStateBase.ts","states/results-view/ResultsGanttDiagramTabState.ts","states/results-view/ResultsHistogramTabState.ts","states/FunctionGraphStateBase.ts","states/az-func-as-a-graph/buildFunctionDiagramCode.ts","states/results-view/ResultsFunctionGraphTabState.ts","states/results-view/OrchestrationsState.ts","states/QueryString.ts","services/BackendClient.ts","states/LoginState.ts","components/OrchestrationLink.tsx","components/dialogs/LongJsonDialog.tsx","components/results-view/OrchestrationsList.tsx","components/results-view/OrchestrationsHistogram.tsx","components/SaveAsSvgButton.tsx","components/results-view/OrchestrationsGanttChart.tsx","components/FunctionGraphBase.tsx","components/FunctionGraphTabBase.tsx","components/results-view/OrchestrationsFunctionGraph.tsx","states/details-view/ICustomTabState.ts","components/results-view/Orchestrations.tsx","components/details-view/DurableEntityButtons.tsx","components/details-view/DurableEntityFields.tsx","components/details-view/OrchestrationButtons.tsx","components/details-view/OrchestrationFields.tsx","states/MainState.ts","components/details-view/OrchestrationDetailsFunctionGraph.tsx","components/details-view/OrchestrationDetails.tsx","components/FunctionGraph.tsx","components/dialogs/PurgeHistoryDialog.tsx","components/dialogs/CleanEntityStorageDialog.tsx","components/dialogs/ConnectionParamsDialog.tsx","components/dialogs/StartNewInstanceDialog.tsx","components/Main.tsx","states/MainMenuState.ts","states/details-view/MermaidDiagramTabState.ts","states/details-view/SequenceDiagramTabState.ts","states/details-view/FunctionGraphTabState.ts","states/details-view/GanttDiagramTabState.ts","states/details-view/LiquidMarkupTabState.ts","states/details-view/OrchestrationDetailsState.ts","states/FunctionGraphState.ts","states/dialogs/PurgeHistoryDialogState.ts","states/dialogs/CleanEntityStorageDialogState.ts","states/dialogs/ConnectionParamsDialogState.ts","states/dialogs/StartNewInstanceDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","DfmContext","DfmClientConfig","showTimeAs","this","_showTimeAsLocal","localStorage","getItem","setTimeZoneName","theme","_timeZoneName","val","setItem","t","isValid","local","utc","moment","toISOString","slice","utcString","length","dotPoint","lastIndexOf","milliseconds","substring","format","timeZoneName","showTimeAsLocal","offset","Date","getTimezoneOffset","Math","floor","abs","toFixed","computed","observable","DfmContextType","React","dfmContextInstance","colorTheme","process","REACT_APP_COLOR_THEME","Theme","createMuiTheme","palette","type","CustomTabStyle","backgroundColor","PrimaryButtonColor","RuntimeStatusToStyle","status","hexToRGBA","error","light","success","warning","background","paper","hex","alpha","parseInt","RuntimeStatusToBadgeStyle","LoginIcon","observer","state","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","fontSize","DialogContentText","allowedTaskHubNames","DialogTitle","List","hubName","ListItem","button","key","Link","href","locationPathName","CircularProgress","MainMenu","context","setWindowTitle","IconButton","RadioGroup","row","value","toString","onChange","target","doRefresh","FormControlLabel","control","Radio","label","showConnectionParamsDialog","showPurgeHistoryDialog","showCleanEntityStorageDialog","showStartNewInstanceDialog","contextType","HistoryEventFields","RuntimeStatuses","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","duration","tabTemplateNames","instance","DurableOrchestrationStatusFields","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","DateTimeHelpers","isAfter","MinMoment","isBefore","MaxMoment","durationInMs","isNaN","days","c","result","hours","minutes","seconds","ErrorMessageState","msg","err","response","data","CancelToken","ResultsListTabState","_backendClient","_localStorage","_refresh","_noMorePagesToLoad","_pageSize","orderByString","_orderBy","orderByDirectionString","_orderByDirection","hiddenColumnsString","_hiddenColumns","split","_orchestrations","push","join","removeItem","filterClause","cancelToken","isAutoRefresh","Promise","setItems","fieldName","skip","orderByClause","orderByDirection","hiddenColumnsClause","uri","call","then","isCancelled","MermaidDiagramStateBase","_mermaidInitialized","mermaid","initialize","startOnLoad","sequence","noteMargin","boxMargin","boxTextMargin","flowchart","curve","useMaxWidth","htmlLabels","replace","formatDuration","ceil","ResultsGanttDiagramTabState","_instances","_diagramSvg","_diagramCode","initMermaidWhenNeeded","reject","instances","renderDiagram","render","svg","oneBasedInstanceIndex","showDetails","prevSectionName","sectionNr","nextLine","sectionName","getFunctionName","escapeTitle","getTime","formatDateTime","formatDurationInSeconds","utcDateTimeString","substr","ResultsHistogramTabState","_filterState","_counts","_originalTimeInterval","_applyingZoom","_timeRangeInMilliseconds","_numOfIntervals","_zoomedIn","_histograms","_numOfInstancesShown","timeFrom","timeTill","timeRange","startTime","valueOf","bucketLength","loadNextBatch","left","right","cancel","from","till","reloadOrchestrations","pageNumber","instanceTypeName","emptyHistogram","i","x0","x","y","instanceStartPos","FunctionGraphStateBase","_traversalResult","functionName","backendClient","isVsCode","console","log","functionOrProxy","startsWith","proxies","functions","filePath","window","iconsSvgElement","document","getElementById","innerHTML","space","getTriggerBindingText","binding","authLevel","methods","route","path","databaseName","collectionName","eventHubName","queueName","topicName","subscriptionName","schedule","getBindingText","tableName","buildFunctionDiagramCode","functionsMap","proxiesMap","settings","doNotRenderFunctions","func","triggerBinding","inputBindings","outputBindings","otherBindings","nodeCode","bindings","endsWith","direction","getFunctionHash","f","hash","isCalledBy","sort","f1","f2","s1","s2","calledBy","inputBinding","outputBinding","otherBinding","isSignalledBy","signalledBy","signalName","isCalledByItself","doNotRenderProxies","proxyNodesColor","nodeTitle","notAddedToCsProjFile","proxy","proxyPurifiedName","warningNotAddedToCsProjFile","matchCondition","nodeName","backendUri","nextNodeName","getRequestOverridesArrowCode","requestOverrides","getResponseOverridesArrowCode","responseOverrides","nodeColor","maxSymbolsInTitle","arrowText","JSON","stringify","FilterOperatorEnum","ResultsTabEnum","TimeRangeEnum","MetricsItem","completed","running","failed","other","ResultsFunctionGraphTabState","_startNewInstance","TotalMetricsName","_selectedFunctionName","_metrics","_renderFunctions","_renderProxies","anchorElement","gotoFunctionCode","clonedMetrics","parse","metrics","funcName","diagramCode","applyIcons","QueryString","_values","pairs","location","search","pair","decodeURIComponent","queryString","encodeURIComponent","history","replaceState","OrchestrationsState","_isFunctionGraphAvailable","momentFrom","_tabStates","_refreshToken","_selectAutoCloseToken","_delayedRefreshDelay","_oldFilterValue","_oldTimeFrom","_oldTimeTill","timeFromString","subtract","_timeFrom","timeTillString","_timeTill","timeRangeString","values","_timeRange","filteredColumnString","_filteredColumn","filterOperatorString","_filterOperator","filterValueString","_filterValue","showStatusesString","_showStatuses","autoRefreshString","_autoRefresh","Number","tabIndexString","tabIndex","_tabIndex","_cancelToken","inProgress","loadOrchestrations","getTimeFrom","Custom","getTimeTill","clearTimeout","setTimeout","isStatusSelectOpen","_isStatusSelectOpen","isValidMoment","reset","s","Equals","StartsWith","Contains","NotEquals","NotStartsWith","NotContains","In","NotIn","toArrayOfStrings","v","selectedTabState","load","showError","finally","LastMinute","Last10Minutes","LastHour","Last24Hours","Last7Days","Last30Days","Last90Days","trim","RoutePrefix","DfmRoutePrefix","BackendUri","BackendClient","_getTaskHubName","_getAuthorizationHeaderAsync","method","url","includes","toLowerCase","headers","match","axios","request","r","routePrefixAndTaskHubName","OrchestrationsPathPrefix","LoginState","_aadApp","defaults","maxRedirects","login","_isLoggedIn","_userName","_taskHubName","_allowedTaskHubNames","pathname","pos","tryGetTaskHubName","origin","get","loginWithEasyAuthConfig","xsrfTokenCookieAndHeaderName","RegExp","exec","cookie","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","idToken","rawIdToken","acquireTokenRedirect","config","interceptors","use","reload","initializeTaskHubNameAndConfirmLogin","Msal","authority","redirectUri","rootUri","handleRedirectCallback","authErr","accountState","errorCode","account","getAccount","loginRedirect","getAuthorizationHeaderAsync","hubNames","pathParts","filter","p","OrchestrationLink","onLinkClicked","orchestrationId","extraSanitizeHrefComponent","LongJsonDialog","fullWidth","maxWidth","jsonString","InputBase","multiline","readOnly","DialogActions","jsonObject","dialogTitle","dialogState","jsonFormattedString","rowsMax","OrchestrationsList","FormHelperText","orchestrations","hiddenColumns","component","variant","unhide","orderBy","resetOrderBy","Paper","elevation","renderTable","longJsonDialogState","visibleColumns","showLastEventColumn","Table","size","TableHead","TableRow","col","onlyOneVisibleColumnLeft","TableCell","onMouseEnter","columnUnderMouse","onMouseLeave","TableSortLabel","active","hideColumn","TableBody","orchestration","rowStyle","cellStyle","verticalAlign","style","formatDateTimeString","renderJson","OrchestrationsHistogram","typeNames","histograms","numOfInstancesShown","zoomedIn","resetZoom","innerWidth","height","innerHeight","xType","stackBy","margin","top","tickTotal","tickFormat","formatTimeTick","timeRangeInMilliseconds","typeName","stroke","getColorCodeForInstanceType","drag","enableY","onDragEnd","area","applyZoom","colors","items","counts","orientation","instanceType","hashCode","charCodeAt","m","second","millisecond","SaveAsSvgButton","disabled","fileName","URL","createObjectURL","Blob","download","getStyledSvg","OrchestrationsGanttChart","svgElement","mountClickEventToFunctionNodes","getElementsByClassName","rawHtml","dangerouslySetInnerHTML","__html","Toolbar","flex","navigator","clipboard","writeText","nodes","el","onclick","goto","cursor","onmouseenter","strokeOpacity","onmouseleave","FunctionGraphBase","forEachFunctionNode","showAsClickable","FunctionGraphTabBase","RunningStyle","CompletedStyle","FailedStyle","OtherStyle","DurationStyle","allMetricsHintNodes","visibility","instanceNodes","nodeTypesToHighlight","nodeType","Array","flat","isHighlightedAttributeName","instanceNode","metricsHintNode","setAttribute","instanceNodeRect","getBoundingClientRect","node","opacity","getAttribute","CustomTabTypeEnum","OrchestrationsFunctionGraph","addEventListener","repositionMetricHints","removeEventListener","mountClickEventToOrchestrationNodes","functionsLoaded","FormGroup","Checkbox","checked","renderFunctions","renderProxies","renderTotalMetric","renderMetrics","diagramSvg","gotoOrchestrationCode","startNewInstance","totalMetric","Chip","metric","showPopupMenu","Orchestrations","scrollingElement","scrollHeight","scrollTop","Histogram","ctrlKey","keyCode","listState","histogramState","ganttChartState","functionGraphState","allStatuses","AppBar","position","LinearProgress","Grid","container","item","xs","TextField","InputProps","InputLabelProps","shrink","timeRangeToString","ampm","autoOk","invalidDateMessage","getMoment","setMoment","onBlur","applyTimeFrom","onAccept","onKeyPress","handleKeyPress","FormControl","timeTillEnabled","applyTimeTill","placeholder","InputLabel","htmlFor","Select","filteredColumn","inputProps","filterOperator","filterValue","applyFilterValue","showStatuses","multiple","newStatuses","onOpen","renderValue","statuses","orchestrationStatuses","ListItemText","primary","autoRefresh","Tabs","ev","Tab","isFunctionGraphAvailable","Gantt","FunctionGraph","event","preventDefault","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","raiseEventDialogOpen","autoFocus","purge","eventName","rows","eventData","raiseEvent","DurableEntityFields","details","runtimeStatusStyle","sm","md","zeroMinWidth","formatJson","OrchestrationButtons","restartDialogOpen","rewindConfirmationOpen","terminateConfirmationOpen","setCustomStatusDialogOpen","rewind","terminate","newCustomStatus","setCustomStatus","isCustomStatusDirty","restartWithNewInstanceId","restart","DfmViewModeEnum","OrchestrationFields","loadHistory","totalItems","historyTotalCount","itemsShown","Name","FunctionName","SubOrchestrationId","functionNames","events","index","Timestamp","EventType","EventId","renderEventLink","ScheduledTime","Result","Details","OrchestrationDetailsFunctionGraph","totalInstances","OrchestrationDetails","loadDetails","loadInProgress","tabStates","tabState","selectedTab","tabType","MermaidDiagram","description","closuredFunctionName","saveAsJson","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","CleanEntityStorageDialog","removeEmptyEntities","releaseOrphanedLocks","clean","numberOfEmptyEntitiesRemoved","numberOfOrphanedLocksRemoved","ConnectionParamsDialog","isReadonly","connectionString","saveConnectionParams","isDirty","StartNewInstanceDialog","orchestratorFunctionName","Main","utils","MomentUtils","Provider","loginState","mainMenuState","orchestrationsState","src","Breadcrumbs","taskHubName","orchestrationDetailsState","Autocomplete","freeSolo","options","isExactMatch","suggestions","typedInstanceId","newValue","renderInput","params","purgeHistoryDialogState","cleanEntityStorageDialogState","startNewInstanceDialogState","connectionParamsDialogState","MainMenuState","_purgeHistoryDialogState","_cleanEntityStorageDialogState","_connectionParamsDialogState","_startNewInstanceDialogState","accountName","version","MermaidDiagramTabState","_loadHistory","buildDiagram","SequenceDiagramTabState","all","getSequenceForOrchestration","sequenceLines","orchestrationName","parentOrchestrationName","isFailed","historyEvents","externalActor","results","maxDurationInMs","j","formatTimestamp","subOrchFailed","subOrchestrationId","subOrchestrationName","DurationInMs","timestamp","FunctionGraphTabState","traversalResult","updateMetricsForInstance","promises","subFuncName","subHistory","GanttDiagramTabState","renderOrchestration","arrayOfArrays","lines","linesWithMetadata","l","injectFunctionNameAttributes","adjustIntervalsSmallerThanOneSecond","tagName","taskIndex","oneBasedLineIndex","lineMetadata","activityWidth","activityMetadata","parentInstanceId","widthPercentage","orchIndex","findIndex","orchMatch","orchWidth","newActivityWidth","isParentOrchestration","startedEvent","find","completedEvent","needToAddAxisFormat","orchDuration","longerThanADay","lineName","formatLineName","eventTimestamp","LiquidMarkupTabState","_orchestrationId","RawHtml","_rawHtml","OrchestrationDetailsState","_autoRefreshToken","loadCustomTab","_history","_details","_historyTotalCount","_inProgress","_raiseEventDialogOpen","_setCustomStatusDialogOpen","_restartDialogOpen","_functionMap","requestBody","functionMapPromise","responses","setAutoRefresh","tabStateIndex","orchId","loadAllHistory","fn","templateName","totalCount","FunctionGraphState","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","has","included","add","delete","CleanEntityStorageDialogState","isOpen","_response","ConnectionParamsDialogState","_oldConnectionString","_oldHubName","_isReadOnly","isReadOnly","alert","StartNewInstanceDialogState","inputObject","TypedLocalStorage","_prefix","apply","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestPromise","requestId","random","postMessage","handlers","VsCodeTypedLocalStorage","_state","StateFromVsCode","save","MainState","vsCodeApi","acquireVsCodeApi","DfmViewMode","IsFunctionGraphAvailable","showWithFunctionName","setCustomHandlers","cleanEntityStorage","_typedInstanceId","reloadSuggestions","_suggestions","OrchestrationIdFromVsCode","body","appState","ReactDOM","ThemeProvider"],"mappings":"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","file":"static/js/main.33b6bbee.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 361,\n\t\"./locale.js\": 361\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 650;","import * as React from 'react';\r\nimport { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\n// Config object passed as a global variable via index.html\r\ndeclare const DfmClientConfig: {\r\n    theme: string,\r\n    showTimeAs: string\r\n};\r\n\r\n// Global observable context object with global settings and other cross-cutting concerns in it\r\nexport class DfmContext {\r\n\r\n    get theme(): string { return DfmClientConfig.theme; }\r\n\r\n    @computed\r\n    get timeZoneName(): string {\r\n        return this._timeZoneName;\r\n    }\r\n\r\n    @computed\r\n    get showTimeAsLocal(): boolean {\r\n        return this._showTimeAsLocal;\r\n    }\r\n    set showTimeAsLocal(val) {\r\n        localStorage?.setItem('showTimeAs', val ? 'Local' : 'UTC');\r\n        this._showTimeAsLocal = val;\r\n        this.setTimeZoneName();\r\n    }\r\n\r\n    constructor() {\r\n        if (DfmClientConfig.showTimeAs !== 'Local') {\r\n            this._showTimeAsLocal = localStorage?.getItem('showTimeAs') === 'Local';\r\n        } else {\r\n            this._showTimeAsLocal = true;\r\n        }\r\n\r\n        this.setTimeZoneName();\r\n    }\r\n\r\n    // Prepares a moment for visualizing with @material-ui/pickers\r\n    public getMoment(t: moment.Moment): moment.Moment {\r\n\r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to call either .utc() or .local() on moment value, to make it _render_ correctly.\r\n        if (!this._showTimeAsLocal) {\r\n            t.utc();\r\n        } else {\r\n            t.local();\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    // Converts a moment taken from @material-ui/pickers\r\n    public setMoment(t: moment.Moment): moment.Moment {\r\n\r\n        if (!t || !t.isValid() || !!this._showTimeAsLocal) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        return moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n    }\r\n\r\n    public formatDateTimeString(utcString: string): string {\r\n\r\n        if (!this._showTimeAsLocal || !utcString || utcString.length < 11) {\r\n            return utcString;\r\n        }\r\n\r\n        // need to handle milliseconds separately (because it might also be microseconds, and those are omitted by moment)\r\n        const dotPoint = utcString.lastIndexOf('.');\r\n        const milliseconds = (dotPoint >= 0) ? '.' + utcString.substring(dotPoint + 1, utcString.length - 1) : '';\r\n\r\n        return moment(utcString).format(`YYYY-MM-DDTHH:mm:ss`) + milliseconds;\r\n    }\r\n\r\n    @observable\r\n    private _showTimeAsLocal: boolean;\r\n\r\n    @observable\r\n    private _timeZoneName: string;\r\n\r\n    private setTimeZoneName() {\r\n\r\n        var timeZoneName = 'UTC';\r\n        if (!!this.showTimeAsLocal) {\r\n            \r\n            var offset = (new Date()).getTimezoneOffset() / 60;\r\n            timeZoneName +=\r\n                (\r\n                    (offset < 0 ? '+' : '-')\r\n                    +\r\n                    (Math.floor(offset) === offset ? Math.abs(offset).toFixed(0) : Math.abs(offset).toFixed(1))\r\n                );\r\n        }\r\n        \r\n        this._timeZoneName = timeZoneName;\r\n    }\r\n}\r\n\r\nexport const DfmContextType = React.createContext<DfmContext>(new DfmContext());\r\nexport const dfmContextInstance = new DfmContext();","import { createMuiTheme } from '@material-ui/core';\r\n\r\nimport { RuntimeStatus } from './states/DurableOrchestrationStatus';\r\nimport { dfmContextInstance } from './DfmContext';\r\n\r\nconst colorTheme = !process.env.REACT_APP_COLOR_THEME ? dfmContextInstance.theme : process.env.REACT_APP_COLOR_THEME;\r\n\r\nexport const Theme = createMuiTheme({\r\n    palette: { type: colorTheme === 'dark' ? 'dark' : 'light' }\r\n});\r\n\r\nexport const CustomTabStyle = Theme.palette.type === 'dark' ? {\r\n    backgroundColor: '#aaa'\r\n} : {};\r\n\r\nexport const PrimaryButtonColor = Theme.palette.type === 'dark' ? 'default' : 'primary';\r\n\r\nexport function RuntimeStatusToStyle(status: RuntimeStatus): {} {\r\n\r\n    var backgroundColor: string = null;\r\n\r\n    switch (status) {\r\n        case 'Failed':\r\n            backgroundColor = hexToRGBA(Theme.palette.error.light, 0.2);\r\n            break;\r\n        case 'Completed':\r\n            backgroundColor = hexToRGBA(Theme.palette.success.light, 0.2);\r\n            break;\r\n        case 'Running':\r\n            backgroundColor = hexToRGBA(Theme.palette.warning.light, 0.2);\r\n            break;\r\n        case 'Terminated':\r\n            backgroundColor = hexToRGBA(Theme.palette.background.paper, 0.1);\r\n            break;\r\n    }\r\n\r\n    return !!backgroundColor ? { backgroundColor } : {};\r\n}\r\n\r\nexport function hexToRGBA(hex: string, alpha: number): string {\r\n\r\n    if (hex.length > 4) {\r\n        return `rgba(${parseInt(hex.slice(1, 3), 16)}, ${parseInt(hex.slice(3, 5), 16)}, ${parseInt(hex.slice(5, 7), 16)}, ${alpha.toFixed(1)})`;\r\n    } else {\r\n        return `rgba(${parseInt(hex.slice(1, 2), 16)}, ${parseInt(hex.slice(2, 3), 16)}, ${parseInt(hex.slice(3, 4), 16)}, ${alpha.toFixed(1)})`;\r\n    }\r\n}\r\n\r\nexport function RuntimeStatusToBadgeStyle(status: RuntimeStatus | 'Duration'): {} {\r\n\r\n    var backgroundColor: string = null;\r\n\r\n    if (Theme.palette.type === 'dark') {\r\n        \r\n        switch (status) {\r\n            case 'Failed':\r\n                backgroundColor = 'rgb(103,73,76)';\r\n                break;\r\n            case 'Completed':\r\n                backgroundColor = 'rgb(74,98,80)';\r\n                break;\r\n            case 'Running':\r\n                backgroundColor = 'rgb(105,93,68)';\r\n                break;\r\n            case 'Terminated':\r\n                backgroundColor = 'rgb(66,66,66)';\r\n                break;\r\n            case 'Duration':\r\n                backgroundColor = 'rgb(50,50,50)';\r\n                break;\r\n        }\r\n    } else {\r\n\r\n        switch (status) {\r\n            case 'Failed':\r\n                backgroundColor = 'rgb(250,227,227)';\r\n                break;\r\n            case 'Completed':\r\n                backgroundColor = 'rgb(230,244,230)';\r\n                break;\r\n            case 'Running':\r\n                backgroundColor = 'rgb(255,241,219)';\r\n                break;\r\n            case 'Terminated':\r\n                backgroundColor = 'rgb(231,231,231)';\r\n                break;\r\n            case 'Duration':\r\n                backgroundColor = 'rgb(255,255,255)';\r\n                break;\r\n        }\r\n    }\r\n\r\n    return !!backgroundColor ? { backgroundColor } : {};\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    List, ListItem, Link,\r\n    Menu, MenuItem, Tooltip, Typography, DialogTitle\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\nimport { Theme } from '../theme';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage ? (!state.allowedTaskHubNames ? (<>\r\n                            \r\n                            <Container className=\"login-progress\">\r\n                                <CircularProgress />\r\n                            </Container>\r\n                            <DialogContentText>Login in progress...</DialogContentText>\r\n\r\n                        </>) : (<>\r\n                                \r\n                            <DialogTitle>Select your Task Hub</DialogTitle>\r\n                            <List className=\"task-hub-list\">\r\n                                {state.allowedTaskHubNames.map(hubName => (\r\n                                    <ListItem button key={hubName}>\r\n                                        <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href={state.locationPathName + hubName}>{hubName}</Link>\r\n                                    </ListItem>)\r\n                                )}\r\n                            </List>\r\n                            \r\n                        </>)): (<>\r\n                        \r\n                            <Container className=\"login-progress\">\r\n                                <Error color=\"secondary\" fontSize=\"large\" />\r\n                            </Container>\r\n                            <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            \r\n                        </>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormControlLabel, IconButton, Menu, MenuItem, Radio, RadioGroup, Typography\r\n} from '@material-ui/core';\r\n\r\nimport './MainMenu.css';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\nimport { DfmContextType } from '../DfmContext';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState, doRefresh: () => void }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <IconButton color=\"inherit\"\r\n                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n            >\r\n                <MenuIcon/>\r\n            </IconButton>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <RadioGroup row value={this.context.showTimeAsLocal.toString()} onChange={(evt) => {\r\n                    this.context.showTimeAsLocal = (evt.target as HTMLInputElement).value === 'true';\r\n                    state.menuAnchorElement = undefined;\r\n                    this.props.doRefresh();\r\n                }}>\r\n                    <Typography className=\"show-time-as-typography\">Show time as:</Typography>\r\n                    <FormControlLabel control={<Radio color=\"primary\"/>} label=\"UTC\" value={'false'} />\r\n                    <FormControlLabel control={<Radio color=\"primary\"/>} label=\"Local\" value={'true'} />\r\n                </RadioGroup>\r\n\r\n                <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                <MenuItem onClick={() => state.showCleanEntityStorageDialog()}>Clean Entity Storage...</MenuItem>\r\n                <MenuItem onClick={() => state.showStartNewInstanceDialog()}>Start New Orchestration Instance...</MenuItem>\r\n            </Menu>\r\n        </>);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    EventId: number;\r\n    Name: string;\r\n    FunctionName: string;\r\n    ScheduledTime: string;\r\n    DurationInMs: number;\r\n    SubOrchestrationId: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'EventId',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport const RuntimeStatuses = ['Completed', 'Running', 'Failed', 'Pending', 'Terminated', 'Canceled', 'ContinuedAsNew'] as const;\r\nexport type RuntimeStatus = typeof RuntimeStatuses[number];\r\n\r\nexport type EntityType = 'Orchestration' | 'DurableEntity';\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    duration: number;\r\n    tabTemplateNames?: string[];\r\n\r\n    static getFunctionName(instance: DurableOrchestrationStatus): string {\r\n        return instance.entityType === 'DurableEntity' ? instance.entityId.name : instance.name;\r\n    }\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'duration',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: { errorMessage: string } }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01');\r\n    private static MaxMoment = moment('2100-01-01');\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDuration(durationInMs: number): string {\r\n\r\n        if (isNaN(durationInMs) || (durationInMs < 0)) {\r\n            return '';\r\n        }\r\n\r\n        const days = Math.floor(durationInMs / 86400000);\r\n        var c = 0;\r\n        var result = '';\r\n\r\n        if (days > 0) {\r\n            result += days.toFixed(0) + 'd';\r\n            ++c;\r\n            durationInMs = durationInMs % 86400000;\r\n        }\r\n\r\n        const hours = Math.floor(durationInMs / 3600000);\r\n        if (hours > 0) {\r\n            result += hours.toFixed(0) + 'h';\r\n\r\n            if (++c > 1) {\r\n                return result;\r\n            }\r\n\r\n            durationInMs = durationInMs % 3600000;\r\n        }\r\n\r\n        const minutes = Math.floor(durationInMs / 60000);\r\n        if (minutes > 0) {\r\n            result += minutes.toFixed(0) + 'm';\r\n\r\n            if (++c > 1) {\r\n                return result;\r\n            }\r\n\r\n            durationInMs = durationInMs % 60000;\r\n        }\r\n\r\n        const seconds = Math.floor(durationInMs / 1000);\r\n        if (seconds > 0) {\r\n            result += seconds.toFixed(0) + 's';\r\n\r\n            if (++c > 1) {\r\n                return result;\r\n            }\r\n\r\n            durationInMs = durationInMs % 1000;\r\n        }\r\n\r\n        if (durationInMs > 0) {\r\n            result += durationInMs.toFixed(0) + 'ms';\r\n        }\r\n\r\n        if (!result) {\r\n            result = '0ms';\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n\r\n    protected showError(msg: string, err: any) {\r\n\r\n        if (typeof err === 'string') {\r\n            this.errorMessage = `${msg}. ${err}`;\r\n        } else {\r\n            this.errorMessage = `${msg}. ${(!err.response || !err.response.data) ? err.message : err.response.data}`;\r\n        }\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\nexport class CancelToken {\r\n    @observable\r\n    inProgress: boolean = false;\r\n    @observable\r\n    isCancelled: boolean = false;\r\n}\r\n","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { ITypedLocalStorage } from '../ITypedLocalStorage';\r\nimport { CancelToken } from '../../CancelToken';\r\n\r\n// Represents the state of a tab in the results pane\r\nexport interface IResultsTabState {\r\n\r\n    reset(): void;\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void>;\r\n}\r\n\r\n// Resulting list of orchestrations represented as a plain table\r\nexport class ResultsListTabState implements IResultsTabState {\r\n\r\n    @observable\r\n    longJsonDialogState = {};\r\n    \r\n    @observable\r\n    columnUnderMouse: string;\r\n\r\n    @computed\r\n    get hiddenColumns(): string[] { return this._hiddenColumns; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection; }\r\n\r\n    @computed\r\n    get orderBy(): string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val) {\r\n\r\n            this._orderBy = val;\r\n            this._orderByDirection = 'asc';\r\n\r\n        } else if (this._orderByDirection === 'desc') {\r\n\r\n            this._orderBy = '';\r\n            this._orderByDirection = 'asc';\r\n            }\r\n        else {\r\n            this._orderByDirection = 'desc';\r\n        }\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<ResultsListTabState>, private _refresh: () => void) {\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n\r\n        const hiddenColumnsString = this._localStorage.getItem('hiddenColumns');\r\n        if (!!hiddenColumnsString) {\r\n            this._hiddenColumns = hiddenColumnsString.split('|');\r\n        }\r\n    }\r\n\r\n    hideColumn(name: string) {\r\n        this._hiddenColumns.push(name);\r\n        this._localStorage.setItem('hiddenColumns', this._hiddenColumns.join('|'));\r\n    }\r\n\r\n    unhide() {\r\n        this._hiddenColumns = [];\r\n        this._localStorage.removeItem('hiddenColumns');\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n        this._refresh();\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean = false): Promise<void> {\r\n\r\n        if (isAutoRefresh) { \r\n\r\n            this._noMorePagesToLoad = false;\r\n\r\n        } else {\r\n\r\n            if (!!this._noMorePagesToLoad) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            // persisting state as a batch\r\n            this._localStorage.setItems([\r\n                { fieldName: 'orderBy', value: this._orderBy },\r\n                { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n            ]);            \r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const hiddenColumnsClause = !this._hiddenColumns.length ? '' : `&hidden-columns=${this._hiddenColumns.join('|')}`;\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}${hiddenColumnsClause}`;\r\n\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n            \r\n            if (isAutoRefresh) {\r\n                this._orchestrations = response;\r\n            } else {\r\n                this._orchestrations.push(...response);\r\n            }\r\n\r\n            if (!response.length) {\r\n\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n\r\n    @observable\r\n    private _hiddenColumns: string[] = [];\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n}","import { observable } from 'mobx';\r\nimport mermaid from 'mermaid';\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\n\r\n// Base class for all mermaid-related states\r\nexport abstract class MermaidDiagramStateBase {\r\n\r\n    @observable\r\n    protected _diagramCode: string;\r\n    @observable\r\n    protected _diagramSvg: string;\r\n\r\n    protected initMermaidWhenNeeded() : void {\r\n\r\n        if (MermaidDiagramStateBase._mermaidInitialized) { \r\n            return;\r\n        }\r\n\r\n        mermaid.initialize({\r\n            startOnLoad: true,\r\n            \r\n            sequence: {\r\n                noteMargin: 0,\r\n                boxMargin: 5,\r\n                boxTextMargin: 5\r\n            },\r\n\r\n            flowchart: {\r\n                curve: 'Basis',\r\n                useMaxWidth: true,\r\n                htmlLabels: false\r\n            }\r\n        });\r\n\r\n        MermaidDiagramStateBase._mermaidInitialized = true;\r\n    }\r\n\r\n    protected escapeTitle(id: string) {\r\n\r\n        return id.replace(/[@:;]/g, ' ');\r\n    }\r\n\r\n    protected formatDuration(durationInMs: number): string {\r\n\r\n        const result = DateTimeHelpers.formatDuration(durationInMs);\r\n        return !result ? '' : `(${result})`;\r\n    }\r\n\r\n    protected formatDurationInSeconds(durationInMs: number): string {\r\n\r\n        return Math.ceil(durationInMs / 1000).toFixed(0) + 's';\r\n    }\r\n\r\n    private static _mermaidInitialized = false;\r\n}","import { computed } from 'mobx'\r\nimport mermaid from 'mermaid';\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { MermaidDiagramStateBase } from '../MermaidDiagramStateBase';\r\nimport { dfmContextInstance } from '../../DfmContext';\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsGanttDiagramTabState extends MermaidDiagramStateBase implements IResultsTabState {\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; }\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; }\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n        this._instances = [];\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            const uri = `/orchestrations?$top=500&$orderby=createdTime asc${filterClause}`;\r\n\r\n            this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n                this._instances = instances;\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title Gantt Chart (${instances.length} instances shown) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss \\n' +\r\n                    this.renderDiagram(instances);\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n                        resolve();\r\n                    });\r\n\r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Opens the selected orchestrationId in a new tab\r\n    goto(oneBasedInstanceIndex: number) {\r\n\r\n        if (!!oneBasedInstanceIndex && oneBasedInstanceIndex <= this._instances.length) {\r\n\r\n            this._backendClient.showDetails(this._instances[oneBasedInstanceIndex - 1].instanceId);\r\n        }\r\n    }\r\n\r\n    private _instances: DurableOrchestrationStatus[] = [];\r\n\r\n    private renderDiagram(instances: DurableOrchestrationStatus[]): string {\r\n\r\n        var result: string = '';\r\n\r\n        var prevSectionName = '';\r\n        var sectionNr = 0;\r\n        for (const instance of instances) {\r\n\r\n            var nextLine = '';\r\n\r\n            // Grouping instances by their type\r\n            const sectionName = DurableOrchestrationStatus.getFunctionName(instance);\r\n            if (sectionName !== prevSectionName) {\r\n                \r\n                nextLine = `section ${++sectionNr}. ${this.escapeTitle(sectionName)} \\n`;\r\n                prevSectionName = sectionName;\r\n            }\r\n\r\n            const instanceId = instance.entityType === 'DurableEntity' ? instance.entityId.key : instance.instanceId;\r\n            const durationInMs = new Date(instance.lastUpdatedTime).getTime() - new Date(instance.createdTime).getTime();\r\n\r\n            nextLine += `${this.escapeTitle(instanceId)} ${this.formatDuration(durationInMs)}: active, ${this.formatDateTime(instance.createdTime)}, ${this.formatDurationInSeconds(durationInMs)} \\n`;\r\n            \r\n            result += nextLine;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private formatDateTime(utcDateTimeString: string): string {\r\n\r\n        if (!dfmContextInstance.showTimeAsLocal) {\r\n            return utcDateTimeString.substr(0, 19);\r\n        }\r\n\r\n        return moment(utcDateTimeString).format('YYYY-MM-DDTHH:mm:ss')\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { TimeRangeEnum } from './OrchestrationsState';\r\n\r\ntype HistogramColumn = { x0: number, x: number, y: number };\r\ntype TimeInterval = { timeFrom: moment.Moment, timeTill: moment.Moment, timeRange: TimeRangeEnum };\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsHistogramTabState implements IResultsTabState {\r\n\r\n    @computed\r\n    get zoomedIn() { return this._zoomedIn; }\r\n\r\n    @computed\r\n    get histograms() { return this._histograms; }\r\n\r\n    @computed\r\n    get numOfInstancesShown() { return this._numOfInstancesShown; }\r\n\r\n    get counts() { return this._counts; }\r\n\r\n    get timeRangeInMilliseconds(): number {\r\n        return this._timeRangeInMilliseconds;\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _filterState: TimeInterval & { reloadOrchestrations: () => void, cancel: () => void })\r\n    {\r\n    }\r\n\r\n    reset() {\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        if (!this._applyingZoom && !this._zoomedIn) {\r\n\r\n            this._originalTimeInterval = {\r\n                timeFrom: this._filterState.timeFrom,\r\n                timeTill: this._filterState.timeTill,\r\n                timeRange: this._filterState.timeRange\r\n            };\r\n        }\r\n\r\n        this._numOfInstancesShown = 0;\r\n        this._histograms = {};\r\n        this._counts = {};\r\n\r\n        const startTime = this._filterState.timeFrom.valueOf();\r\n        var bucketLength = Math.ceil((this._filterState.timeTill.valueOf() - startTime) / this._numOfIntervals);\r\n        if (bucketLength <= 0) {\r\n            bucketLength = 1;\r\n        }\r\n\r\n        // Need to remember this value, for later time axis rendering\r\n        this._timeRangeInMilliseconds = this._filterState.timeTill.valueOf() - this._filterState.timeFrom.valueOf();\r\n\r\n        return this.loadNextBatch(filterClause, startTime, bucketLength, 0, cancelToken);\r\n    }\r\n\r\n    applyZoom(left: Date, right: Date) {\r\n\r\n        this._numOfInstancesShown = 0;\r\n\r\n        this._filterState.cancel();\r\n        \r\n        // rounding to next second\r\n        const from = Math.floor(left.getTime() / 1000) * 1000;\r\n        const till = Math.ceil(right.getTime() / 1000) * 1000;\r\n\r\n        this._filterState.timeFrom = moment(from);\r\n        this._filterState.timeTill = moment(till);\r\n\r\n        this._applyingZoom = true;\r\n        try {\r\n            this._filterState.reloadOrchestrations();\r\n        } finally {\r\n            this._applyingZoom = false;\r\n        }\r\n\r\n        this._zoomedIn = true;\r\n    }\r\n\r\n    resetZoom() {\r\n\r\n        if (!this._zoomedIn || !this._originalTimeInterval) {\r\n            return;\r\n        }\r\n\r\n        this._zoomedIn = false;\r\n\r\n        this._filterState.cancel();\r\n\r\n        this._filterState.timeFrom = this._originalTimeInterval.timeFrom;\r\n        this._filterState.timeTill = this._originalTimeInterval.timeTill;\r\n        this._filterState.timeRange = this._originalTimeInterval.timeRange;\r\n    }\r\n\r\n    @observable\r\n    private _histograms: { [typeName: string]: HistogramColumn[]; } = {};\r\n\r\n    private _counts: { [typeName: string]: number; } = {};\r\n\r\n    @observable\r\n    private _numOfInstancesShown: number = 0;\r\n\r\n    @observable\r\n    private _zoomedIn = false;\r\n\r\n    private _originalTimeInterval: TimeInterval = null;\r\n    private _applyingZoom = false;\r\n    private _timeRangeInMilliseconds = 0;\r\n\r\n    private readonly _numOfIntervals = 200;\r\n    private readonly _pageSize = 1000;\r\n\r\n    private loadNextBatch(filterClause: string, startTime: number, bucketLength: number, pageNumber: number, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${this._numOfInstancesShown}${filterClause}`;\r\n\r\n        return this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            for (var instance of instances) {\r\n\r\n                const instanceTypeName = DurableOrchestrationStatus.getFunctionName(instance);\r\n\r\n                if (!this._histograms[instanceTypeName]) {\r\n                    \r\n                    const emptyHistogram = [];\r\n                    for (var i = 0; i < this._numOfIntervals; i++) {\r\n                        emptyHistogram[i] = { x0: startTime + i * bucketLength, x: startTime + (i + 1) * bucketLength, y: 0 };\r\n                    }\r\n                    this._histograms[instanceTypeName] = emptyHistogram;\r\n                }\r\n\r\n                const instanceStartPos = Math.floor((new Date(instance.createdTime).getTime() - startTime) / bucketLength);\r\n                if (instanceStartPos < 0 || instanceStartPos >= this._numOfIntervals) {\r\n                    continue;\r\n                }\r\n\r\n                this._histograms[instanceTypeName][instanceStartPos].y += 1;\r\n\r\n                if (!this._counts[instanceTypeName]) {\r\n                    this._counts[instanceTypeName] = 1;\r\n                } else {\r\n                    this._counts[instanceTypeName] += 1;\r\n                }\r\n            }\r\n\r\n            this._numOfInstancesShown += instances.length;\r\n\r\n            if (instances.length === this._pageSize) {\r\n                \r\n                return this.loadNextBatch(filterClause, startTime, bucketLength, pageNumber + 1, cancelToken);\r\n            }\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\nimport { FunctionsMap, ProxiesMap } from './az-func-as-a-graph/FunctionsMap';\r\n\r\nexport type TraversalResult = {\r\n    functions: FunctionsMap;\r\n    proxies: ProxiesMap;\r\n    iconsSvg: string;\r\n};\r\n\r\n// ID of an embedded SVG element containing Azure service icons. Should be present in index.html\r\nconst AllAzureIconsSvgElementId = \"all-azure-icons-svg\";\r\n\r\n// Base class for all Function Graph states\r\nexport class FunctionGraphStateBase extends MermaidDiagramStateBase {\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get diagramSvg(): string { return this._diagramSvg; };\r\n\r\n    @computed\r\n    get functionsLoaded(): boolean { return !!this._traversalResult; };\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(protected _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    gotoFunctionCode(functionName: string): void {\r\n\r\n        if (this.backendClient.isVsCode) {\r\n            \r\n            this.backendClient.call('GotoFunctionCode', functionName).then(() => { }, err => {\r\n                console.log(`Failed to goto function code: ${err.message}`);\r\n            });\r\n\r\n        } else {\r\n\r\n            var functionOrProxy = null;\r\n\r\n            if (functionName.startsWith('proxy.')) {\r\n                \r\n                functionOrProxy = this._traversalResult.proxies[functionName.substr(6)];\r\n\r\n            } else {\r\n\r\n                functionOrProxy = this._traversalResult.functions[functionName];\r\n            }\r\n\r\n            if (!!functionOrProxy && !!functionOrProxy.filePath) {\r\n                window.open(functionOrProxy.filePath);\r\n            }\r\n        }\r\n    }\r\n\r\n    saveAsJson(): void {\r\n\r\n        this.backendClient.call('SaveFunctionGraphAsJson', '').then(() => { }, err => {\r\n            console.log(`Failed to goto function code: ${err.message}`);\r\n        });\r\n    }\r\n\r\n    @observable\r\n    protected _renderFunctions: boolean = true;\r\n    @observable\r\n    protected _renderProxies: boolean = true;\r\n    @observable\r\n    protected _traversalResult: TraversalResult;\r\n\r\n    protected applyIcons(svg: string): string {\r\n\r\n        const iconsSvgElement = document.getElementById(AllAzureIconsSvgElementId);\r\n        if (!iconsSvgElement) {\r\n            return svg;\r\n        }\r\n\r\n        // Placing icons code into a <defs> block at the top\r\n        svg = svg.replace(`><style>`, `>\\n<defs>\\n${iconsSvgElement.innerHTML}</defs>\\n<style>`);\r\n\r\n        // Adding <use> blocks referencing relevant icons\r\n        svg = svg.replace(/<g class=\"node (\\w+).*?<g class=\"label\" transform=\"translate\\([0-9,.-]+\\)\"><g transform=\"translate\\([0-9,.-]+\\)\">/g,\r\n            `$&<use href=\"#az-icon-$1\" width=\"20px\" height=\"20px\"/>`);\r\n\r\n        return svg;\r\n    }\r\n}","import { FunctionsMap, ProxiesMap } from './FunctionsMap';\r\n\r\nconst space = '#32;';\r\n\r\nfunction getTriggerBindingText(binding: any): string {\r\n\r\n    switch (binding.type) {\r\n        case 'httpTrigger':\r\n            return `${binding.authLevel === 'anonymous' ? '#127760;' : '#128274;'} http${!binding.methods ? '' : ':[' + binding.methods.join(',') + ']'}${!binding.route ? '' : ':' + binding.route}`;\r\n        case 'blobTrigger':\r\n            return `${space}blob:${binding.path ?? ''}`;\r\n        case 'cosmosDBTrigger':\r\n            return `${space}cosmosDB:${binding.databaseName ?? ''}:${binding.collectionName ?? ''}`;\r\n        case 'eventHubTrigger':\r\n            return `${space}eventHub:${binding.eventHubName ?? ''}`;\r\n        case 'serviceBusTrigger':\r\n            return `${space}serviceBus:${!binding.queueName ? (binding.topicName ?? '') : binding.queueName}${!binding.subscriptionName ? '' : ':' + binding.subscriptionName}`;\r\n        case 'queueTrigger':\r\n            return `${space}queue:${binding.queueName ?? ''}`;\r\n        case 'timerTrigger':\r\n            return `${space}timer:${binding.schedule ?? ''}`;\r\n        default:\r\n            return `${space}${binding.type}`;\r\n    }\r\n}\r\n\r\nfunction getBindingText(binding: any): string {\r\n\r\n    switch (binding.type) {\r\n        case 'table':\r\n            return `${space}table:${binding.tableName ?? ''}`;\r\n        case 'blob':\r\n            return `${space}blob:${binding.path ?? ''}`;\r\n        case 'cosmosDB':\r\n            return `${space}cosmosDB:${binding.databaseName ?? ''}:${binding.collectionName ?? ''}`;\r\n        case 'eventHub':\r\n            return `${space}eventHub:${binding.eventHubName ?? ''}`;\r\n        case 'serviceBus':\r\n            return `${space}serviceBus:${!binding.queueName ? (binding.topicName ?? '') : binding.queueName}${!binding.subscriptionName ? '' : ':' + binding.subscriptionName}`;\r\n        case 'queue':\r\n            return `${space}queue:${binding.queueName ?? ''}`;\r\n        default:\r\n            return `${space}${binding.type}`;\r\n    }\r\n}\r\n\r\nexport type GraphSettings = {\r\n    doNotRenderFunctions?: boolean,\r\n    doNotRenderProxies?: boolean,\r\n};\r\n\r\n// Translates functions and their bindings into a Mermaid Flowchart diagram code\r\nexport function buildFunctionDiagramCode(functionsMap: FunctionsMap, proxiesMap: ProxiesMap, settings: GraphSettings = {}): string {\r\n\r\n    var code = '';\r\n\r\n    if (!settings.doNotRenderFunctions) {\r\n        \r\n        const functions = [];\r\n\r\n        // Determine what kind of function this one is\r\n        for (const name in functionsMap) {\r\n            const func = functionsMap[name];\r\n    \r\n            var triggerBinding = undefined, inputBindings = [], outputBindings = [], otherBindings = [];\r\n            var nodeCode = `${name}{{\"${space}${name}\"}}:::function`;\r\n    \r\n            for (const binding of func.bindings) {\r\n    \r\n                if (binding.type === 'orchestrationTrigger') {\r\n                    nodeCode = `${name}[[\"${space}${name}\"]]:::orchestrator`;\r\n                } else if (binding.type === 'activityTrigger') {\r\n                    nodeCode = `${name}[/\"${space}${name}\"/]:::activity`;\r\n                } else if (binding.type === 'entityTrigger') {\r\n                    nodeCode = `${name}[(\"${space}${name}\")]:::entity`;\r\n                }\r\n    \r\n                if (binding.type.endsWith('Trigger')) {\r\n                    triggerBinding = binding;\r\n                } else if (binding.direction === 'in') {\r\n                    inputBindings.push(binding);\r\n                } else if (binding.direction === 'out') {\r\n                    outputBindings.push(binding);\r\n                } else {\r\n                    otherBindings.push(binding);\r\n                }\r\n            }\r\n    \r\n            functions.push({ name, nodeCode, triggerBinding, inputBindings, outputBindings, otherBindings, ...func });\r\n        }\r\n    \r\n        // Sorting by trigger type, then by name. Moving the ones that are being called to the bottom.\r\n        const getFunctionHash = (f) => {\r\n    \r\n            var hash = (!!f.isCalledBy?.length || !f.triggerBinding || !f.triggerBinding.type) ? '' : f.triggerBinding.type;\r\n            hash += '~' + f.name;\r\n            return hash;\r\n        }\r\n        functions.sort((f1, f2) => {\r\n            \r\n            var s1 = getFunctionHash(f1);\r\n            var s2 = getFunctionHash(f2);\r\n    \r\n            return (s1 > s2) ? 1 : ((s2 > s1) ? -1 : 0);\r\n        });\r\n    \r\n        // Rendering\r\n        for (const func of functions) {\r\n    \r\n            code += `${func.nodeCode}\\n`;\r\n            // Making Functions nodes a bit darker\r\n            code += `style ${func.name} fill:#D9D9FF,stroke-width:2px\\n`;\r\n    \r\n            if (!!func.isCalledBy?.length) {\r\n    \r\n                for (const calledBy of func.isCalledBy) {\r\n                    code += `${calledBy} ---> ${func.name}\\n`;\r\n                }\r\n    \r\n            } else if (!!func.triggerBinding) {\r\n    \r\n                code += `${func.name}.${func.triggerBinding.type}>\"${getTriggerBindingText(func.triggerBinding)}\"]:::${func.triggerBinding.type} --> ${func.name}\\n`;\r\n            }\r\n    \r\n            for (var i = 0; i < func.inputBindings.length; i++) {\r\n                const inputBinding = func.inputBindings[i];\r\n                code += `${func.name}.${i}.${inputBinding.type}([\"${getBindingText(inputBinding)}\"]):::${inputBinding.type} -.-> ${func.name}\\n`;\r\n            }\r\n    \r\n            for (var i = 0; i < func.outputBindings.length; i++) {\r\n                const outputBinding = func.outputBindings[i];\r\n                code += `${func.name} -.-> ${func.name}.${i}.${outputBinding.type}([\"${getBindingText(outputBinding)}\"]):::${outputBinding.type}\\n`;\r\n            }\r\n    \r\n            for (var i = 0; i < func.otherBindings.length; i++) {\r\n                const otherBinding = func.otherBindings[i];\r\n                code += `${func.name} -.- ${func.name}.${i}.${otherBinding.type}([\"${getBindingText(otherBinding)}\"]):::${otherBinding.type}\\n`;\r\n            }\r\n    \r\n            if (!!func.isSignalledBy?.length) {\r\n    \r\n                for (const signalledBy of func.isSignalledBy) {\r\n                    code += `${signalledBy.name} -- \"#9889; ${signalledBy.signalName}\" ---> ${func.name}\\n`;\r\n                }\r\n            }\r\n    \r\n            if (!!func.isCalledByItself) {\r\n    \r\n                code += `${func.name} -- \"[ContinueAsNew]\" --> ${func.name}\\n`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Also proxies\r\n    if (!settings.doNotRenderProxies && (Object.keys(proxiesMap).length > 0)) {\r\n        \r\n        const proxyNodesColor = '#FFE6C8';\r\n\r\n        var nodeTitle = ``;\r\n        var notAddedToCsProjFile = false;\r\n\r\n        for (const name in proxiesMap) {\r\n            const proxy = proxiesMap[name];\r\n            const proxyPurifiedName = name.replace(/ /g, '');\r\n\r\n            notAddedToCsProjFile = proxy.warningNotAddedToCsProjFile;\r\n\r\n            nodeTitle = '';\r\n            if (!!proxy.matchCondition) {\r\n                \r\n                if (!!proxy.matchCondition.methods && !!proxy.matchCondition.methods.length) {\r\n                    nodeTitle += (!!nodeTitle ? ':' : '') + `[${proxy.matchCondition.methods.join(',')}]`;\r\n                }\r\n\r\n                if (!!proxy.matchCondition.route) {\r\n                    nodeTitle += (!!nodeTitle ? ':' : '') + proxy.matchCondition.route;\r\n                }\r\n            }\r\n            if (!nodeTitle) {\r\n                nodeTitle = name;\r\n            }\r\n\r\n            var nodeName = `proxy.${proxyPurifiedName}`;\r\n\r\n            code += `proxies.json -. \"${name}\" .-> ${nodeName}([\"${space}${nodeTitle}\"]):::proxy\\n`;\r\n            code += `style ${nodeName} fill:${proxyNodesColor}\\n`;\r\n\r\n            if (!!proxy.backendUri) {\r\n\r\n                nodeTitle = proxy.backendUri.replace(/'response./g, `'`);\r\n\r\n                const nextNodeName = `proxy.${proxyPurifiedName}.backendUri`;\r\n\r\n                code += `${nodeName} ${getRequestOverridesArrowCode(proxy.requestOverrides)} ${nextNodeName}[\"${space}${nodeTitle}\"]:::http\\n`;\r\n                code += `style ${nextNodeName} fill:${proxyNodesColor}\\n`;\r\n\r\n                nodeName = nextNodeName;\r\n            }\r\n\r\n            const nextNodeName = `proxy.${proxyPurifiedName}.response`;\r\n\r\n            code += `${nodeName} ${getResponseOverridesArrowCode(proxy.responseOverrides)} ${nextNodeName}([\"${space}.\"]):::http\\n`;\r\n            code += `style ${nextNodeName} fill:${proxyNodesColor}\\n`;\r\n        }\r\n\r\n        nodeTitle = `proxies.json`;\r\n        var nodeColor = proxyNodesColor;\r\n        if (notAddedToCsProjFile) {\r\n            nodeTitle += ` #9888; Not added to .CSPROJ file!`;\r\n            nodeColor = `#FF8080`;\r\n        }\r\n\r\n        code += `proxies.json[\"${space}${nodeTitle}\"]\\n`;\r\n        code += `style proxies.json fill:${nodeColor}\\n`;\r\n    }\r\n\r\n    return code;\r\n}\r\n\r\nconst maxSymbolsInTitle = 150;\r\n\r\nfunction getRequestOverridesArrowCode(requestOverrides: any): string {\r\n\r\n    if (!requestOverrides) {\r\n        return `-->`\r\n    }\r\n\r\n    var arrowText = JSON.stringify(requestOverrides)\r\n        .replace(/\"/g, `'`)\r\n        .replace(/'backend.request./g, `'`);\r\n    \r\n    if (arrowText.length > maxSymbolsInTitle) {\r\n        arrowText = arrowText.substr(0, maxSymbolsInTitle) + '...';\r\n    }\r\n\r\n    return `-- \"${arrowText}${space}\" -->`;\r\n}\r\n\r\nfunction getResponseOverridesArrowCode(responseOverrides: any): string {\r\n\r\n    if (!responseOverrides) {\r\n        return `-->`\r\n    }\r\n\r\n    if (!!responseOverrides['response.body']) {\r\n        responseOverrides['response.body'] = '...';\r\n    }\r\n\r\n    var arrowText = JSON.stringify(responseOverrides)\r\n        .replace(/\"/g, `'`)\r\n        .replace(/'response./g, `'`);\r\n    \r\n    if (arrowText.length > maxSymbolsInTitle) {\r\n        arrowText = arrowText.substr(0, maxSymbolsInTitle) + '...';\r\n    }\r\n\r\n    return `-- \"${arrowText}${space}\" -->`;\r\n}","import { computed, observable } from 'mobx'\r\nimport mermaid from 'mermaid';\r\n\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { FunctionGraphStateBase } from '../FunctionGraphStateBase';\r\nimport { buildFunctionDiagramCode } from '../az-func-as-a-graph/buildFunctionDiagramCode';\r\n\r\nexport class MetricsItem {\r\n    completed: number = 0;\r\n    running: number = 0;\r\n    failed: number = 0;\r\n    other: number = 0;\r\n    duration: number = 0;\r\n}\r\n\r\nexport type MetricsMap = { [funcName: string]: MetricsItem };\r\n\r\n// Resulting list of orchestrations represented on a Functions Graph\r\nexport class ResultsFunctionGraphTabState extends FunctionGraphStateBase implements IResultsTabState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @computed\r\n    get metrics(): MetricsMap { return this._metrics; }\r\n\r\n    @computed\r\n    get diagramSvg(): string { return this._diagramSvg; }\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; }\r\n\r\n    @computed\r\n    get renderFunctions(): boolean { return this._renderFunctions; };\r\n    set renderFunctions(val: boolean) {\r\n        this._renderFunctions = val;\r\n        this.render();\r\n    };\r\n\r\n    @computed\r\n    get renderProxies(): boolean { return this._renderProxies; };\r\n    set renderProxies(val: boolean) {\r\n        this._renderProxies = val;\r\n        this.render();\r\n    };\r\n\r\n    readonly TotalMetricsName = 'DurableFunctionsMonitor-ResultsFunctionGraphTabState-TotalNumbers';\r\n\r\n    constructor(backendClient: IBackendClient, private _startNewInstance: (funcName) => void) {\r\n        super(backendClient);\r\n    }\r\n\r\n    showPopupMenu(anchorElement: Element, functionName: string) {\r\n\r\n        this.menuAnchorElement = anchorElement;\r\n        this._selectedFunctionName = functionName;\r\n    }\r\n\r\n    gotoOrchestrationCode() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        if (!!this._selectedFunctionName) {\r\n            this.gotoFunctionCode(this._selectedFunctionName);\r\n        }\r\n    }\r\n\r\n    startNewInstance() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        if (!!this._selectedFunctionName) {\r\n            this._startNewInstance(this._selectedFunctionName);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n        this._traversalResult = null;\r\n        this._metrics = {};\r\n        this._numOfInstancesShown = 0;\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        this.initMermaidWhenNeeded();\r\n\r\n        this._numOfInstancesShown = 0;\r\n\r\n        const clonedMetrics = !isAutoRefresh ? JSON.parse(JSON.stringify(this._metrics)) : {};\r\n\r\n        return this._backendClient.call('GET', '/function-map').then(response => {\r\n            \r\n            this._traversalResult = response;\r\n        \r\n            return this.render().then(() => {\r\n\r\n                return this.loadNextBatch(filterClause, 0, clonedMetrics, isAutoRefresh, cancelToken).then(metrics => {\r\n\r\n                    // In autorefresh mode updating this observable property at the end, otherwise updating it on-the-fly\r\n                    this._metrics = metrics;\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _metrics: MetricsMap = {};\r\n\r\n    private _numOfInstancesShown: number = 0;\r\n    private readonly _pageSize = 1000;\r\n\r\n    private _selectedFunctionName: string;\r\n\r\n    private loadNextBatch(filterClause: string, pageNumber: number, metrics: MetricsMap, isAutoRefresh: boolean, cancelToken: CancelToken): Promise<MetricsMap> {\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${this._numOfInstancesShown}${filterClause}`;\r\n\r\n        return this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return Promise.resolve(metrics);\r\n            }\r\n\r\n            // updating metrics\r\n            \r\n            if (!metrics[this.TotalMetricsName]) {\r\n                metrics[this.TotalMetricsName] = new MetricsItem();\r\n            }\r\n\r\n            for (var instance of instances) {\r\n\r\n                const funcName = DurableOrchestrationStatus.getFunctionName(instance);\r\n\r\n                if (!metrics[funcName]) {\r\n                    metrics[funcName] = new MetricsItem();\r\n                }\r\n\r\n                switch (instance.runtimeStatus) {\r\n                    case 'Completed':\r\n                        metrics[funcName].completed++;\r\n                        metrics[this.TotalMetricsName].completed++;\r\n                        break;\r\n                    case 'Running':\r\n                    case 'Pending':\r\n                    case 'ContinuedAsNew':\r\n                        metrics[funcName].running++;\r\n                        metrics[this.TotalMetricsName].running++;\r\n                        break;\r\n                    case 'Failed':\r\n                        metrics[funcName].failed++;\r\n                        metrics[this.TotalMetricsName].failed++;\r\n                        break;\r\n                    default:\r\n                        metrics[funcName].other++;\r\n                        metrics[this.TotalMetricsName].other++;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            this._numOfInstancesShown += instances.length;\r\n\r\n            // Making metrics look alive, when not in autorefresh mode\r\n            if (!isAutoRefresh) {\r\n                this._metrics = metrics;\r\n            }\r\n\r\n            if (instances.length === this._pageSize) {\r\n                return this.loadNextBatch(filterClause, pageNumber + 1, metrics, isAutoRefresh, cancelToken);\r\n            }\r\n\r\n            return metrics;\r\n        });\r\n    }\r\n\r\n    private render(): Promise<void> {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            try {\r\n                const diagramCode = buildFunctionDiagramCode(this._traversalResult.functions, this._traversalResult.proxies,\r\n                    {\r\n                        doNotRenderFunctions: !this._renderFunctions,\r\n                        doNotRenderProxies: !this._renderProxies\r\n                    });\r\n    \r\n                if (!diagramCode) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n    \r\n                this._diagramCode = `graph LR\\n${diagramCode}`;\r\n    \r\n                mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n    \r\n                    this._diagramSvg = this.applyIcons(svg);\r\n\r\n                    resolve();\r\n                });\r\n    \r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../../DateTimeHelpers';\r\nimport { ErrorMessageState } from '../ErrorMessageState';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { ITypedLocalStorage } from '../ITypedLocalStorage';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { IResultsTabState, ResultsListTabState } from './ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from './ResultsGanttDiagramTabState';\r\nimport { ResultsHistogramTabState } from './ResultsHistogramTabState';\r\nimport { ResultsFunctionGraphTabState } from './ResultsFunctionGraphTabState';\r\nimport { RuntimeStatus } from '../DurableOrchestrationStatus';\r\nimport { QueryString } from '../QueryString';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains,\r\n    NotEquals,\r\n    NotStartsWith,\r\n    NotContains,\r\n    In,\r\n    NotIn\r\n}\r\n\r\nexport enum ResultsTabEnum {\r\n    List = 0,\r\n    Histogram,\r\n    Gantt,\r\n    FunctionGraph\r\n}\r\n\r\nexport enum TimeRangeEnum {\r\n    Custom = 0,\r\n    LastMinute,\r\n    Last10Minutes,\r\n    LastHour,\r\n    Last24Hours,\r\n    Last7Days,\r\n    Last30Days,\r\n    Last90Days\r\n}\r\n\r\nexport type RuntimeStatusOrDurableEntities = RuntimeStatus | 'DurableEntities';\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get tabIndex(): ResultsTabEnum { return this._tabIndex; }\r\n    set tabIndex(val: ResultsTabEnum) {\r\n\r\n        if (this._tabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._tabIndex = val;\r\n        this._localStorage.setItem('tabIndex', val.toString());\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    get selectedTabState(): IResultsTabState {\r\n        return this._tabStates[this._tabIndex];\r\n    }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment {\r\n        return this.getTimeFrom();\r\n    }\r\n    set timeFrom(val: moment.Moment) {\r\n\r\n        this._timeFrom = val;\r\n        this._timeRange = TimeRangeEnum.Custom;\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment {\r\n        return this.getTimeTill();\r\n    }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this._timeRange = TimeRangeEnum.Custom;\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment() : null;\r\n\r\n        if (!val) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get timeRange(): TimeRangeEnum { return this._timeRange; }\r\n    set timeRange(val: TimeRangeEnum) {\r\n\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._timeRange = val;\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showStatuses(): RuntimeStatusOrDurableEntities[] { return this._showStatuses; }\r\n    set showStatuses(val: RuntimeStatusOrDurableEntities[])\r\n    {\r\n        this._showStatuses = val;\r\n\r\n        // Need to reset auto-close timeout\r\n        if (!!this._selectAutoCloseToken) {\r\n            clearTimeout(this._selectAutoCloseToken);\r\n            this._selectAutoCloseToken = setTimeout(() => { this.isStatusSelectOpen = false; }, this._delayedRefreshDelay);\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get isStatusSelectOpen(): boolean { return this._isStatusSelectOpen; }\r\n    set isStatusSelectOpen(val)\r\n    {\r\n        this._isStatusSelectOpen = val;\r\n\r\n        if (!this._isStatusSelectOpen) {\r\n\r\n            // Need to reset auto-close timeout\r\n            if (!!this._selectAutoCloseToken) {\r\n                clearTimeout(this._selectAutoCloseToken);\r\n                this._selectAutoCloseToken = undefined;\r\n            }\r\n\r\n            this.reloadOrchestrations();\r\n\r\n        } else {\r\n\r\n            // Auto-closing by timeout\r\n            this._selectAutoCloseToken = setTimeout(() => { this.isStatusSelectOpen = false; }, this._delayedRefreshDelay);\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    get isFunctionGraphAvailable(): boolean { return this._isFunctionGraphAvailable; }\r\n\r\n    constructor(private _isFunctionGraphAvailable: boolean,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationsState & ResultsListTabState>,\r\n        private _startNewInstance: (funcName) => void\r\n    ) {\r\n        super();\r\n        \r\n        this._tabStates = [\r\n            new ResultsListTabState(this._backendClient, this._localStorage, () => this.reloadOrchestrations()),\r\n            new ResultsHistogramTabState(this._backendClient, this),\r\n            new ResultsGanttDiagramTabState(this._backendClient)\r\n        ];\r\n\r\n        if (!!this._isFunctionGraphAvailable) {\r\n            this._tabStates.push(new ResultsFunctionGraphTabState(this._backendClient, this._startNewInstance));\r\n        }\r\n\r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const timeRangeString = this._localStorage.getItem('timeRange');\r\n        if (!!timeRangeString) {\r\n\r\n            // timeRange and [timeFrom,timeTill] are mutually exclusive.\r\n            // So when the latter comes from query string, we should not pay attention to the former.\r\n            const queryString = new QueryString();\r\n            if (!queryString.values['timeFrom'] && !queryString.values['timeTill']) {   \r\n                this._timeRange = TimeRangeEnum[timeRangeString];\r\n            }\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showStatusesString = this._localStorage.getItem('showStatuses');\r\n        if (!!showStatusesString) {\r\n            this._showStatuses = JSON.parse(showStatusesString);\r\n        }\r\n        \r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const tabIndexString = this._localStorage.getItem('tabIndex');\r\n        if (!!tabIndexString) {\r\n            const tabIndex = Number(tabIndexString);\r\n            if (tabIndex >= 0 && tabIndex < this._tabStates.length) {\r\n                this._tabIndex = tabIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n\r\n        // Canceling delayed refresh, if any\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = null;\r\n        }\r\n\r\n        for (const resultState of this._tabStates) {\r\n            resultState.reset();\r\n        }\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: !this._timeRange ? this._timeFrom.toISOString(): null },\r\n            { fieldName: 'timeTill', value: (!!this._timeTill && !this._timeRange) ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'timeRange', value: !!this._timeRange ? TimeRangeEnum[this._timeRange] : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showStatuses', value: !!this._showStatuses ? JSON.stringify(this._showStatuses) : null },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        const cancelToken = this._cancelToken;\r\n        if (!!cancelToken.inProgress) {\r\n            return;            \r\n        }\r\n        cancelToken.inProgress = true;\r\n        \r\n        let filterClause = `&$filter=createdTime ge '${this.getTimeFrom().toISOString()}' and createdTime le '${this.getTimeTill().toISOString()}'`;\r\n        \r\n        if (!!this._showStatuses) {\r\n\r\n            filterClause += ` and runtimeStatus in (${this._showStatuses.map(s => `'${s}'`).join(',')})`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${encodeURIComponent(this._filterValue)}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${encodeURIComponent(this._filterValue)}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${encodeURIComponent(this._filterValue)}')`;\r\n                break;\r\n                case FilterOperatorEnum.NotEquals:\r\n                    filterClause += `${this._filteredColumn} ne '${encodeURIComponent(this._filterValue)}'`;\r\n                    break;\r\n                case FilterOperatorEnum.NotStartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${encodeURIComponent(this._filterValue)}') eq false`;\r\n                    break;\r\n                case FilterOperatorEnum.NotContains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${encodeURIComponent(this._filterValue)}') eq false`;\r\n                    break;\r\n                case FilterOperatorEnum.In:\r\n                case FilterOperatorEnum.NotIn:\r\n\r\n                    const values = this.toArrayOfStrings(this._filterValue);\r\n                   \r\n                    filterClause += `${this._filteredColumn} in (${values.map(v => encodeURIComponent(v)).join(',')})`;\r\n\r\n                    if (this._filterOperator === FilterOperatorEnum.NotIn) {\r\n                        filterClause += ' eq false';\r\n                    }\r\n\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.selectedTabState.load(filterClause, cancelToken, isAutoRefresh).then(() => {\r\n\r\n            if (!!this._refreshToken) {\r\n                clearTimeout(this._refreshToken);\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                this._refreshToken = setTimeout(() => {\r\n\r\n                    this.loadOrchestrations(true);\r\n\r\n                }, this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.showError('Load failed', err);\r\n            }\r\n                \r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _tabIndex: ResultsTabEnum = ResultsTabEnum.List;\r\n\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n    @observable\r\n    private _timeRange: TimeRangeEnum = TimeRangeEnum.Custom;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    @observable\r\n    private _showStatuses: RuntimeStatusOrDurableEntities[] = null;\r\n\r\n    @observable\r\n    private _isStatusSelectOpen: boolean = false;\r\n\r\n    private readonly _tabStates: IResultsTabState[];\r\n\r\n    private _refreshToken: NodeJS.Timeout;\r\n    private _selectAutoCloseToken: NodeJS.Timeout;\r\n    private readonly _delayedRefreshDelay = 5000;\r\n\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n\r\n    // turned out computed properties are memoized, so need to implement this as a method (so that current timestamp is properly returned)\r\n    private getTimeFrom(): moment.Moment {\r\n        switch (this._timeRange) {\r\n            case TimeRangeEnum.LastMinute:\r\n                return moment().subtract(1, 'minutes');\r\n            case TimeRangeEnum.Last10Minutes:\r\n                return moment().subtract(10, 'minutes');\r\n            case TimeRangeEnum.LastHour:\r\n                return moment().subtract(1, 'hours');\r\n            case TimeRangeEnum.Last24Hours:\r\n                return moment().subtract(1, 'days');\r\n            case TimeRangeEnum.Last7Days:\r\n                return moment().subtract(7, 'days');\r\n            case TimeRangeEnum.Last30Days:\r\n                return moment().subtract(30, 'days');\r\n            case TimeRangeEnum.Last90Days:\r\n                return moment().subtract(90, 'days');\r\n            default:\r\n                return this._timeFrom;\r\n        }\r\n    }\r\n\r\n    // turned out computed properties are memoized, so need to implement this as a method (so that current timestamp is properly returned)\r\n    private getTimeTill(): moment.Moment {\r\n        return (!!this._timeRange || !this._timeTill) ? moment() : this._timeTill;\r\n    }\r\n\r\n    private toArrayOfStrings(val: string): string[] {\r\n        \r\n        if (val.trim().startsWith('[')) {\r\n\r\n            // Treat it as JSON array\r\n            try {\r\n                return JSON.parse(this._filterValue).map(v => `'${v}'`);\r\n            } catch {\r\n            }\r\n        }\r\n\r\n        // Treat it as CSV\r\n        return this._filterValue.split(',').map(v => {\r\n            var value = v.trim();\r\n            return value.startsWith(`'`) ? value : `'${value}'`;\r\n        });\r\n    }\r\n}","\r\n// Helper class for dealing with browser's query string\r\nexport class QueryString {\r\n\r\n    constructor() {\r\n\r\n        const pairs = window.location.search.substr(1).split('&');\r\n        for (var pairString of pairs) {\r\n            const pair = pairString.split('=');\r\n            if (pair.length > 1) {\r\n                this._values[pair[0]] = decodeURIComponent(pair[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    get values(): { [key: string]: string } { return this._values; }\r\n\r\n    apply(): void {\r\n\r\n        var queryString = '';\r\n\r\n        for (var key in this._values) {\r\n            if (!!queryString) {\r\n                queryString += '&';\r\n            }\r\n            queryString += key + '=' + encodeURIComponent(this._values[key]);\r\n        }\r\n\r\n        window.history.replaceState(null, null, !queryString ? '' : '?' + queryString);\r\n    }\r\n\r\n    private _values: { [key: string]: string } = {};\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\nimport { OrchestrationsPathPrefix } from '../states/LoginState';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nconst RoutePrefix = !process.env.REACT_APP_BACKEND_BASE_URI ? (!DfmRoutePrefix ? '/' : `/${DfmRoutePrefix}/`) : process.env.REACT_APP_BACKEND_BASE_URI + '/';\r\nexport const BackendUri = RoutePrefix + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return RoutePrefix + this._getTaskHubName(); }\r\n\r\n    constructor(private _getTaskHubName: () => string, private _getAuthorizationHeaderAsync: () => Promise<{}>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n\r\n        // Two-bugs away\r\n        if (!['get', 'post', 'put'].includes(method.toLowerCase())) {\r\n            return Promise.reject(new Error(`Method ${method} not supported`));\r\n        }\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                // Workaround for https://github.com/Azure/azure-functions-durable-extension/issues/1926\r\n                var hubName = this._getTaskHubName();\r\n                if (hubName.endsWith('TestHubName') && method === 'POST' && url.match(/\\/(orchestrations|restart)$/i)) {\r\n                    // Turning task hub name into lower case, this allows to bypass function name validation\r\n                    hubName = hubName.replace('TestHubName', 'testhubname');\r\n                }\r\n\r\n                // Need to add preceding dash to a plain taskHubName, otherwise it won't route properly\r\n                if (!hubName.includes('-')) {\r\n                    hubName = '--' + hubName;\r\n                }\r\n\r\n                axios.request({\r\n                    url: BackendUri + '/' + hubName + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n\r\n    showDetails(instanceId: string) {\r\n        window.open(`${this.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${instanceId}`);\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nexport const OrchestrationsPathPrefix = `/orchestrations/`;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @computed\r\n    get taskHubName(): string { return this._taskHubName;  }\r\n\r\n    @computed\r\n    get allowedTaskHubNames(): string[] { return this._allowedTaskHubNames; }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    // Returns window.location.pathname minus DFM's client-side routing\r\n    get locationPathName(): string {\r\n\r\n        var result = window.location.pathname;\r\n\r\n        const pos = result.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos >= 0) {\r\n            result = result.substring(0, pos);\r\n        }\r\n\r\n        if (!result.endsWith('/')) {\r\n            result += '/';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Returns the site's root URI (everything _before_ Task Hub name)\r\n    get rootUri(): string {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            const pos = window.location.href.toLowerCase().lastIndexOf('/' + hubName.toLowerCase());\r\n            if (pos >= 0) {\r\n                return window.location.href.substring(0, pos);\r\n            }\r\n        }\r\n\r\n        return window.location.origin +\r\n            (\r\n                window.location.pathname.endsWith('/') ?\r\n                    window.location.pathname.substr(0, window.location.pathname.length - 1) :\r\n                    window.location.pathname\r\n            );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Turning redirects off, as we don't ever need them anyway\r\n        axios.defaults.maxRedirects = 0;\r\n\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(response => this.loginWithEasyAuthConfig(response.data), err => this.showError('Failed to load auth config', err));\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        if (!this._aadApp) {\r\n\r\n            window.location.replace('/.auth/logout');\r\n\r\n        } else {\r\n            \r\n            this._aadApp.logout();\r\n        }\r\n    }\r\n\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        const headers = {};\r\n\r\n        // Adding our custom anti-forgery token.\r\n        // EasyAuth has its own built-in protection against XSRF, so we're doing this only \r\n        // to cover potential cases of hosting DfMon as part of some custom solution _outside_ Azure.\r\n        const xsrfTokenCookieAndHeaderName = 'x-dfm-xsrf-token';\r\n        const match = new RegExp(`${xsrfTokenCookieAndHeaderName}=([^;]+)`)\r\n            .exec(decodeURIComponent(document.cookie));\r\n        \r\n        if (!!match) {\r\n            headers[xsrfTokenCookieAndHeaderName] = match[1];\r\n        }\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<{}>((resolve, reject) => resolve(headers));\r\n        }\r\n\r\n        return new Promise<{}>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    headers['Authorization'] = `Bearer ${accessToken}`;\r\n\r\n                    resolve(headers);\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    @observable\r\n    private _taskHubName: string;\r\n\r\n    @observable\r\n    private _allowedTaskHubNames: string[];\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    private loginWithEasyAuthConfig(config: {userName: string, clientId: string, authority: string}) {\r\n\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost or using server-directed login flow\r\n            // and proceed with no client-side auth\r\n            \r\n            this._userName = config.userName;\r\n\r\n            // Reloading the page upon cookie expiration\r\n            axios.interceptors.response.use(response => response, err => {\r\n\r\n                // Couldn't find a better way to detect this\r\n                if (err.message === 'Network Error') {\r\n                    window.location.reload(true);\r\n                }\r\n\r\n                return Promise.reject(err);\r\n            });\r\n\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority,\r\n                redirectUri: this.rootUri\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, (authErr: Msal.AuthError, accountState: string) => {\r\n\r\n            console.log(`Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`);\r\n        });\r\n\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            this._aadApp.loginRedirect();\r\n\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n        }\r\n    }\r\n\r\n    private initializeTaskHubNameAndConfirmLogin(): void {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            this._taskHubName = hubName;\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Trying to load the list of allowed Task Hubs from the backend\r\n        this.getAuthorizationHeaderAsync().then(headers => {\r\n\r\n            const uri = `${BackendUri}/task-hub-names`;\r\n            axios.get(uri, { headers }).then(response => {\r\n                \r\n                const hubNames: string[] = response.data;\r\n\r\n                if (hubNames.length === 1) {\r\n                    \r\n                    // Redirecting to that Task Hub\r\n                    window.location.pathname = this.locationPathName + hubNames[0];\r\n                } else {\r\n\r\n                    // Asking the user to choose from\r\n                    this._allowedTaskHubNames = hubNames;\r\n                }\r\n\r\n            }, err => this.showError('Failed to load the list of Task Hubs', err));\r\n        });\r\n    }\r\n\r\n    // Extracts Task Hub name from window.location.href, still honoring client-side routing and subpaths\r\n    private tryGetTaskHubName(): string {\r\n\r\n        const locationPathName = this.locationPathName;\r\n\r\n        // If current path ends with DfmRoutePrefix, then it doesn't actually contain Task Hub name\r\n        if (locationPathName.toLowerCase().endsWith(`/${DfmRoutePrefix.toLowerCase()}/`)) {\r\n            return null;\r\n        }\r\n\r\n        const pathParts = locationPathName.split('/').filter(p => !!p);\r\n        if (pathParts.length < 1) {\r\n            return null;\r\n        }\r\n\r\n        // Consider the last path part to be the Task Hub name.\r\n        // This should work even if we're hosted under some subpath\r\n        return pathParts[pathParts.length - 1];\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationsPathPrefix } from '../states/LoginState';\r\nimport { Theme } from '../theme';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, title?: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} className=\"link-with-pointer-cursor\" onClick={this.onLinkClicked} >\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href={`${this.props.backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Button, Dialog, DialogActions, DialogContent, DialogTitle, InputBase\r\n} from '@material-ui/core';\r\n\r\nimport { PrimaryButtonColor } from '../../theme';\r\n\r\nconst MaxJsonLengthToShow = 512;\r\n\r\nexport type LongJsonDialogState = { title?: string, jsonString?: string };\r\n\r\n// Dialog to display long JSON strings\r\n@observer\r\nexport class LongJsonDialog extends React.Component<{ state: LongJsonDialogState }> {\r\n    \r\n    public static formatJson(jsonObject: any): string {\r\n\r\n        if (!jsonObject) {\r\n            return \"\";\r\n        }\r\n\r\n        // Converting from a string inside a string\r\n        if (typeof jsonObject === 'string') {\r\n            try {\r\n                jsonObject = JSON.parse(jsonObject);\r\n            } catch {}\r\n        }\r\n\r\n        return (typeof jsonObject === 'string' ? jsonObject : JSON.stringify(jsonObject, null, 3));\r\n    }\r\n\r\n    public static renderJson(jsonObject: any, dialogTitle: string, dialogState: LongJsonDialogState): JSX.Element {\r\n\r\n        if (!jsonObject) {\r\n            return null;\r\n        }\r\n\r\n        // Converting from a string inside a string\r\n        if (typeof jsonObject === 'string') {\r\n            try {\r\n                jsonObject = JSON.parse(jsonObject);\r\n            } catch {}\r\n        }\r\n\r\n        const jsonString = (typeof jsonObject === 'string' ? jsonObject : JSON.stringify(jsonObject));\r\n        const jsonFormattedString = (typeof jsonObject === 'string' ? jsonObject : JSON.stringify(jsonObject, null, 3));\r\n\r\n        return (<InputBase\r\n            color=\"secondary\"\r\n            className=\"long-text-cell-input\"\r\n            multiline fullWidth rowsMax={4} readOnly\r\n            value={jsonString.substr(0, MaxJsonLengthToShow)}\r\n            onClick={() => {\r\n                dialogState.title = dialogTitle;\r\n                dialogState.jsonString = jsonFormattedString;\r\n            }}\r\n        />);\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog fullWidth={true} maxWidth=\"md\" open={!!state.jsonString} onClose={() => state.jsonString = ''}>\r\n\r\n                <DialogTitle>{state.title}</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <InputBase\r\n                        multiline fullWidth readOnly\r\n                        value={state.jsonString}\r\n                    />                    \r\n                </DialogContent>\r\n                \r\n                <DialogActions>\r\n                    <Button onClick={() => state.jsonString = ''} color={PrimaryButtonColor}>\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n       );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, IconButton, Link, Paper, Table, TableBody, TableCell, TableHead, TableRow,\r\n    TableSortLabel, Typography\r\n} from '@material-ui/core';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { DurableOrchestrationStatusFields } from '../../states/DurableOrchestrationStatus';\r\nimport { OrchestrationLink } from '../OrchestrationLink';\r\nimport { ResultsListTabState } from '../../states/results-view/ResultsListTabState';\r\nimport { DfmContextType } from '../../DfmContext';\r\nimport { RuntimeStatusToStyle } from '../../theme';\r\nimport { DateTimeHelpers } from '../../DateTimeHelpers';\r\nimport { LongJsonDialog } from '../dialogs/LongJsonDialog';\r\nimport { Theme } from '../../theme';\r\n\r\n// Orchestrations list view\r\n@observer\r\nexport class OrchestrationsList extends React.Component<{ state: ResultsListTabState, showLastEventColumn: boolean, backendClient: IBackendClient }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            <FormHelperText className=\"items-count-label\">\r\n                {!!state.orchestrations.length && (<>\r\n                    \r\n                    {state.orchestrations.length} items shown\r\n                \r\n                    {!!state.hiddenColumns.length && (<>\r\n\r\n                        , {state.hiddenColumns.length} columns hidden\r\n\r\n                        (<Link\r\n                            color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} \r\n                            className=\"unhide-button\"\r\n                            component=\"button\"\r\n                            variant=\"inherit\"\r\n                            onClick={() => state.unhide()}\r\n                        >\r\n                            unhide\r\n                        </Link>)\r\n\r\n                    </>)}\r\n\r\n                    {!!state.orderBy && (<>\r\n\r\n                        , sorted by <strong>{state.orderBy} {state.orderByDirection}</strong>\r\n                        \r\n                        (<Link\r\n                            color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} \r\n                            className=\"unhide-button\"\r\n                            component=\"button\"\r\n                            variant=\"inherit\"\r\n                            onClick={() => state.resetOrderBy()}\r\n                        >\r\n                            reset\r\n                        </Link>)\r\n\r\n                    </>)}\r\n\r\n                </>)}\r\n            </FormHelperText>\r\n\r\n            <Paper elevation={0}>\r\n                {this.renderTable(state)}\r\n            </Paper>\r\n\r\n            <LongJsonDialog state={state.longJsonDialogState} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderTable(state: ResultsListTabState): JSX.Element {\r\n\r\n        if (!state.orchestrations.length) {\r\n            return (\r\n                <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                    This list is empty\r\n                </Typography>\r\n            );\r\n        }\r\n\r\n        const visibleColumns = DurableOrchestrationStatusFields\r\n            // hiding artificial 'lastEvent' column, when not used\r\n            .filter(f => this.props.showLastEventColumn ? true : f !== 'lastEvent');\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {visibleColumns.map(col => {\r\n\r\n                            const onlyOneVisibleColumnLeft = visibleColumns.length <= state.hiddenColumns.length + 1;\r\n\r\n                            return !state.hiddenColumns.includes(col) && (\r\n                                <TableCell key={col}\r\n                                    onMouseEnter={() => state.columnUnderMouse = col}\r\n                                    onMouseLeave={() => state.columnUnderMouse = ''}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={state.orderBy === col}\r\n                                        direction={state.orderByDirection}\r\n                                        onClick={() => state.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n\r\n                                        {['createdTime', 'lastUpdatedTime'].includes(col) && (<span className=\"time-zone-name-span\">({this.context.timeZoneName})</span>)}\r\n\r\n                                    </TableSortLabel>\r\n\r\n                                    {state.columnUnderMouse === col && !onlyOneVisibleColumnLeft && (\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size=\"small\"\r\n                                            className=\"column-hide-button\"\r\n                                            onClick={() => state.hideColumn(col)}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                    )}\r\n\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const rowStyle = RuntimeStatusToStyle(orchestration.runtimeStatus);\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                style={rowStyle}\r\n                            >\r\n                                {!state.hiddenColumns.includes('instanceId') && (\r\n                                    <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                        <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={this.props.backendClient} />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('name') && (\r\n                                    <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                        {orchestration.name}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('createdTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {this.context.formatDateTimeString(orchestration.createdTime)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('lastUpdatedTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {this.context.formatDateTimeString(orchestration.lastUpdatedTime)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('duration') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {DateTimeHelpers.formatDuration(orchestration.duration)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('runtimeStatus') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.runtimeStatus}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('lastEvent') && this.props.showLastEventColumn && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.lastEvent}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('input') && (\r\n                                    <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                        {LongJsonDialog.renderJson(orchestration.input, `${orchestration.instanceId} / input`, state.longJsonDialogState)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('output') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        {LongJsonDialog.renderJson(orchestration.output, `${orchestration.instanceId} / output`, state.longJsonDialogState)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('customStatus') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        {LongJsonDialog.renderJson(orchestration.customStatus, `${orchestration.instanceId} / customStatus`, state.longJsonDialogState)}\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport moment from 'moment';\r\n\r\nimport { FormHelperText, Link } from '@material-ui/core';\r\n\r\nimport { XYPlot, XAxis, YAxis, DiscreteColorLegend, VerticalRectSeries, Highlight } from 'react-vis';\r\n\r\nimport { ResultsHistogramTabState } from '../../states/results-view/ResultsHistogramTabState';\r\nimport { DfmContextType } from '../../DfmContext';\r\nimport { Theme } from '../../theme';\r\n\r\n// Orchestrations histogram view\r\n@observer\r\nexport class OrchestrationsHistogram extends React.Component<{ state: ResultsHistogramTabState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n        const typeNames = Object.keys(state.histograms).sort();\r\n\r\n        return (<>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {`${state.numOfInstancesShown} items shown`}\r\n\r\n                {state.zoomedIn && (<>\r\n\r\n                    {', '}\r\n                    <Link\r\n                        color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} \r\n                        className=\"unhide-button\"\r\n                        component=\"button\"\r\n                        variant=\"inherit\"\r\n                        onClick={() => state.resetZoom()}\r\n                    >\r\n                        reset zoom (Ctrl+Z)\r\n                        </Link>\r\n                </>)}\r\n\r\n            </FormHelperText>\r\n\r\n            <XYPlot\r\n                width={window.innerWidth - 40} height={window.innerHeight - 400}\r\n                xType=\"time\"\r\n                stackBy=\"y\"\r\n                margin={{ left: 80, right: 10, top: 20 }}\r\n            >\r\n                {!!state.numOfInstancesShown && (\r\n                    <YAxis tickTotal={7} />\r\n                )}\r\n                <XAxis tickTotal={7} tickFormat={t => this.formatTimeTick(t, state.timeRangeInMilliseconds)} />\r\n\r\n                {typeNames.map(typeName => (<VerticalRectSeries\r\n                    key={typeName}\r\n                    stroke=\"white\"\r\n                    color={this.getColorCodeForInstanceType(typeName)}\r\n                    data={state.histograms[typeName]}\r\n                />))}\r\n\r\n                {!!state.numOfInstancesShown && (\r\n\r\n                    <Highlight\r\n                        color=\"#829AE3\"\r\n                        drag\r\n                        enableY={false}\r\n\r\n                        onDragEnd={(area) => {\r\n                            if (!!area) {\r\n                                state.applyZoom(area.left, area.right);\r\n                            }\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n            </XYPlot>\r\n\r\n            <DiscreteColorLegend\r\n                className={'histogram-legend' + (Theme.palette.type === 'dark' ? ' histogram-legend-dark-mode' : '')}\r\n                colors={typeNames.map(typeName => this.getColorCodeForInstanceType(typeName))}\r\n                items={typeNames.map(typeName => `${typeName} (${state.counts[typeName]})`)}\r\n                orientation=\"horizontal\"\r\n            />\r\n\r\n        </>);\r\n    }\r\n\r\n    private getColorCodeForInstanceType(instanceType: string): string {\r\n\r\n        // Taking hash out of input string (reversed, to make names like 'func1', 'func2' etc. look different)\r\n        var hashCode = 0;\r\n        for (var i = instanceType.length - 1; i >= 0; i--) {\r\n            hashCode = ((hashCode << 5) - hashCode) + instanceType.charCodeAt(i);\r\n            // Convert to positive 32-bit integer\r\n            hashCode &= 0x7FFFFFFF;\r\n        }\r\n\r\n        // min 6 hex digits\r\n        hashCode |= 0x100000;\r\n\r\n        // Not too white\r\n        hashCode &= 0xFFFFEF;\r\n\r\n        return '#' + hashCode.toString(16);\r\n    }\r\n\r\n    private formatTimeTick(t: Date, timeRange: number) {\r\n\r\n        const m = moment(t);\r\n\r\n        if (!this.context.showTimeAsLocal) {\r\n            m.utc();\r\n        }\r\n\r\n        if (timeRange > 5 * 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD');\r\n        }\r\n\r\n        if (timeRange > 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD HH:mm');\r\n        }\r\n\r\n        if (timeRange > 10000) {\r\n\r\n            return m.second() === 0 ? m.format('HH:mm') : m.format('HH:mm:ss');\r\n        }\r\n\r\n        return (m.millisecond() === 0) ? m.format('HH:mm:ss') : m.format(':SSS');\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport { Box, Button, Typography } from '@material-ui/core';\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// A button to save something as an .SVG file\r\nexport class SaveAsSvgButton extends React.Component<{ svg: string, fileName: string, inProgress: boolean, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => this.props.backendClient.call('SaveAs', this.props.fileName + '.svg', this.props.svg)}\r\n                >\r\n                    <SaveIcon />\r\n                    <Box width={20} />\r\n                    <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                </Button>\r\n            );\r\n\r\n        } else {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    href={URL.createObjectURL(new Blob([this.props.svg], { type: 'image/svg+xml' }))}\r\n                    download={this.props.fileName + '.svg'}\r\n                >\r\n                    <SaveIcon />\r\n                    <Box width={20} />\r\n                    <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Appends some styling to SVG code, so it can also be saved as file\r\nexport function getStyledSvg(svg: string): string {\r\n\r\n    return svg.replace('</style>',\r\n        '.note { stroke: none !important; fill: none !important; } ' +\r\n        '.noteText { font-size: 9px !important; } ' +\r\n        '.label > g > text { transform: translateX(25px); }' +\r\n        '</style>'\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport { ResultsGanttDiagramTabState } from '../../states/results-view/ResultsGanttDiagramTabState';\r\nimport { SaveAsSvgButton, getStyledSvg } from '../SaveAsSvgButton';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\n\r\nimport { CustomTabStyle } from '../../theme';\r\n\r\n// Orchestrations Gantt chart view\r\n@observer\r\nexport class OrchestrationsGanttChart extends React.Component<{ state: ResultsGanttDiagramTabState, inProgress: boolean, fileName: string, backendClient: IBackendClient }> {\r\n\r\n    componentDidUpdate() {\r\n\r\n        // Mounting click handlers to diagram nodes\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('task'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskText'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideLeft'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideRight'));\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        if (!state.rawHtml) {\r\n            return null;\r\n        }\r\n\r\n        return (<>\r\n\r\n            <div\r\n                className=\"raw-html-div\"\r\n                style={CustomTabStyle}\r\n                dangerouslySetInnerHTML={{ __html: getStyledSvg(state.rawHtml) }}\r\n            />\r\n\r\n            <Toolbar variant=\"dense\">\r\n\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                >\r\n                    <FileCopyIcon />\r\n                    <Box width={10} />\r\n                    <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                </Button>\r\n\r\n                <Box width={20} />\r\n\r\n                <SaveAsSvgButton\r\n                    svg={getStyledSvg(state.rawHtml)}\r\n                    fileName={this.props.fileName}\r\n                    inProgress={this.props.inProgress}\r\n                    backendClient={this.props.backendClient}\r\n                />\r\n\r\n                <Box width={20} />\r\n            </Toolbar>\r\n        </>);\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n\r\n            const oneBasedInstanceIndex = parseInt(el.id.substr(4));\r\n            el.onclick = () => state.goto(oneBasedInstanceIndex);\r\n\r\n            el.style.cursor = 'pointer';\r\n            el.onmouseenter = (evt) => { (evt.target as HTMLElement).style.strokeOpacity = '0.5'; };\r\n            el.onmouseleave = (evt) => { (evt.target as HTMLElement).style.strokeOpacity = '1'; };\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './FunctionGraph.css';\r\n\r\nimport { FunctionGraphStateBase } from '../states/FunctionGraphStateBase';\r\n\r\n// Generic routines for all pages showing Function Graphs\r\nexport class FunctionGraphBase<P extends { state: FunctionGraphStateBase }> extends React.Component<P> {\r\n\r\n    // Detects graph nodes that look like Functions and executes an action against them\r\n    protected static forEachFunctionNode(nodes: HTMLCollectionOf<Element> | Array<Element>, action: (node: HTMLElement, functionName: string) => void) {\r\n        \r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n\r\n            const match = /flowchart-(.+)-/.exec(el.id);\r\n            if (!!match) {\r\n                action(el, match[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        FunctionGraphBase.forEachFunctionNode(nodes, (el, functionName) => {\r\n\r\n            el.onclick = () => state.gotoFunctionCode(functionName);\r\n\r\n            this.showAsClickable(el);\r\n        })\r\n    }\r\n\r\n    protected showAsClickable(el: HTMLElement) {\r\n        \r\n        el.style.cursor = 'pointer';\r\n        el.onmouseenter = (evt) => { (evt.target as HTMLElement).style.strokeOpacity = '0.5'; };\r\n        el.onmouseleave = (evt) => { (evt.target as HTMLElement).style.strokeOpacity = '1'; };\r\n    }\r\n}","\r\nimport { FunctionGraphStateBase } from '../states/FunctionGraphStateBase';\r\nimport { FunctionGraphBase } from './FunctionGraphBase';\r\n\r\nimport { RuntimeStatusToBadgeStyle } from '../theme';\r\n\r\n// Generic routines for tabs showing Function Graphs\r\nexport class FunctionGraphTabBase<P extends { state: FunctionGraphStateBase }> extends FunctionGraphBase<P> {\r\n\r\n    protected readonly RunningStyle = RuntimeStatusToBadgeStyle('Running');\r\n    protected readonly CompletedStyle = RuntimeStatusToBadgeStyle('Completed');\r\n    protected readonly FailedStyle = RuntimeStatusToBadgeStyle('Failed');\r\n    protected readonly OtherStyle = RuntimeStatusToBadgeStyle('Terminated');\r\n    protected readonly DurationStyle = RuntimeStatusToBadgeStyle('Duration');\r\n\r\n    protected static nodeTypesToHighlight: Array<'orchestrator' | 'entity' | 'activity'> = ['orchestrator', 'entity'];\r\n\r\n    // Handles window and graph resize. Must remain static and shouldn't use 'this'.\r\n    protected static repositionMetricHints() {\r\n\r\n        // Hiding all metrics first\r\n        const allMetricsHintNodes = document.getElementsByClassName('metrics-span');\r\n        for (var i = 0; i < allMetricsHintNodes.length; i++) {\r\n            const metricsHintNode = allMetricsHintNodes[i] as HTMLElement;\r\n            metricsHintNode.style.visibility = 'hidden';\r\n        }\r\n        \r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n        if (!svgElement) {\r\n            return;\r\n        }\r\n\r\n        // Selecting graph node elements that should be decorated with metrich chips\r\n        const instanceNodes = FunctionGraphTabBase.nodeTypesToHighlight.map(nodeType => Array.from(svgElement.getElementsByClassName(nodeType))).flat();\r\n        var isHighlightedAttributeName = '';\r\n  \r\n        FunctionGraphTabBase.forEachFunctionNode(instanceNodes, (instanceNode, functionName) => {\r\n\r\n            const metricsHintNode = document.getElementById(`metrics-hint-${functionName.toLowerCase()}`);\r\n            if (!!metricsHintNode) {\r\n\r\n                // Mark this graph node as highlighed\r\n                isHighlightedAttributeName = 'data-is-highlighted';\r\n                instanceNode.setAttribute(isHighlightedAttributeName, 'true');\r\n\r\n                // Attaching metrics chip to a node\r\n                const instanceNodeRect = instanceNode.getBoundingClientRect();\r\n                \r\n                metricsHintNode.style.visibility = 'visible';\r\n                metricsHintNode.style.left = `${instanceNodeRect.left + 5}px`;\r\n                metricsHintNode.style.top = `${instanceNodeRect.top - 17}px`;\r\n            }\r\n        });\r\n\r\n        // Dimming those nodes that are not highlighted\r\n        if (!!isHighlightedAttributeName) {\r\n            for (var node of Array.from(svgElement.getElementsByClassName('node'))) {\r\n\r\n                (node as HTMLElement).style.opacity = !node.getAttribute(isHighlightedAttributeName) ? '0.6' : '1';\r\n            }\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Chip, FormGroup, FormControlLabel, FormHelperText, Link, Menu, MenuItem, Toolbar, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport './OrchestrationsFunctionGraph.css';\r\n\r\nimport { ResultsFunctionGraphTabState } from '../../states/results-view/ResultsFunctionGraphTabState';\r\nimport { SaveAsSvgButton, getStyledSvg } from '../SaveAsSvgButton';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { FunctionGraphTabBase } from '../FunctionGraphTabBase';\r\n\r\nimport { Theme, CustomTabStyle } from '../../theme';\r\n\r\n// Interactive Function Graph view\r\n@observer\r\nexport class OrchestrationsFunctionGraph extends FunctionGraphTabBase<{ state: ResultsFunctionGraphTabState, inProgress: boolean, fileName: string, backendClient: IBackendClient }> {\r\n\r\n    componentDidMount() {\r\n\r\n        window.addEventListener('resize', OrchestrationsFunctionGraph.repositionMetricHints);\r\n        OrchestrationsFunctionGraph.repositionMetricHints();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        window.removeEventListener('resize', OrchestrationsFunctionGraph.repositionMetricHints);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        OrchestrationsFunctionGraph.repositionMetricHints();\r\n\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('function'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('activity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('entity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('proxy'));\r\n\r\n            this.mountClickEventToOrchestrationNodes(svgElement.getElementsByClassName('orchestrator'));\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            <FormHelperText className=\"link-to-az-func-as-a-graph\" >\r\n                powered by <Link\r\n                    color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} \r\n                    variant=\"inherit\"\r\n                    href=\"https://github.com/scale-tone/az-func-as-a-graph\"\r\n                >\r\n                    az-func-as-a-graph\r\n                </Link>\r\n            </FormHelperText>\r\n\r\n            {!!state.functionsLoaded && (\r\n                <FormGroup row className=\"settings-group\">\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={this.props.inProgress}\r\n                            checked={state.renderFunctions}\r\n                            onChange={(evt) => state.renderFunctions = evt.target.checked}\r\n                        />}\r\n                        label={<Typography color=\"textPrimary\">Show Functions</Typography>}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={this.props.inProgress}\r\n                            checked={state.renderProxies}\r\n                            onChange={(evt) => state.renderProxies = evt.target.checked}\r\n                        />}\r\n                        label={<Typography color=\"textPrimary\">Show Proxies</Typography>}\r\n                    />\r\n\r\n                    {this.renderTotalMetric()}\r\n\r\n                </FormGroup>\r\n            )}\r\n\r\n            {this.renderMetrics()}\r\n\r\n            {!!state.diagramSvg && (<>\r\n                <div\r\n                    className=\"diagram-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.diagramSvg) }}\r\n                />\r\n\r\n                <Toolbar variant=\"dense\">\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        disabled={this.props.inProgress}\r\n                        onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                    >\r\n                        <FileCopyIcon />\r\n                        <Box width={10} />\r\n                        <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                    </Button>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <SaveAsSvgButton\r\n                        svg={getStyledSvg(state.diagramSvg)}\r\n                        fileName={this.props.fileName}\r\n                        inProgress={this.props.inProgress}\r\n                        backendClient={this.props.backendClient}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n                </Toolbar>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    anchorOrigin={{ vertical: 'center', horizontal: 'left' }}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.gotoOrchestrationCode()}>Go to Code</MenuItem>\r\n                    <MenuItem onClick={() => state.startNewInstance()}>Start New Instance...</MenuItem>\r\n                </Menu>\r\n\r\n            </>)}\r\n        </>);\r\n    }\r\n\r\n    private renderTotalMetric(): JSX.Element {\r\n        \r\n        const state = this.props.state;\r\n        const totalMetric = state.metrics[state.TotalMetricsName];\r\n\r\n        return (!!totalMetric && (!!totalMetric.completed || !!totalMetric.running || !!totalMetric.failed || !!totalMetric.other) && (\r\n            <span className=\"total-metrics-span\">\r\n\r\n                <Typography color=\"textPrimary\">Total instances:</Typography>\r\n\r\n                <Box width={10}/>\r\n                \r\n                {!!totalMetric.completed && (\r\n                    <Chip className=\"metrics-chip\" style={this.CompletedStyle} variant=\"outlined\" size=\"small\" label={`${totalMetric.completed} completed`} />\r\n                )}\r\n                {!!totalMetric.running && (\r\n                    <Chip className=\"metrics-chip\" style={this.RunningStyle} variant=\"outlined\" size=\"small\" label={`${totalMetric.running} running`} />\r\n                )}\r\n                {!!totalMetric.failed && (\r\n                    <Chip className=\"metrics-chip\" style={this.FailedStyle} variant=\"outlined\" size=\"small\" label={`${totalMetric.failed} failed`} />\r\n                )}\r\n                {!!totalMetric.other && (\r\n                    <Chip className=\"metrics-chip\" style={this.OtherStyle} variant=\"outlined\" size=\"small\" label={`${totalMetric.other} other`} />\r\n                )}\r\n                \r\n            </span>)\r\n        );\r\n    }\r\n    \r\n    private renderMetrics(): JSX.Element[] {\r\n        \r\n        const state = this.props.state;\r\n\r\n        return Object.keys(state.metrics).map(functionName => {\r\n\r\n            const metric = state.metrics[functionName];\r\n\r\n            return (<span id={`metrics-hint-${functionName.toLowerCase()}`} key={`metrics-hint-${functionName}`} className=\"metrics-span\">\r\n\r\n                {!!metric.completed && (\r\n                    <Tooltip title=\"Number of completed instances\">\r\n                        <Chip className=\"metrics-chip\" style={this.CompletedStyle} variant=\"outlined\" size=\"small\" label={`${metric.completed}`} />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.running && (\r\n                    <Tooltip title=\"Number of running instances\">\r\n                        <Chip className=\"metrics-chip\" style={this.RunningStyle} variant=\"outlined\" size=\"small\" label={`${metric.running}`} />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.failed && (\r\n                    <Tooltip title=\"Number of failed instances\">\r\n                        <Chip className=\"metrics-chip\" style={this.FailedStyle} variant=\"outlined\" size=\"small\" label={`${metric.failed}`} />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.other && (\r\n                    <Tooltip title=\"Number of terminated/cancelled instances\">\r\n                        <Chip className=\"metrics-chip\" style={this.OtherStyle} variant=\"outlined\" size=\"small\" label={`${metric.other}`} />\r\n                    </Tooltip>\r\n                )}\r\n                \r\n            </span>);\r\n        });\r\n    }\r\n\r\n    private mountClickEventToOrchestrationNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        OrchestrationsFunctionGraph.forEachFunctionNode(nodes, (el, functionName) => {\r\n\r\n            el.onclick = () => state.showPopupMenu(el, functionName);\r\n\r\n            this.showAsClickable(el);\r\n        })\r\n    }\r\n}","import { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { CancelToken } from '../../CancelToken';\r\n\r\nexport enum CustomTabTypeEnum {\r\n    RawHtml = 0,\r\n    MermaidDiagram,\r\n    FunctionGraph\r\n}\r\n\r\n// Represents states of custom tabs\r\nexport interface ICustomTabState {\r\n\r\n    name: string;\r\n    description: string;\r\n    rawHtml: string;\r\n    tabType: CustomTabTypeEnum;\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void>;\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, Checkbox, Chip, FormGroup, FormControl, FormControlLabel, Grid,\r\n    InputLabel, LinearProgress, ListItemText, Menu, MenuItem, Select, Tab, Tabs, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DurableOrchestrationStatusFields, RuntimeStatuses } from '../../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from '../ErrorMessage';\r\nimport { OrchestrationsState, ResultsTabEnum, FilterOperatorEnum, TimeRangeEnum } from '../../states/results-view/OrchestrationsState';\r\nimport { ResultsListTabState } from '../../states/results-view/ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from '../../states/results-view/ResultsGanttDiagramTabState';\r\nimport { ResultsHistogramTabState } from '../../states/results-view/ResultsHistogramTabState';\r\nimport { ResultsFunctionGraphTabState } from '../../states/results-view/ResultsFunctionGraphTabState';\r\nimport { OrchestrationsList } from './OrchestrationsList';\r\nimport { OrchestrationsHistogram } from './OrchestrationsHistogram';\r\nimport { OrchestrationsGanttChart } from './OrchestrationsGanttChart';\r\nimport { OrchestrationsFunctionGraph } from './OrchestrationsFunctionGraph';\r\nimport { DfmContextType } from '../../DfmContext';\r\nimport { PrimaryButtonColor } from 'src/theme';\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const state = this.props.state;\r\n\r\n            if (state.tabIndex !== ResultsTabEnum.List ) {\r\n                return;\r\n            }\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                state.loadOrchestrations();\r\n            }\r\n        });\r\n\r\n        // Doing zoom reset\r\n        document.addEventListener('keydown', (evt: any) => {\r\n\r\n            const state = this.props.state;\r\n            if (state.tabIndex === ResultsTabEnum.Histogram && !!evt.ctrlKey && evt.keyCode === 90) {\r\n\r\n                const histogramState = state.selectedTabState as ResultsHistogramTabState;\r\n                histogramState.resetZoom();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n        const listState = state.selectedTabState as ResultsListTabState;\r\n        const histogramState = state.selectedTabState as ResultsHistogramTabState;\r\n        const ganttChartState = state.selectedTabState as ResultsGanttDiagramTabState;\r\n        const functionGraphState = state.selectedTabState as ResultsFunctionGraphTabState;\r\n\r\n        const allStatuses = '[Show All]';\r\n\r\n        return (<>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.LastMinute}>Last Minute</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last10Minutes}>Last 10 Minutes</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.LastHour}>Last Hour</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last24Hours}>Last 24 Hours</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last7Days}>Last 7 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last30Days}>Last 30 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last90Days}>Last 90 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Custom}>Custom</MenuItem>\r\n            </Menu>\r\n            \r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Grid container className=\"toolbar-grid1\">\r\n                        <Grid item xs={12}>\r\n\r\n                            <Button size=\"small\" variant=\"outlined\" className=\"time-period-menu-drop-btn\"\r\n                                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                            >\r\n                                <ArrowDropDownIcon/>\r\n                            </Button>\r\n                            \r\n                            {!!state.timeRange ? (\r\n                                <TextField\r\n                                    className=\"from-input\"\r\n                                    label=\"Time Range\"\r\n                                    InputProps={{ readOnly: true }}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    type=\"text\"\r\n                                    value={this.timeRangeToString(state.timeRange)}\r\n                                />\r\n                            ) : (\r\n                                <KeyboardDateTimePicker\r\n                                    className=\"from-input\"\r\n                                    ampm={false}\r\n                                    autoOk={true}\r\n                                    label={`From (${this.context.timeZoneName})`}\r\n                                    invalidDateMessage=\"\"\r\n                                    format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                    disabled={state.inProgress}\r\n                                    value={this.context.getMoment(state.timeFrom)}\r\n                                    onChange={(t) => state.timeFrom = this.context.setMoment(t)}\r\n                                    onBlur={() => state.applyTimeFrom()}\r\n                                    onAccept={() => state.applyTimeFrom()}\r\n                                    onKeyPress={this.handleKeyPress}\r\n                                />\r\n                            )}\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n\r\n                            {!state.timeRange && (<>\r\n\r\n                                <FormControl>\r\n                                    <Checkbox\r\n                                        id=\"till-checkbox\"\r\n                                        className=\"till-checkbox\"\r\n                                        disabled={state.inProgress}\r\n                                        checked={state.timeTillEnabled}\r\n                                        onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                                    />\r\n                                </FormControl>\r\n\r\n                                {state.timeTillEnabled ? (\r\n                                    <KeyboardDateTimePicker\r\n                                        className=\"till-input\"\r\n                                        ampm={false}\r\n                                        autoOk={true}\r\n                                        label={`Till (${this.context.timeZoneName})`}\r\n                                        invalidDateMessage=\"\"\r\n                                        format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                        disabled={state.inProgress}\r\n                                        value={this.context.getMoment(state.timeTill)}\r\n                                        onChange={(t) => state.timeTill = this.context.setMoment(t)}\r\n                                        onBlur={() => state.applyTimeTill()}\r\n                                        onAccept={() => state.applyTimeTill()}\r\n                                        onKeyPress={this.handleKeyPress}\r\n                                    />\r\n                                ) : (\r\n                                    <TextField\r\n                                        className=\"till-input\"\r\n                                        label={`Till (${this.context.timeZoneName})`}\r\n                                        placeholder=\"[Now]\"\r\n                                        InputLabelProps={{ shrink: true }}\r\n                                        type=\"text\"\r\n                                        disabled={true}\r\n                                    />\r\n                                )}\r\n\r\n                            </>)}\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid2\">\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item-1\">\r\n\r\n                            <FormControl>\r\n                                <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select filtered-column-input\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filteredColumn}\r\n                                    onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                    inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                    <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                    {DurableOrchestrationStatusFields.map(col => {\r\n                                        return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                    })}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n\r\n                            <FormControl className=\"toolbar-grid2-item1-select\">\r\n\r\n                                <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filterOperator}\r\n                                    onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                    inputProps={{ id: \"filter-operator-select\" }}\r\n                                >\r\n                                    <MenuItem value={FilterOperatorEnum.Equals}>Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.StartsWith}>Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.Contains}>Contains</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotEquals}>Not Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotStartsWith}>Not Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotContains}>Not Contains</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.In}>In</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotIn}>Not In</MenuItem>\r\n                                </Select>\r\n\r\n                            </FormControl>\r\n\r\n                            <TextField\r\n                                fullWidth\r\n                                className=\"filter-value-input\"\r\n                                label=\"Filter Value\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                placeholder=\"[some text or 'null']\"\r\n                                disabled={state.filteredColumn === '0' || state.inProgress}\r\n                                value={state.filterValue}\r\n                                onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                                onBlur={() => state.applyFilterValue()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n\r\n                            <FormGroup className=\"toolbar-runtime-status-checkbox-group\">\r\n\r\n                                <InputLabel shrink={true}>Type/Status {!state.showStatuses ? '' : ` (${state.showStatuses.length} selected)`}</InputLabel>\r\n\r\n                                <Select\r\n                                    multiple\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.showStatuses ?? [allStatuses]}\r\n                                    \r\n                                    onChange={(evt) => {\r\n\r\n                                        var newStatuses = (evt.target.value as any);\r\n\r\n                                        if (!!state.showStatuses && newStatuses.includes(allStatuses)) {\r\n\r\n                                            state.showStatuses = null;\r\n\r\n                                        } else {\r\n\r\n                                            newStatuses = newStatuses.filter(s => s != allStatuses);\r\n                                            state.showStatuses = !newStatuses.length ? null : newStatuses;\r\n                                        }\r\n                                    }}\r\n\r\n                                    open={state.isStatusSelectOpen}\r\n                                    onClose={() => {\r\n                                        state.isStatusSelectOpen = false;\r\n                                    }}\r\n                                    onOpen={(evt) => {\r\n                                        state.isStatusSelectOpen = true;\r\n                                    }}\r\n                                    \r\n                                    renderValue={(statuses: any) => {\r\n\r\n                                        const result = [];\r\n\r\n                                        const orchestrationStatuses = statuses.filter(s => s != allStatuses && s != 'DurableEntities');\r\n                                        if (!!orchestrationStatuses.length) {\r\n                                            result.push('Orchestrations: ' + orchestrationStatuses.join(', '));\r\n                                        }\r\n\r\n                                        if (statuses.includes('DurableEntities')) {\r\n                                            result.push('Durable Entities');\r\n                                        }\r\n\r\n                                        return !result.length ? allStatuses : result.join('; ');\r\n                                    }}\r\n                                >\r\n                                    \r\n                                    <MenuItem key={allStatuses} value={allStatuses}>\r\n                                        <Checkbox checked={!state.showStatuses} />\r\n                                        <ListItemText primary={allStatuses} />\r\n                                    </MenuItem>\r\n                                        \r\n                                    {RuntimeStatuses.map(status => (\r\n                                        <MenuItem key={status} value={status}>\r\n                                            <Checkbox checked={!!state.showStatuses && !!state.showStatuses.includes(status)} />\r\n                                            <ListItemText primary={'Orchestrations: ' + status} />\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                        \r\n                                    <MenuItem key=\"DurableEntities\" value=\"DurableEntities\">\r\n\r\n                                    <Checkbox checked={!!state.showStatuses && !!state.showStatuses.includes('DurableEntities')} />\r\n                                        <ListItemText primary=\"Durable Entities\" />\r\n                                    </MenuItem>\r\n                                        \r\n                                </Select>\r\n                            </FormGroup>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid3\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl className=\"form-control-float-right\">\r\n                                <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                                <Select\r\n                                    className=\"autorefresh-select\"\r\n                                    inputProps={{ id: \"auto-refresh-select\" }}\r\n                                    value={state.autoRefresh}\r\n                                    onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                                >\r\n                                    <MenuItem value={0}>Never</MenuItem>\r\n                                    <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                    <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                    <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                            <Button\r\n                                className=\"refresh-button form-control-float-right\"\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                size=\"large\"\r\n                                onClick={() => state.inProgress ? state.cancel() : state.reloadOrchestrations()}\r\n                            >\r\n                                {state.inProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <AppBar color=\"inherit\" position=\"static\">\r\n                <Tabs className=\"tab-buttons\" value={state.tabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.tabIndex = val}>\r\n\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">List</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Time Histogram</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Gantt Chart</Typography>} />\r\n\r\n                    {!!state.isFunctionGraphAvailable && (\r\n                        <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Functions Graph</Typography>} />\r\n                    )}\r\n                    \r\n                </Tabs>\r\n            </AppBar>\r\n\r\n            {state.tabIndex === ResultsTabEnum.List && (<>\r\n\r\n                <OrchestrationsList state={listState} showLastEventColumn={state.showLastEventColumn} backendClient={state.backendClient} />\r\n\r\n                {state.inProgress && !!listState.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                \r\n            </>)}\r\n\r\n            {state.tabIndex === ResultsTabEnum.Histogram &&\r\n                (<OrchestrationsHistogram state={histogramState} />)\r\n            }\r\n            \r\n            {state.tabIndex === ResultsTabEnum.Gantt &&\r\n                (<OrchestrationsGanttChart\r\n                    state={ganttChartState}\r\n                    inProgress={state.inProgress}\r\n                    fileName={`gantt-chart-${state.timeFrom.format('YYYY-MM-DD-HH-mm-ss')}-${state.timeTill.format('YYYY-MM-DD-HH-mm-ss')}`} \r\n                    backendClient={state.backendClient} \r\n                />)\r\n            }\r\n\r\n            {state.tabIndex === ResultsTabEnum.FunctionGraph &&\r\n                (<OrchestrationsFunctionGraph\r\n                    state={functionGraphState}\r\n                    inProgress={state.inProgress}\r\n                    fileName={`function-graph-${state.timeFrom.format('YYYY-MM-DD-HH-mm-ss')}-${state.timeTill.format('YYYY-MM-DD-HH-mm-ss')}`} \r\n                    backendClient={state.backendClient} \r\n                />)\r\n            }\r\n                \r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private timeRangeToString(timeRange: TimeRangeEnum): string {\r\n        switch (timeRange) {\r\n            case TimeRangeEnum.LastMinute: return 'Last Minute';\r\n            case TimeRangeEnum.Last10Minutes: return 'Last 10 Minutes';\r\n            case TimeRangeEnum.LastHour: return 'Last Hour';\r\n            case TimeRangeEnum.Last24Hours: return 'Last 24 Hours';\r\n            case TimeRangeEnum.Last7Days: return 'Last 7 Days';\r\n            case TimeRangeEnum.Last30Days: return 'Last 30 Days';\r\n            case TimeRangeEnum.Last90Days: return 'Last 90 Days';\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../../states/details-view/OrchestrationDetailsState';\r\n\r\nimport { PrimaryButtonColor } from '../../theme';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color={PrimaryButtonColor} size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color={PrimaryButtonColor} size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Send Signal\r\n            </Button>\r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color={PrimaryButtonColor} autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Send Signal</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide signal name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Signal Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Signal Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color={PrimaryButtonColor}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Send\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Grid, TextField } from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../../states/DurableOrchestrationStatus';\r\nimport { RuntimeStatusToStyle } from '../../theme';\r\nimport { LongJsonDialog } from '../dialogs/LongJsonDialog';\r\nimport { DfmContextType } from '../../DfmContext';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId?.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId?.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label={`createdTime (${this.context.timeZoneName})`}\r\n                        value={this.context.formatDateTimeString(details.createdTime)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label={`lastUpdatedTime (${this.context.timeZoneName})`}\r\n                        value={this.context.formatDateTimeString(details.lastUpdatedTime)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={LongJsonDialog.formatJson(details.input)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={LongJsonDialog.formatJson(details.customStatus)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    FormControlLabel, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../../states/details-view/OrchestrationDetailsState';\r\n\r\nimport { PrimaryButtonColor } from '../../theme';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color={PrimaryButtonColor} size=\"medium\" disabled={this.props.disabled} onClick={() => state.restartDialogOpen = true}>\r\n                Restart\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color={PrimaryButtonColor} size=\"medium\" disabled={this.props.disabled} onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color={PrimaryButtonColor} size=\"medium\" disabled={this.props.disabled} onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color={PrimaryButtonColor} size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color={PrimaryButtonColor} size=\"medium\" disabled={this.props.disabled} onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color={PrimaryButtonColor} size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>           \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color={PrimaryButtonColor} autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color={PrimaryButtonColor} autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color={PrimaryButtonColor}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color={PrimaryButtonColor}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color={PrimaryButtonColor} autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.restartDialogOpen}\r\n                onClose={() => state.restartDialogOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Restart</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to restart orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n\r\n                    <FormControlLabel control={<Checkbox\r\n                        checked={state.restartWithNewInstanceId}\r\n                        onChange={(evt) => state.restartWithNewInstanceId = evt.target.checked} />}\r\n                        label=\"Restart with new instanceId\"\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.restartDialogOpen = false} color={PrimaryButtonColor} autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.restart()} color=\"secondary\">\r\n                        Restart\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, Link, Table, TableBody, TableCell, TableHead, TableRow, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../../states/details-view/OrchestrationDetailsState';\r\nimport { HistoryEventFields, HistoryEvent } from '../../states/DurableOrchestrationStatus';\r\nimport { OrchestrationLink } from '../OrchestrationLink';\r\nimport { DfmContextType } from '../../DfmContext';\r\nimport { RuntimeStatusToStyle } from '../../theme';\r\nimport { Theme } from '../../theme';\r\nimport { LongJsonDialog } from '../dialogs/LongJsonDialog';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    componentDidMount() {\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) {\r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 50;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadHistory();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        const totalItems = state.historyTotalCount;\r\n        const details = state.details;\r\n        const history = state.history;\r\n        const itemsShown = history.length;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"instanceId\"\r\n                        value={details.instanceId}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label={`createdTime (${this.context.timeZoneName})`}\r\n                        value={this.context.formatDateTimeString(details.createdTime)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label={`lastUpdatedTime (${this.context.timeZoneName})`}\r\n                        value={this.context.formatDateTimeString(details.lastUpdatedTime)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={LongJsonDialog.formatJson(details.input)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={LongJsonDialog.formatJson(details.output)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={LongJsonDialog.formatJson(details.customStatus)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: { (!totalItems || totalItems === itemsShown) ? `${itemsShown} items${!totalItems ? ' shown' : ''}` : `${itemsShown} of ${totalItems} items shown` }\r\n            </FormHelperText>\r\n\r\n            {!!history.length && this.renderTable(history)}\r\n\r\n            <LongJsonDialog state={state.longJsonDialogState} />\r\n\r\n        </>);\r\n    }\r\n\r\n    private getFunctionName(event: HistoryEvent): string {\r\n\r\n        if (!!event.Name) {\r\n            return event.Name;\r\n        }\r\n\r\n        return event.FunctionName ?? '';\r\n    }\r\n\r\n    private renderEventLink(event: HistoryEvent): JSX.Element | string {\r\n\r\n        const state = this.props.state;\r\n        const functionName = this.getFunctionName(event);\r\n\r\n        if (!!event.SubOrchestrationId) {\r\n            return (<OrchestrationLink orchestrationId={event.SubOrchestrationId}\r\n                title={functionName}\r\n                backendClient={state.backendClient}\r\n            />);\r\n        }\r\n\r\n        if (!!state.functionNames[functionName]) {\r\n            \r\n            // Showing link to sources\r\n            return (<Link className=\"link-with-pointer-cursor\"\r\n                color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'}\r\n                onClick={() => { state.gotoFunctionCode(functionName) }}\r\n            >\r\n                {functionName}\r\n            </Link>);\r\n        }\r\n\r\n        return functionName;\r\n    }\r\n\r\n    private renderTable(events: HistoryEvent[]): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>\r\n\r\n                                {col}\r\n\r\n                                {['Timestamp', 'ScheduledTime'].includes(col) && (<span className=\"time-zone-name-span\">({this.context.timeZoneName})</span>)}\r\n\r\n                            </TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: HistoryEvent, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {this.context.formatDateTimeString(event.Timestamp)}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventId}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {this.renderEventLink(event)}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {this.context.formatDateTimeString(event.ScheduledTime)}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    {LongJsonDialog.renderJson(event.Result, `${event.EventType} / ${this.getFunctionName(event)} / ${HistoryEventFields[5]}`, this.props.state.longJsonDialogState)}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    {LongJsonDialog.renderJson(event.Details, `${event.EventType} / ${this.getFunctionName(event)} / ${HistoryEventFields[6]}`, this.props.state.longJsonDialogState)}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { BackendClient } from '../services/BackendClient';\r\nimport { LoginState, OrchestrationsPathPrefix } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './results-view/OrchestrationsState';\r\nimport { ResultsListTabState } from './results-view/ResultsListTabState';\r\nimport { OrchestrationDetailsState } from './details-view/OrchestrationDetailsState';\r\nimport { FunctionGraphState } from './FunctionGraphState';\r\nimport { PurgeHistoryDialogState } from './dialogs/PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './dialogs/CleanEntityStorageDialogState';\r\nimport { ConnectionParamsDialogState } from './dialogs/ConnectionParamsDialogState';\r\nimport { StartNewInstanceDialogState } from './dialogs/StartNewInstanceDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// Global variables declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\ndeclare const IsFunctionGraphAvailable: boolean;\r\n\r\nenum DfmViewModeEnum {\r\n    DurableFunctions = 0,\r\n    FunctionGraph\r\n}\r\ndeclare const DfmViewMode: DfmViewModeEnum;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    readonly loginState?: LoginState;    \r\n    readonly mainMenuState?: MainMenuState;\r\n    readonly orchestrationsState?: OrchestrationsState;\r\n    readonly orchestrationDetailsState?: OrchestrationDetailsState;\r\n    readonly functionGraphState?: FunctionGraphState;\r\n    readonly purgeHistoryDialogState: PurgeHistoryDialogState;\r\n    readonly cleanEntityStorageDialogState: CleanEntityStorageDialogState;\r\n    readonly connectionParamsDialogState: ConnectionParamsDialogState;\r\n    readonly startNewInstanceDialogState: StartNewInstanceDialogState;\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @computed\r\n    get typedInstanceId(): string {\r\n        return this._typedInstanceId;\r\n    }\r\n    set typedInstanceId(s: string) {\r\n        this._typedInstanceId = s;\r\n        this.reloadSuggestions();\r\n    }\r\n\r\n    @computed\r\n    get suggestions(): string[] {\r\n        return this._suggestions;\r\n    }\r\n\r\n    @computed\r\n    get isExactMatch(): boolean {\r\n        return this._suggestions.length === 1 && this._suggestions[0] === this._typedInstanceId;\r\n    }\r\n    \r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n            this.startNewInstanceDialogState = new StartNewInstanceDialogState(backendClient);\r\n\r\n            if (DfmViewMode === DfmViewModeEnum.FunctionGraph) {\r\n\r\n                this.functionGraphState = new FunctionGraphState(backendClient);\r\n\r\n            } else if (!!this.instanceId) {\r\n\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.instanceId,\r\n                    IsFunctionGraphAvailable,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n                \r\n            } else {\r\n\r\n                this.orchestrationsState = new OrchestrationsState(IsFunctionGraphAvailable,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState & ResultsListTabState>('OrchestrationsState', vsCodeApi),\r\n                    funcName => this.startNewInstanceDialogState.showWithFunctionName(funcName));\r\n\r\n                // This needs to be done after state instances are created, but it needs to be done anyway\r\n                backendClient.setCustomHandlers({\r\n                    purgeHistory: () => this.purgeHistoryDialogState.dialogOpen = true,\r\n                    cleanEntityStorage: () => this.cleanEntityStorageDialogState.dialogOpen = true,\r\n                    startNewInstance: () => this.startNewInstanceDialogState.dialogOpen = true,\r\n                });\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(() => this.loginState.taskHubName, () => this.loginState.getAuthorizationHeaderAsync());\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n            this.connectionParamsDialogState = new ConnectionParamsDialogState(backendClient);\r\n            this.startNewInstanceDialogState = new StartNewInstanceDialogState(backendClient);\r\n\r\n            if (!!this.instanceId) {\r\n\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.instanceId,\r\n                    IsFunctionGraphAvailable,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n                \r\n            } else {\r\n\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState, this.cleanEntityStorageDialogState, this.connectionParamsDialogState, this.startNewInstanceDialogState);\r\n                \r\n                this.orchestrationsState = new OrchestrationsState(IsFunctionGraphAvailable,\r\n                    backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'),\r\n                    funcName => this.startNewInstanceDialogState.showWithFunctionName(funcName));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Opens the entered orchestrationId in a new tab\r\n    goto() {\r\n        window.open(`${this._backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this._typedInstanceId}`);\r\n        this._typedInstanceId = '';\r\n        this._suggestions = [];\r\n    }\r\n\r\n    @observable\r\n    private _suggestions: string[] = [];\r\n    @observable\r\n    private _typedInstanceId: string = '';\r\n\r\n    private readonly _backendClient: IBackendClient;\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get instanceId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const pos = window.location.pathname.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos < 0) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(pos + OrchestrationsPathPrefix.length);\r\n    }\r\n\r\n    // Reloads list of suggested instanceIds\r\n    private reloadSuggestions(): void {\r\n\r\n        if (!this._typedInstanceId || this._typedInstanceId.length < 2) {\r\n            this._suggestions = [];\r\n            return;\r\n        }\r\n\r\n        const uri = `/id-suggestions(prefix='${this._typedInstanceId}')`;\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response || !this._typedInstanceId) {\r\n                this._suggestions = [];\r\n            } else {\r\n                this._suggestions = response;\r\n            }\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Chip, FormGroup, FormControlLabel, FormHelperText, Link, Toolbar, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport { FunctionGraphTabState } from '../../states/details-view/FunctionGraphTabState';\r\nimport { SaveAsSvgButton, getStyledSvg } from '../SaveAsSvgButton';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { DateTimeHelpers } from '../../DateTimeHelpers';\r\nimport { FunctionGraphTabBase } from '../FunctionGraphTabBase';\r\n\r\nimport { CustomTabStyle, Theme } from '../../theme';\r\n\r\n// Interactive Function Graph view\r\n@observer\r\nexport class OrchestrationDetailsFunctionGraph extends FunctionGraphTabBase<{ state: FunctionGraphTabState, inProgress: boolean, fileName: string, backendClient: IBackendClient }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // On details tab we also show metrics for activities, so need to override this\r\n        FunctionGraphTabBase.nodeTypesToHighlight = ['orchestrator', 'entity', 'activity'];\r\n\r\n        window.addEventListener('resize', OrchestrationDetailsFunctionGraph.repositionMetricHints);\r\n        OrchestrationDetailsFunctionGraph.repositionMetricHints();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        window.removeEventListener('resize', OrchestrationDetailsFunctionGraph.repositionMetricHints);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        OrchestrationDetailsFunctionGraph.repositionMetricHints();\r\n\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('function'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('orchestrator'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('activity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('entity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('proxy'));\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            <FormHelperText className=\"link-to-az-func-as-a-graph\" >\r\n                powered by <Link\r\n                    color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} \r\n                    variant=\"inherit\"\r\n                    href=\"https://github.com/scale-tone/az-func-as-a-graph\"\r\n                >\r\n                    az-func-as-a-graph\r\n                </Link>\r\n            </FormHelperText>\r\n\r\n            {!!state.functionsLoaded && (\r\n                <FormGroup row className=\"settings-group\">\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={this.props.inProgress}\r\n                            checked={state.renderFunctions}\r\n                            onChange={(evt) => state.renderFunctions = evt.target.checked}\r\n                        />}\r\n                        label={<Typography color=\"textPrimary\">Show Functions</Typography>}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={this.props.inProgress}\r\n                            checked={state.renderProxies}\r\n                            onChange={(evt) => state.renderProxies = evt.target.checked}\r\n                        />}\r\n                        label={<Typography color=\"textPrimary\">Show Proxies</Typography>}\r\n                    />\r\n\r\n\r\n                </FormGroup>\r\n            )}\r\n\r\n            {this.renderMetrics()}\r\n\r\n            {!!state.diagramSvg && (<>\r\n                <div\r\n                    className=\"diagram-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.diagramSvg) }}\r\n                />\r\n\r\n                <Toolbar variant=\"dense\">\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        disabled={this.props.inProgress}\r\n                        onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                    >\r\n                        <FileCopyIcon />\r\n                        <Box width={10} />\r\n                        <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                    </Button>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <SaveAsSvgButton\r\n                        svg={getStyledSvg(state.diagramSvg)}\r\n                        fileName={this.props.fileName}\r\n                        inProgress={this.props.inProgress}\r\n                        backendClient={this.props.backendClient}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n                </Toolbar>\r\n            </>)}\r\n        </>);\r\n    }\r\n\r\n    private renderMetrics(): JSX.Element[] {\r\n        \r\n        const state = this.props.state;\r\n\r\n        return Object.keys(state.metrics).map(functionName => {\r\n\r\n            const metric = state.metrics[functionName];\r\n            const totalInstances = (metric.completed ?? 0) + (metric.running ?? 0) + (metric.failed ?? 0) + (metric.other ?? 0);\r\n\r\n            return (<span id={`metrics-hint-${functionName.toLowerCase()}`} key={`metrics-hint-${functionName}`} className=\"metrics-span\">\r\n\r\n                {!!metric.completed && (\r\n                    <Tooltip title={totalInstances === 1 ? `runtimeStatus` : `Number of completed instances`}>\r\n                        <Chip className=\"metrics-chip\" style={this.CompletedStyle} variant=\"outlined\" size=\"small\"\r\n                            label={totalInstances === 1 ? `completed` : `${metric.completed}`}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.running && (\r\n                    <Tooltip title={totalInstances === 1 ? `runtimeStatus` : `Number of running instances`}>\r\n                        <Chip className=\"metrics-chip\" style={this.RunningStyle} variant=\"outlined\" size=\"small\"\r\n                            label={totalInstances === 1 ? `running` : `${metric.running}`}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.failed && (\r\n                    <Tooltip title={totalInstances === 1 ? `runtimeStatus` : `Number of failed instances`}>\r\n                        <Chip className=\"metrics-chip\" style={this.FailedStyle} variant=\"outlined\" size=\"small\"\r\n                            label={totalInstances === 1 ? `failed` : `${metric.failed}`}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.other && (\r\n                    <Tooltip title={totalInstances === 1 ? `runtimeStatus` : `Number of terminated/cancelled instances`}>\r\n                        <Chip className=\"metrics-chip\" style={this.OtherStyle} variant=\"outlined\" size=\"small\"\r\n                            label={totalInstances === 1 ? `terminated` : `${metric.other}`}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n\r\n                {!!metric.duration && (\r\n                    <Tooltip title={totalInstances === 1 ? `Duration` : `Max Duration`}>\r\n                        <Chip className=\"metrics-chip\" style={this.DurationStyle} variant=\"outlined\" size=\"small\"\r\n                            label={DateTimeHelpers.formatDuration(metric.duration)}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n                \r\n            </span>);\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, FormControl, InputLabel, LinearProgress, MenuItem,\r\n    Select, Tabs, Tab, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from '../ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../../states/details-view/OrchestrationDetailsState';\r\nimport { FunctionGraphTabState } from '../../states/details-view/FunctionGraphTabState';\r\nimport { CustomTabTypeEnum } from '../../states/details-view/ICustomTabState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\nimport { CustomTabStyle } from '../../theme';\r\nimport { SaveAsSvgButton, getStyledSvg } from '../SaveAsSvgButton';\r\nimport { OrchestrationDetailsFunctionGraph } from './OrchestrationDetailsFunctionGraph';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        // Mounting click handlers to diagram nodes\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('actor'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('messageText'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('task'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskText'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideLeft'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideRight'));\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"details-top-toolbar\">\r\n\r\n                    {state.details.entityType === \"Orchestration\" && (\r\n                        <OrchestrationButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    {state.details.entityType === \"DurableEntity\" && (\r\n                        <DurableEntityButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            inputProps={{ id: 'auto-refresh-select' }}>\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress && !state.loadInProgress}\r\n                        onClick={() => state.loadInProgress ? state.cancel() : state.loadDetails()}\r\n                    >\r\n                        {state.loadInProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {!!state.tabStates.length && (<>\r\n                <AppBar color=\"inherit\" position=\"static\">\r\n                    <Tabs className=\"tab-buttons\" value={state.tabIndex}\r\n                        onChange={(ev: React.ChangeEvent<{}>, val) => {\r\n                            // Link to functions graph should not be selectable\r\n                            if (val !== 'functions-graph-link') {\r\n                                state.tabIndex = val;\r\n                            }\r\n                        }}>\r\n                        \r\n                        <Tab className=\"tab-buttons\" disabled={state.inProgress} \r\n                            label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Details</Typography>}\r\n                        />\r\n                        \r\n                        {state.tabStates.map(tabState => (\r\n                            <Tab className=\"tab-buttons\" key={tabState.name} disabled={state.inProgress} \r\n                                label={<Typography color=\"textPrimary\" variant=\"subtitle2\">{tabState.name}</Typography>}\r\n                            />\r\n                        ))}\r\n\r\n                    </Tabs>\r\n                </AppBar>\r\n            </>)}\r\n\r\n            {!state.tabIndex && state.details.entityType === \"Orchestration\" && (<>\r\n                <OrchestrationFields state={state} />\r\n\r\n                {state.inProgress && !!state.history.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            </>)}\r\n\r\n            {!state.tabIndex && state.details.entityType === \"DurableEntity\" &&\r\n                <DurableEntityFields details={state.details} />\r\n            }\r\n\r\n            {!!state.selectedTab && state.selectedTab.tabType === CustomTabTypeEnum.FunctionGraph && (\r\n\r\n                <OrchestrationDetailsFunctionGraph\r\n                    state={state.selectedTab as FunctionGraphTabState}\r\n                    inProgress={state.inProgress}\r\n                    fileName={state.orchestrationId}\r\n                    backendClient={state.backendClient}\r\n                />\r\n            )}\r\n\r\n            {!!state.selectedTab && state.selectedTab.tabType !== CustomTabTypeEnum.FunctionGraph && !!state.selectedTab.rawHtml && (<>\r\n\r\n                <div\r\n                    className=\"raw-html-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.selectedTab.rawHtml) }}\r\n                />\r\n                \r\n                {state.selectedTab.tabType === CustomTabTypeEnum.MermaidDiagram && (\r\n\r\n                    <Toolbar variant=\"dense\">\r\n                        <Typography style={{ flex: 1 }} />\r\n\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"default\"\r\n                            disabled={state.inProgress}\r\n                            onClick={() => window.navigator.clipboard.writeText(state.selectedTab.description)}\r\n                        >\r\n                            <FileCopyIcon />\r\n                            <Box width={10} />\r\n                            <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                        </Button>\r\n\r\n                        <Box width={20} />\r\n\r\n                        <SaveAsSvgButton\r\n                            svg={getStyledSvg(state.selectedTab.rawHtml)}\r\n                            fileName={state.orchestrationId}\r\n                            inProgress={state.inProgress}\r\n                            backendClient={state.backendClient}\r\n                        />\r\n\r\n                        <Box width={20} />\r\n                    </Toolbar>\r\n                )}\r\n                \r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n            \r\n            var functionName = el.getAttribute('data-function-name');\r\n            if (!functionName) {\r\n                \r\n                functionName = el.innerHTML;\r\n                const match = />(.+)</.exec(functionName);\r\n                if (!!match) {\r\n                    functionName = match[1];\r\n                }\r\n            }\r\n\r\n            if (!!state.functionNames[functionName]) {\r\n\r\n                const closuredFunctionName = functionName;\r\n                el.onclick = () => state.gotoFunctionCode(closuredFunctionName);\r\n\r\n                el.style.cursor = 'pointer';\r\n                el.onmouseenter = (evt) => { (evt.target as HTMLElement).style.strokeOpacity = '0.5'; };\r\n                el.onmouseleave = (evt) => { (evt.target as HTMLElement).style.strokeOpacity = '1'; };\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Box, Button, Checkbox, FormControlLabel, FormHelperText, LinearProgress, Link, Toolbar, Typography } from '@material-ui/core';\r\n\r\nimport './FunctionGraph.css';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { FunctionGraphBase } from './FunctionGraphBase';\r\nimport { FunctionGraphState } from '../states/FunctionGraphState';\r\nimport { CustomTabStyle } from '../theme';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\nimport { Theme } from '../theme';\r\n\r\n// Function Graph view\r\n@observer\r\nexport class FunctionGraph extends FunctionGraphBase<{ state: FunctionGraphState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.load();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        // Mounting click handlers to diagram nodes. Built-in mermaid feature for this doesn't work inside vsCode (no idea why)\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('function'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('orchestrator'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('activity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('entity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('proxy'));\r\n        }\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\">\r\n                    <Box width={20} />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={state.inProgress}\r\n                            checked={state.renderFunctions}\r\n                            onChange={(evt) => state.renderFunctions = evt.target.checked}\r\n                        />}\r\n                        label={<Typography color=\"textPrimary\">Show Functions</Typography>}\r\n                    />\r\n                    <Box width={20} />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={state.inProgress}\r\n                            checked={state.renderProxies}\r\n                            onChange={(evt) => state.renderProxies = evt.target.checked}\r\n                        />}\r\n                        label={<Typography color=\"textPrimary\">Show Proxies</Typography>}\r\n                    />\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => state.load()}\r\n                    >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <FormHelperText className=\"link-to-az-func-as-a-graph\" >\r\n                powered by <Link\r\n                    color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} \r\n                    variant=\"inherit\"\r\n                    href=\"https://github.com/scale-tone/az-func-as-a-graph\"\r\n                >\r\n                    az-func-as-a-graph\r\n                </Link>\r\n            </FormHelperText>\r\n\r\n            {!!state.diagramSvg && (<>\r\n\r\n                <div\r\n                    className=\"diagram-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.diagramSvg) }}\r\n                />\r\n\r\n                <Toolbar variant=\"dense\">\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                    >\r\n                        <FileCopyIcon />\r\n                        <Box width={10} />\r\n                        <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                    </Button>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <SaveAsSvgButton\r\n                        svg={getStyledSvg(state.diagramSvg)}\r\n                        fileName=\"functions.svg\"\r\n                        inProgress={state.inProgress}\r\n                        backendClient={state.backendClient}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => state.saveAsJson()}\r\n                    >\r\n                        <SaveAltIcon />\r\n                        <Box width={10} />\r\n                        <Typography color=\"inherit\">Save as JSON</Typography>\r\n                    </Button>\r\n                    \r\n                </Toolbar>\r\n\r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { ErrorMessage } from '../ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../../states/dialogs/PurgeHistoryDialogState';\r\nimport { DfmContextType } from '../../DfmContext';\r\n\r\nimport { PrimaryButtonColor } from '../../theme';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (<>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                        <DialogContentText>\r\n                            WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                            {state.entityType === \"DurableEntity\" && (\r\n                                <Typography color=\"error\" >\r\n                                    It might as well remove Durable Entities, that are still active.\r\n                                    Ensure that you specify the correct time frame!\r\n                                    To clean up deleted Entities use the 'Clean Entity Storage' command instead. \r\n                                </Typography>\r\n                            )}\r\n\r\n                        </DialogContentText>\r\n\r\n                        <FormControl className=\"purge-history-apply-to\" disabled={state.inProgress} fullWidth>\r\n                            <FormLabel>Apply to:</FormLabel>\r\n                            <RadioGroup row\r\n                                value={state.entityType}\r\n                                onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                            >\r\n                                <FormControlLabel\r\n                                    disabled={state.inProgress}\r\n                                    value={\"Orchestration\"}\r\n                                    control={<Radio />}\r\n                                    label=\"Orchestrations\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    disabled={state.inProgress}\r\n                                    value={\"DurableEntity\"}\r\n                                    control={<Radio />}\r\n                                    label=\"Durable Entities\"\r\n                                />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n\r\n                        <KeyboardDateTimePicker\r\n                            className=\"purge-history-from-input\"\r\n                            ampm={false}\r\n                            autoOk={true}\r\n                            label={state.entityType === 'DurableEntity' ? `Last Updated From (${this.context.timeZoneName})` : `From (${this.context.timeZoneName})`}\r\n                            format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                            variant=\"inline\"\r\n                            disabled={state.inProgress}\r\n                            value={this.context.getMoment(state.timeFrom)}\r\n                            onChange={(t) => state.timeFrom = this.context.setMoment(t)}\r\n                        />\r\n\r\n                        <KeyboardDateTimePicker\r\n                            className=\"purge-history-till-input\"\r\n                            ampm={false}\r\n                            autoOk={true}\r\n                            label={state.entityType === 'DurableEntity' ? `Last Updated Till (${this.context.timeZoneName})` : `Till (${this.context.timeZoneName})`}\r\n                            format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                            variant=\"inline\"\r\n                            disabled={state.inProgress}\r\n                            value={this.context.getMoment(state.timeTill)}\r\n                            onChange={(t) => state.timeTill = this.context.setMoment(t)}\r\n                        />\r\n\r\n                        <FormControl disabled={state.inProgress}>\r\n                            <FormLabel>With the following status:</FormLabel>\r\n\r\n                            {state.entityType === 'Orchestration' && (\r\n                                <FormGroup row>\r\n                                    <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                    <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                    <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                </FormGroup>\r\n                            )}\r\n\r\n                            {state.entityType === 'DurableEntity' && (\r\n                                <FormGroup row>\r\n                                    <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox\r\n                                                checked={true} />}\r\n                                            label=\"Running\"\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Tooltip>\r\n                                </FormGroup>\r\n                            )}\r\n                        </FormControl>\r\n\r\n                        <ErrorMessage state={state} />\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color={PrimaryButtonColor}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                            Purge\r\n                        </Button>\r\n                    </DialogActions>\r\n\r\n                </>)}\r\n\r\n                {state.instancesDeleted !== null && (<>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.instancesDeleted} instances were deleted.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} color={PrimaryButtonColor}>\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, LinearProgress, \r\n} from '@material-ui/core';\r\n\r\nimport './CleanEntityStorageDialog.css';\r\n\r\nimport { ErrorMessage } from '../ErrorMessage';\r\nimport { CleanEntityStorageDialogState } from '../../states/dialogs/CleanEntityStorageDialogState';\r\n\r\nimport { PrimaryButtonColor } from '../../theme';\r\n\r\n// Dialog with parameters for cleaning entity storage\r\n@observer\r\nexport class CleanEntityStorageDialog extends React.Component<{ state: CleanEntityStorageDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Clean Entity Storage</DialogTitle>\r\n\r\n                {!state.response && (<>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                        <DialogContentText>\r\n                            An entity is considered empty, and is removed, if it has no state, is not locked, and has been idle for more than <strong>EntityMessageReorderWindowInMinutes</strong>. Locks are considered orphaned, and are released, if the orchestration that holds them is not in <strong>Running</strong> state.\r\n                        </DialogContentText>\r\n\r\n                        <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                            <FormGroup row>\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.removeEmptyEntities}\r\n                                    onChange={(evt) => state.removeEmptyEntities = evt.target.checked} />}\r\n                                    label=\"Remove Empty Entities\"\r\n                                />\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.releaseOrphanedLocks}\r\n                                    onChange={(evt) => state.releaseOrphanedLocks = evt.target.checked} />}\r\n                                    label=\"Release Orphaned Locks\"\r\n                                />\r\n                                \r\n                            </FormGroup>\r\n                        </FormControl>\r\n\r\n                        <ErrorMessage state={state} />\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color={PrimaryButtonColor}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => state.clean()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                            Clean\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n                {!!state.response && (<>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfEmptyEntitiesRemoved} empty entities removed. \r\n                        </DialogContentText>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfOrphanedLocksRemoved} orphaned locks removed.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} color={PrimaryButtonColor}>\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, LinearProgress, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { ErrorMessage } from '../ErrorMessage';\r\nimport { ConnectionParamsDialogState } from '../../states/dialogs/ConnectionParamsDialogState';\r\n\r\nimport { PrimaryButtonColor } from '../../theme';\r\n\r\n// Dialog for showing connection string and task hub name\r\n@observer\r\nexport class ConnectionParamsDialog extends React.Component<{ state: ConnectionParamsDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<Dialog open={state.dialogOpen} onClose={() => state.dialogOpen = false}>\r\n            \r\n            <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n            <DialogContent>\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                \r\n                <DialogContentText>\r\n                    {\r\n                        state.isReadonly ?\r\n                            \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively)\" :\r\n                            \"The below values will be saved to local.settings.json file.\"\r\n                    }\r\n                </DialogContentText>\r\n\r\n                <TextField\r\n                    className=\"dialog-text-field\"\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    label=\"Hub Name\"\r\n                    fullWidth\r\n                    disabled={state.inProgress}\r\n                    InputProps={{ readOnly: true }}\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={state.hubName}\r\n                    onChange={(evt) => state.hubName = evt.target.value as string}\r\n                />\r\n\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    label=\"Azure Storage Connection String\"\r\n                    fullWidth\r\n                    disabled={state.inProgress}\r\n                    InputProps={{ readOnly: state.isReadonly }}\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={state.connectionString}\r\n                    onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                />\r\n\r\n                <ErrorMessage state={state}/>\r\n\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => state.dialogOpen = false} color={PrimaryButtonColor}>\r\n                    Cancel\r\n                </Button>\r\n\r\n                {(!state.isReadonly) && (\r\n                    <Button\r\n                        onClick={() => state.saveConnectionParams()}\r\n                        disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                        color=\"secondary\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                )}\r\n\r\n            </DialogActions>\r\n                \r\n       </Dialog>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, LinearProgress, TextField\r\n} from '@material-ui/core';\r\n\r\nimport './StartNewInstanceDialog.css';\r\n\r\nimport { ErrorMessage } from '../ErrorMessage';\r\nimport { StartNewInstanceDialogState } from '../../states/dialogs/StartNewInstanceDialogState';\r\n\r\nimport { PrimaryButtonColor } from '../../theme';\r\n\r\n// Dialog for starting a new orchestration instance\r\n@observer\r\nexport class StartNewInstanceDialog extends React.Component<{ state: StartNewInstanceDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<Dialog open={state.dialogOpen} onClose={() => state.dialogOpen = false}>\r\n            \r\n            <DialogTitle>Start New Orchestration Instance</DialogTitle>\r\n\r\n            <DialogContent>\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <TextField\r\n                    className=\"dialog-text-field\"\r\n                    margin=\"dense\"\r\n                    label=\"InstanceId (optional)\"\r\n                    fullWidth\r\n                    disabled={state.inProgress}\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={state.instanceId}\r\n                    onChange={(evt) => state.instanceId = evt.target.value as string}\r\n                />\r\n\r\n                <TextField\r\n                    className=\"dialog-text-field\"\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    label=\"Orchestrator Function Name\"\r\n                    fullWidth\r\n                    disabled={state.inProgress}\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={state.orchestratorFunctionName}\r\n                    onChange={(evt) => state.orchestratorFunctionName = evt.target.value as string}\r\n                />\r\n\r\n                <TextField\r\n                    margin=\"dense\"\r\n                    disabled={state.inProgress}\r\n                    InputLabelProps={{ shrink: true }}\r\n                    label=\"Input (optional JSON)\"\r\n                    fullWidth\r\n                    multiline\r\n                    rows={10}\r\n                    value={state.input}\r\n                    onChange={(evt) => state.input = evt.target.value as string}\r\n                />\r\n\r\n                <ErrorMessage state={state} />\r\n                \r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={() => state.dialogOpen = false} color={PrimaryButtonColor}>\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => state.startNewInstance()} disabled={!state.orchestratorFunctionName} color=\"secondary\">\r\n                    Start\r\n                </Button>\r\n            </DialogActions>\r\n                \r\n       </Dialog>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './results-view/Orchestrations';\r\nimport { OrchestrationDetails } from './details-view/OrchestrationDetails';\r\nimport { FunctionGraph } from './FunctionGraph';\r\nimport { PurgeHistoryDialog } from './dialogs/PurgeHistoryDialog';\r\nimport { CleanEntityStorageDialog } from './dialogs/CleanEntityStorageDialog';\r\nimport { ConnectionParamsDialog } from './dialogs/ConnectionParamsDialog';\r\nimport { StartNewInstanceDialog } from './dialogs/StartNewInstanceDialog';\r\n\r\nimport { DfmContextType, dfmContextInstance } from '../DfmContext';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><DfmContextType.Provider value={dfmContextInstance}>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} doRefresh={() => state.orchestrationsState.reloadOrchestrations()} />\r\n                            )}\r\n\r\n                            <img src={`${!DfmRoutePrefix ? '' : '/'}${DfmRoutePrefix}/logo.svg`} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                <Link color=\"inherit\" href={state.loginState.rootUri}>\r\n                                    Durable Functions Monitor\r\n                                </Link>\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={state.loginState.locationPathName}>\r\n                                    / {state.loginState.taskHubName}\r\n                                </Link>\r\n\r\n                                {!state.orchestrationDetailsState ?\r\n                                    (\r\n                                        <Autocomplete\r\n                                            className=\"instance-id-input\"\r\n                                            freeSolo\r\n                                            options={state.isExactMatch ? [] : state.suggestions}\r\n                                            value={state.typedInstanceId}\r\n                                            onChange={(evt, newValue) => {\r\n                                                state.typedInstanceId = newValue ?? '';\r\n                                                if (!!newValue) {\r\n                                                    state.goto();\r\n                                                }\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    className={state.isExactMatch ? 'instance-id-valid' : null}\r\n                                                    size=\"small\"\r\n                                                    label=\"instanceId to go to...\"\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(evt) => state.typedInstanceId = evt.target.value as string}\r\n                                                    onKeyPress={(evt) => this.handleKeyPress(evt)}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    )\r\n                                    :\r\n                                    (<Typography color=\"inherit\">\r\n                                        <Link color=\"inherit\" href={window.location.pathname}>\r\n                                            {state.orchestrationDetailsState.orchestrationId}\r\n                                        </Link>\r\n                                    </Typography>)\r\n                                }\r\n\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                {!!state.functionGraphState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <FunctionGraph state={state.functionGraphState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n                <CleanEntityStorageDialog state={state.cleanEntityStorageDialogState} />\r\n                <StartNewInstanceDialog state={state.startNewInstanceDialogState} />\r\n\r\n                {!!state.connectionParamsDialogState && (\r\n                    <ConnectionParamsDialog state={state.connectionParamsDialogState} />\r\n                )}           \r\n\r\n            </DfmContextType.Provider></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.goto();\r\n        }\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './dialogs/PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './dialogs/CleanEntityStorageDialogState';\r\nimport { ConnectionParamsDialogState } from './dialogs/ConnectionParamsDialogState';\r\nimport { StartNewInstanceDialogState } from './dialogs/StartNewInstanceDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _purgeHistoryDialogState: PurgeHistoryDialogState,\r\n        private _cleanEntityStorageDialogState: CleanEntityStorageDialogState,\r\n        private _connectionParamsDialogState: ConnectionParamsDialogState,\r\n        private _startNewInstanceDialogState: StartNewInstanceDialogState) {\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this._connectionParamsDialogState.dialogOpen = true;\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    showCleanEntityStorageDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this._cleanEntityStorageDialogState.dialogOpen = true;\r\n    }\r\n\r\n    showStartNewInstanceDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this._startNewInstanceDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n}","import { computed } from 'mobx';\r\n\r\nimport { ICustomTabState, CustomTabTypeEnum } from './ICustomTabState';\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../DurableOrchestrationStatus';\r\nimport { MermaidDiagramStateBase } from '../MermaidDiagramStateBase';\r\nimport { CancelToken } from '../../CancelToken';\r\n\r\n// Base class for all mermaid diagram tab states\r\nexport abstract class MermaidDiagramTabState extends MermaidDiagramStateBase implements ICustomTabState {\r\n\r\n    readonly name: string = \"Diagram\";\r\n    readonly tabType = CustomTabTypeEnum.MermaidDiagram;\r\n\r\n    @computed\r\n    get description(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; };\r\n\r\n    constructor(protected _loadHistory: (orchestrationId: string) => Promise<HistoryEvent[]>) {\r\n        super();\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n        \r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return this._loadHistory(details.instanceId).then(history => {\r\n\r\n            if (!history.length || cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            return this.buildDiagram(details, history, cancelToken);\r\n        });\r\n    }\r\n\r\n    protected abstract buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void>;\r\n}","import mermaid from 'mermaid';\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { dfmContextInstance } from '../../DfmContext';\r\n\r\n// State of Sequence Diagram tab on OrchestrationDetails view\r\nexport class SequenceDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Sequence Diagram\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken) : Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.getSequenceForOrchestration(details.name, '.', details.runtimeStatus === 'Failed', history)).then(sequenceLines => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'sequenceDiagram \\n' + sequenceLines.join('');\r\n\r\n                try {\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private getSequenceForOrchestration(orchestrationName: string, parentOrchestrationName: string, isFailed: boolean, historyEvents: HistoryEvent[]): Promise<string>[] {\r\n\r\n        const externalActor = '.'\r\n        const results: Promise<string>[] = [];\r\n        var nextLine: string;\r\n\r\n        var i = 0;\r\n        while (i < historyEvents.length) {\r\n            const event = historyEvents[i];\r\n\r\n            switch (event.EventType) {\r\n                case 'ExecutionStarted':\r\n\r\n                    nextLine =\r\n                        `${parentOrchestrationName}->>+${orchestrationName}:[ExecutionStarted] \\n` +\r\n                        `Note over ${parentOrchestrationName},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                                        \r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    const subOrchFailed = event.EventType === 'SubOrchestrationInstanceFailed';\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.getSequenceForOrchestration(subOrchestrationName, orchestrationName, subOrchFailed, history)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`${orchestrationName}-x${subOrchestrationName}:[FailedToLoad] \\n`);\r\n                            });\r\n                        }));\r\n\r\n                    } else if (!!subOrchFailed) {\r\n\r\n                        nextLine = `rect rgba(255,0,0,0.4) \\n` +\r\n                        `${orchestrationName}-x${event.FunctionName}:[SubOrchestrationInstanceFailed] \\n` +\r\n                        'end \\n';\r\n\r\n                        results.push(Promise.resolve(nextLine));\r\n                        \r\n                    } else {\r\n\r\n                        nextLine = `${orchestrationName}->>+${event.FunctionName}:[SubOrchestrationInstanceStarted] \\n`;\r\n\r\n                        results.push(Promise.resolve(nextLine));                        \r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    // Trying to aggregate multiple parallel calls\r\n                    var maxDurationInMs = event.DurationInMs;\r\n                    var j = i + 1;\r\n                    for (; j < historyEvents.length &&\r\n                        historyEvents[j].EventType === 'TaskCompleted' &&\r\n                        historyEvents[j].FunctionName === event.FunctionName &&\r\n                        historyEvents[j].ScheduledTime.substr(0, 23) === event.ScheduledTime.substr(0, 23);\r\n                        j++) {\r\n\r\n                        if (maxDurationInMs < historyEvents[j].DurationInMs) {\r\n                            maxDurationInMs = historyEvents[j].DurationInMs;\r\n                        }\r\n                    }\r\n\r\n                    if (j === i + 1) {\r\n\r\n                        const nextLine =\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n                        \r\n                    } else {\r\n\r\n                        const nextLine =\r\n                            `par ${j - i} calls \\n` +\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(maxDurationInMs)} \\n` +\r\n                            `end \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n\r\n                        i = j - 1;\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `rect rgba(255,0,0,0.4) \\n` +\r\n                        `${orchestrationName}-x${orchestrationName}:${event.FunctionName} \\n` + \r\n                        'end \\n';\r\n                    \r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'EventRaised':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:${event.Name} \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TimerFired':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[TimerFired] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionTerminated':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[ExecutionTerminated] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionCompleted':\r\n\r\n                    nextLine =\r\n                        `${orchestrationName}-->>-${parentOrchestrationName}:[${!!isFailed ? 'ExecutionFailed' : 'ExecutionCompleted'}] \\n` +\r\n                        `Note over ${orchestrationName},${parentOrchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n\r\n                    if (!!isFailed) {\r\n                    \r\n                        nextLine = `rect rgba(255,0,0,0.4) \\n` + nextLine + 'end \\n';\r\n                    }\r\n                        \r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatTimestamp(timestamp: string): string {\r\n\r\n        if (timestamp.length <= 11) {\r\n            return timestamp;\r\n        }\r\n\r\n        if (!!dfmContextInstance.showTimeAsLocal) {\r\n            return moment(timestamp).format('(HH:mm:ss.SSS)')\r\n        }\r\n\r\n        return '(' + timestamp.substr(11, 12) + 'Z)';\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { DurableOrchestrationStatus, HistoryEvent, RuntimeStatus } from '../DurableOrchestrationStatus';\r\nimport { ICustomTabState, CustomTabTypeEnum } from './ICustomTabState';\r\nimport { FunctionGraphStateBase, TraversalResult } from '../FunctionGraphStateBase';\r\nimport { buildFunctionDiagramCode } from '../az-func-as-a-graph/buildFunctionDiagramCode';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { MetricsMap, MetricsItem } from '../results-view/ResultsFunctionGraphTabState';\r\n\r\n// State of Functions Graph tab on OrchestrationDetails view\r\nexport class FunctionGraphTabState extends FunctionGraphStateBase implements ICustomTabState {\r\n\r\n    readonly name = \"Functions Graph\";\r\n    readonly tabType = CustomTabTypeEnum.FunctionGraph;\r\n\r\n    @computed\r\n    get description(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; };\r\n\r\n    @computed\r\n    get renderFunctions(): boolean { return this._renderFunctions; };\r\n    set renderFunctions(val: boolean) {\r\n        this._renderFunctions = val;\r\n        this.render();\r\n    };\r\n\r\n    @computed\r\n    get renderProxies(): boolean { return this._renderProxies; };\r\n    set renderProxies(val: boolean) {\r\n        this._renderProxies = val;\r\n        this.render();\r\n    };\r\n\r\n    @computed\r\n    get metrics(): MetricsMap { return this._metrics; }\r\n\r\n    constructor(backendClient: IBackendClient, traversalResult: TraversalResult, private _loadHistory: (orchestrationId: string) => Promise<HistoryEvent[]>) {\r\n        super(backendClient);\r\n        this._traversalResult = traversalResult;\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n\r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        const metrics: MetricsMap = {};\r\n\r\n        return this.render().then(() => {\r\n\r\n            return this._loadHistory(details.instanceId).then(history => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    return;\r\n                }\r\n\r\n                return this.updateMetricsForInstance(metrics, DurableOrchestrationStatus.getFunctionName(details),\r\n                        details.runtimeStatus, new Date(details.lastUpdatedTime).getTime() - new Date(details.createdTime).getTime(),\r\n                        history, cancelToken)\r\n                    .then(() => {\r\n\r\n                        this._metrics = metrics;\r\n                    });\r\n            });\r\n        })\r\n    }\r\n\r\n    @observable\r\n    private _metrics: MetricsMap = {};\r\n\r\n    private updateMetricsForInstance(metrics: MetricsMap,\r\n        funcName: string,\r\n        runtimeStatus: RuntimeStatus,\r\n        durationInMs: number,\r\n        history: HistoryEvent[],\r\n        cancelToken: CancelToken): Promise<void> {\r\n        \r\n        if (!metrics[funcName]) {\r\n            metrics[funcName] = new MetricsItem();\r\n        }\r\n\r\n        switch (runtimeStatus) {\r\n            case 'Completed':\r\n                metrics[funcName].completed++;\r\n                break;\r\n            case 'Running':\r\n            case 'Pending':\r\n            case 'ContinuedAsNew':\r\n                metrics[funcName].running++;\r\n                break;\r\n            case 'Failed':\r\n                metrics[funcName].failed++;\r\n                break;\r\n            default:\r\n                metrics[funcName].other++;\r\n                break;\r\n        }\r\n\r\n        if (metrics[funcName].duration < durationInMs) {\r\n            metrics[funcName].duration = durationInMs;\r\n        }\r\n\r\n        const promises: Promise<void>[] = [];\r\n\r\n        for (var event of history) {\r\n\r\n            const subFuncName = event.FunctionName ?? event.Name;\r\n\r\n            switch (event.EventType) {\r\n                case 'SubOrchestrationInstanceCreated':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        promises.push(this._loadHistory(event.SubOrchestrationId).then(subHistory => {\r\n\r\n                            if (!cancelToken.isCancelled) {\r\n                                return this.updateMetricsForInstance(metrics, subFuncName, \"Running\", 0, subHistory, cancelToken);\r\n                            }\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const durationInMs = new Date(event.Timestamp).getTime() - new Date(event.ScheduledTime).getTime();\r\n\r\n                        promises.push(this._loadHistory(event.SubOrchestrationId).then(subHistory => {\r\n\r\n                            if (!cancelToken.isCancelled) {\r\n                                return this.updateMetricsForInstance(metrics, subFuncName, \"Completed\", durationInMs, subHistory, cancelToken);\r\n                            }\r\n                        }));\r\n                    }\r\n                    \r\n                    break;\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const durationInMs = new Date(event.Timestamp).getTime() - new Date(event.ScheduledTime).getTime();\r\n\r\n                        promises.push(this._loadHistory(event.SubOrchestrationId).then(subHistory => {\r\n\r\n                            if (!cancelToken.isCancelled) {\r\n                                return this.updateMetricsForInstance(metrics, subFuncName, \"Failed\", durationInMs, subHistory, cancelToken);\r\n                            }\r\n                        }));\r\n                    }\r\n                \r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    if (!metrics[subFuncName]) {\r\n                        metrics[subFuncName] = new MetricsItem();\r\n                    }\r\n\r\n                    metrics[subFuncName].completed++;\r\n\r\n                    if (metrics[subFuncName].duration < event.DurationInMs) {\r\n                        metrics[event.FunctionName].duration = event.DurationInMs;\r\n                    }\r\n                    \r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    if (!metrics[subFuncName]) {\r\n                        metrics[subFuncName] = new MetricsItem();\r\n                    }\r\n\r\n                    metrics[subFuncName].failed++;\r\n\r\n                    if (metrics[subFuncName].duration < event.DurationInMs) {\r\n                        metrics[subFuncName].duration = event.DurationInMs;\r\n                    }\r\n                    \r\n                    break;\r\n                case 'TaskScheduled':\r\n\r\n                    if (!metrics[subFuncName]) {\r\n                        metrics[subFuncName] = new MetricsItem();\r\n                    }\r\n\r\n                    metrics[subFuncName].running++;\r\n                    \r\n                    break;\r\n            }                   \r\n        }\r\n\r\n        return Promise.all(promises) as any;\r\n    }\r\n    \r\n    private render(): Promise<void> {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            try {\r\n                const diagramCode = buildFunctionDiagramCode(this._traversalResult.functions, this._traversalResult.proxies,\r\n                    {\r\n                        doNotRenderFunctions: !this._renderFunctions,\r\n                        doNotRenderProxies: !this._renderProxies\r\n                    });\r\n    \r\n                if (!diagramCode) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n    \r\n                this._diagramCode = `graph LR\\n${diagramCode}`;\r\n    \r\n                mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n    \r\n                    this._diagramSvg = this.applyIcons(svg);\r\n\r\n                    resolve();\r\n                });\r\n    \r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n}","import mermaid from 'mermaid';\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { dfmContextInstance } from '../../DfmContext';\r\n\r\ntype LineTextAndMetadata = { nextLine: string, functionName?: string, instanceId?: string, parentInstanceId?: string, duration?: number, widthPercentage?: number };\r\n\r\n// State of Gantt Diagram tab on OrchestrationDetails view\r\nexport class GanttDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Gantt Chart\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.renderOrchestration(details.instanceId, details.name, history, true)).then(arrayOfArrays => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                const lines = arrayOfArrays.flat();\r\n                const linesWithMetadata = lines.filter(l => !!l.functionName);\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title ${details.name}(${details.instanceId}) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss.SSS \\n' +\r\n                    lines.map(item => item.nextLine).join('');\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n\r\n                        svg = this.injectFunctionNameAttributes(svg, linesWithMetadata);\r\n                        svg = this.adjustIntervalsSmallerThanOneSecond(svg, linesWithMetadata);\r\n\r\n                        this._diagramSvg = svg;\r\n\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Adds data-function-name attributes to diagram lines, so that Function names can be further used by rendering\r\n    private injectFunctionNameAttributes(svg: string, linesWithMetadata: LineTextAndMetadata[]): string {\r\n        \r\n        return svg.replace(new RegExp(`<(rect|text) id=\"task([0-9]+)(-text)?\"`, 'gi'), (match, tagName, taskIndex) => {\r\n\r\n            const oneBasedLineIndex = parseInt(taskIndex);\r\n\r\n            if (oneBasedLineIndex <= 0 || oneBasedLineIndex > linesWithMetadata.length) {\r\n                return match;\r\n            }\r\n\r\n            const lineMetadata = linesWithMetadata[oneBasedLineIndex - 1];\r\n            if (!lineMetadata.functionName) {\r\n                return match;\r\n            }\r\n\r\n            return match + ` data-function-name=\"${lineMetadata.functionName}\"`;\r\n        });\r\n    }\r\n\r\n    // Workaround for mermaid being unable to render intervals shorter than 1 second\r\n    private adjustIntervalsSmallerThanOneSecond(svg: string, linesWithMetadata: LineTextAndMetadata[]): string {\r\n\r\n        return svg.replace(new RegExp(`<rect id=\"task([0-9]+)\" [^>]+ width=\"([0-9]+)\"`, 'gi'), (match, taskIndex, activityWidth) => {\r\n\r\n            const oneBasedLineIndex = parseInt(taskIndex);\r\n\r\n            if (oneBasedLineIndex <= 0 || oneBasedLineIndex > linesWithMetadata.length) {\r\n                return match;\r\n            }\r\n\r\n            const activityMetadata = linesWithMetadata[oneBasedLineIndex - 1];\r\n            if (!activityMetadata.parentInstanceId || !activityMetadata.widthPercentage || (activityMetadata.duration > 10000)) {\r\n                return match;\r\n            }\r\n\r\n            // now we need to figure out the width (in pixels) of parent orchestration line\r\n            const orchIndex = linesWithMetadata.findIndex(l => l.instanceId === activityMetadata.parentInstanceId);\r\n            if (orchIndex < 0) {\r\n                return match;\r\n            }\r\n\r\n            const orchMatch = new RegExp(`<rect id=\"task${orchIndex + 1}\" [^>]+ width=\"([0-9]+)\"`, 'i').exec(svg);\r\n            if (!orchMatch) {\r\n                return match;\r\n            }\r\n\r\n            const orchWidth = parseInt(orchMatch[1]);\r\n            const newActivityWidth = activityMetadata.widthPercentage > 1 ? orchWidth : Math.ceil(orchWidth * activityMetadata.widthPercentage);\r\n\r\n            return match.replace(`width=\"${activityWidth}\"`, `width=\"${newActivityWidth.toFixed(0)}\"`)\r\n        });\r\n    }\r\n\r\n    private renderOrchestration(orchestrationId: string, orchestrationName: string, historyEvents: HistoryEvent[], isParentOrchestration: boolean):\r\n        Promise<LineTextAndMetadata[]>[] {\r\n\r\n        const results: Promise<LineTextAndMetadata[]>[] = [];\r\n\r\n        const startedEvent = historyEvents.find(event => event.EventType === 'ExecutionStarted');\r\n        const completedEvent = historyEvents.find(event => event.EventType === 'ExecutionCompleted');\r\n\r\n        var needToAddAxisFormat = isParentOrchestration;\r\n        var nextLine: string;\r\n        var orchDuration = 0;\r\n\r\n        if (!!startedEvent && !!completedEvent) {\r\n\r\n            if (needToAddAxisFormat) {\r\n\r\n                const longerThanADay = completedEvent.DurationInMs > 86400000;\r\n                nextLine = longerThanADay ? 'axisFormat %Y-%m-%d %H:%M \\n' : 'axisFormat %H:%M:%S \\n';\r\n                results.push(Promise.resolve([{ nextLine }]));\r\n                needToAddAxisFormat = false;\r\n            }\r\n            \r\n            nextLine = isParentOrchestration ? '' : `section ${orchestrationName}(${this.escapeTitle(orchestrationId)}) \\n`;\r\n\r\n            var lineName = this.formatDuration(completedEvent.DurationInMs);\r\n            if (!lineName) {\r\n                lineName = this.formatLineName(orchestrationName);\r\n            }\r\n\r\n            nextLine += `${lineName}: ${isParentOrchestration ? '' : 'active,'} ${this.formatDateTime(startedEvent.Timestamp)}, ${this.formatDurationInSeconds(completedEvent.DurationInMs)} \\n`;\r\n            results.push(Promise.resolve([{ nextLine, functionName: orchestrationName, instanceId: orchestrationId }]));\r\n            \r\n            orchDuration = completedEvent.DurationInMs;\r\n        }\r\n\r\n        if (needToAddAxisFormat) {\r\n\r\n            nextLine = 'axisFormat %H:%M:%S \\n';\r\n            results.push(Promise.resolve([{ nextLine }]));\r\n        }\r\n\r\n        for (var event of historyEvents) {\r\n\r\n            var eventTimestamp = event.ScheduledTime;\r\n\r\n            // Sometimes activity timestamp might appear to be earlier than orchestration start (due to machine time difference, I assume),\r\n            // and that breaks the diagram\r\n            if (!!startedEvent && (Date.parse(eventTimestamp) < Date.parse(startedEvent.Timestamp))) {\r\n                eventTimestamp = startedEvent.Timestamp;\r\n            }\r\n        \r\n            switch (event.EventType) {\r\n                case 'SubOrchestrationInstanceCompleted':\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n                        \r\n                        results.push(new Promise<LineTextAndMetadata[]>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.renderOrchestration(subOrchestrationId, subOrchestrationName, history, false)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.flat());\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve([{ nextLine: `%% Failed to load ${this.formatLineName(subOrchestrationName)}. ${err.message} \\n` }]);\r\n                            });\r\n                        }));\r\n\r\n                        nextLine = `section ${orchestrationName}(${this.escapeTitle(orchestrationId)}) \\n`;\r\n                        results.push(Promise.resolve([{ nextLine }]));\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    nextLine = `${this.formatLineName(event.FunctionName)} ${this.formatDuration(event.DurationInMs)}: done, ${this.formatDateTime(eventTimestamp)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve([{\r\n                        nextLine,\r\n                        functionName: event.FunctionName,\r\n                        parentInstanceId: orchestrationId,\r\n                        duration: event.DurationInMs,\r\n                        widthPercentage: orchDuration ? event.DurationInMs / orchDuration : 0\r\n                    }]));\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `${this.formatLineName(event.FunctionName)} ${this.formatDuration(event.DurationInMs)}: crit, ${this.formatDateTime(eventTimestamp)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve([{\r\n                        nextLine,\r\n                        functionName: event.FunctionName,\r\n                        parentInstanceId: orchestrationId,\r\n                        duration: event.DurationInMs,\r\n                        widthPercentage: orchDuration ? event.DurationInMs / orchDuration : 0\r\n                    }]));\r\n\r\n                    break;\r\n                    case 'TimerFired':\r\n\r\n                        nextLine = `[TimerFired]: done, ${this.formatDateTime(event.Timestamp)}, 1s \\n`;\r\n                        results.push(Promise.resolve([{\r\n                            nextLine,\r\n                            functionName: orchestrationName,\r\n                            parentInstanceId: orchestrationId,\r\n                            duration: 1,\r\n                            widthPercentage: 0.0001\r\n                        }]));\r\n    \r\n                        break;\r\n                }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatDateTime(utcDateTimeString: string): string {\r\n\r\n        if (!dfmContextInstance.showTimeAsLocal) {\r\n            return utcDateTimeString.substr(0, 23);\r\n        }\r\n\r\n        return moment(utcDateTimeString).format('YYYY-MM-DDTHH:mm:ss.SSS')\r\n    }\r\n\r\n    private formatLineName(name: string): string {\r\n\r\n        return name.replace(/:/g, '-');\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { ICustomTabState, CustomTabTypeEnum } from './ICustomTabState';\r\nimport { CancelToken } from '../../CancelToken';\r\n\r\n// State of a custom liquid markup tab on OrchestrationDetails view\r\nexport class LiquidMarkupTabState implements ICustomTabState {\r\n\r\n    name: string = \"\";\r\n    readonly description = \"\";\r\n    readonly tabType = CustomTabTypeEnum.RawHtml;\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._rawHtml; };\r\n\r\n    constructor(private _orchestrationId: string, private _backendClient: IBackendClient) {\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/custom-tab-markup('${this.name}')`;\r\n        return this._backendClient.call('POST', uri).then(response => {\r\n\r\n            if (!cancelToken.isCancelled) {\r\n               \r\n                this._rawHtml = response;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _rawHtml: string;\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from '../ErrorMessageState';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { ITypedLocalStorage } from '../ITypedLocalStorage';\r\nimport { SequenceDiagramTabState } from './SequenceDiagramTabState';\r\nimport { FunctionGraphTabState } from './FunctionGraphTabState';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { GanttDiagramTabState } from './GanttDiagramTabState';\r\nimport { LiquidMarkupTabState } from './LiquidMarkupTabState';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { FunctionsMap } from '../az-func-as-a-graph/FunctionsMap';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get tabIndex(): number { return this._tabIndex; }\r\n    set tabIndex(val: number) {\r\n\r\n        if (this._tabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._tabIndex = val;\r\n        this._localStorage.setItem('tabIndex', val.toString());\r\n\r\n        if (!!this.selectedTab) {\r\n\r\n            this.loadCustomTab();\r\n\r\n        } else if (!this._history.length) {\r\n\r\n            this.loadHistory();\r\n        }\r\n    }\r\n\r\n    get selectedTab(): ICustomTabState {\r\n        return !this._tabIndex ? null : this._tabStates[this._tabIndex - 1];\r\n    }\r\n\r\n    @computed\r\n    get details(): DurableOrchestrationStatus { return this._details; }\r\n\r\n    @computed\r\n    get history(): HistoryEvent[] { return this._history; }\r\n\r\n    @computed\r\n    get historyTotalCount(): number { return this._historyTotalCount; }\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get loadInProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress || this.loadInProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        if (!!val) {\r\n            this.eventName = '';\r\n            this.eventData = '';\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        if (!!val) {\r\n            this.newCustomStatus = !!this._details.customStatus ? JSON.stringify(this._details.customStatus) : '';\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get restartDialogOpen(): boolean { return this._restartDialogOpen; }\r\n    set restartDialogOpen(val: boolean) {\r\n        this._restartDialogOpen = val;\r\n        if (!!val) {\r\n            this.restartWithNewInstanceId = true;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this._details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this._details.customStatus);\r\n    }\r\n\r\n    @computed\r\n    get functionNames(): { [name: string]: any } { return this._functionMap; };\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n    @observable\r\n    restartWithNewInstanceId: boolean = true;\r\n\r\n    @observable\r\n    longJsonDialogState = {};\r\n\r\n    @computed\r\n    get tabStates(): ICustomTabState[] { return this._tabStates; }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _isFunctionGraphAvailable: boolean,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const tabIndexString = this._localStorage.getItem('tabIndex');\r\n        if (!!tabIndexString) {\r\n            this._tabIndex = Number(tabIndexString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.showError('Failed to rewind', err);\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.showError('Failed to terminate', err);\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this._history = [];\r\n            this._details = new DurableOrchestrationStatus();\r\n            this._tabStates = [];\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.showError('Failed to purge', err);\r\n        });\r\n    }\r\n\r\n    restart() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/restart`;\r\n        const requestBody = { restartWithNewInstanceId: this.restartWithNewInstanceId };\r\n\r\n        this.restartDialogOpen = false;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.showError('Failed to restart', err);\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.showError('Failed to parse event data', err);\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.showError('Failed to raise an event', err);\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.showError('Failed to parse custom status', err);\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.showError('Failed to set custom status', err);\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) { // We might end up here, if next timer occurs while a custom tab is still loading\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n            return;\r\n        }\r\n\r\n        this._inProgress = true;\r\n        this._noMorePagesToLoad = false;\r\n\r\n        if (!this._autoRefresh && (!this.selectedTab)) {\r\n            \r\n            this._history = [];\r\n            this._historyTotalCount = 0;\r\n        }\r\n\r\n        const functionMapPromise = !!this._isFunctionGraphAvailable ? this._backendClient.call('GET', `/function-map`) : Promise.resolve(null);\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n        return Promise.all([this._backendClient.call('GET', uri), functionMapPromise]).then(responses => {\r\n        \r\n            this._details = responses[0];\r\n            const traversalResult = responses[1];\r\n\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n\r\n            var tabStateIndex = 0;\r\n\r\n            // Loading sequence diagram tab\r\n            if (this._details.entityType === \"Orchestration\") {\r\n               \r\n                if (this._tabStates.length <= tabStateIndex) {\r\n                    this._tabStates.push(new SequenceDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                    this._tabStates.push(new GanttDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                }\r\n                tabStateIndex += 2;\r\n            }\r\n\r\n            // Functions Graph tab\r\n            if (!!traversalResult) {\r\n\r\n                this._functionMap = traversalResult.functions;\r\n\r\n                const functionName = DurableOrchestrationStatus.getFunctionName(this._details);\r\n        \r\n                // Entities have their names lowered, so we need to do a case-insensitive match\r\n                const shownFunctionNames = Object.keys(traversalResult.functions).map(fn => fn.toLowerCase());\r\n                \r\n                // Only showing Functions Graph, if currently opened instance is shown on it\r\n                if (shownFunctionNames.includes(functionName.toLowerCase())) {\r\n                    \r\n                    if (this._tabStates.length <= tabStateIndex) {\r\n                        this._tabStates.push(new FunctionGraphTabState(this._backendClient, traversalResult, (orchId) => this.loadAllHistory(orchId)));\r\n                    }\r\n                    tabStateIndex++;\r\n                }\r\n            }\r\n\r\n            // Loading custom tabs\r\n            if (!!this._details.tabTemplateNames) {\r\n                for (var templateName of this._details.tabTemplateNames) {\r\n\r\n                    if (this._tabStates.length <= tabStateIndex) {\r\n                        this._tabStates.push(new LiquidMarkupTabState(this._orchestrationId, this._backendClient));\r\n                    }\r\n                    this._tabStates[tabStateIndex].name = templateName;\r\n                    tabStateIndex++;\r\n                }                \r\n            }\r\n\r\n            // Ensuring tab index does not go out of sync\r\n            if (this._tabIndex < 0 || this._tabIndex > this._tabStates.length) {\r\n                this._tabIndex = 0;\r\n            }\r\n\r\n            this._inProgress = false;\r\n\r\n            if (!this.selectedTab) {\r\n                \r\n                this.loadHistory(!!this._autoRefresh);\r\n\r\n            } else {\r\n\r\n                this.loadCustomTab();\r\n            }\r\n            \r\n        }, err => {\r\n            this._inProgress = false;\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.showError('Load failed', err);\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadHistory(isAutoRefresh: boolean = false): void {\r\n\r\n        if (!!this.inProgress || !!this.selectedTab || !!this._noMorePagesToLoad) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._history.length;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/history?$top=${this._pageSize}&$skip=${skip}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            this._historyTotalCount = response.totalCount;\r\n\r\n            if (isAutoRefresh) {\r\n                this._history = response.history;\r\n            } else {\r\n                this._history.push(...response.history);\r\n\r\n                if (response.history.length < this._pageSize) {\r\n\r\n                    // Stop the infinite scrolling\r\n                    this._noMorePagesToLoad = true;\r\n                }\r\n            }\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.showError('Failed to load history', err);\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    gotoFunctionCode(functionName: string): void {\r\n\r\n        if (this.backendClient.isVsCode) {\r\n            \r\n            this.backendClient.call('GotoFunctionCode', functionName).then(() => {}, err => {\r\n                console.log(`Failed to goto function code: ${err.message}`);\r\n            });\r\n    \r\n        } else {\r\n\r\n            var func = this._functionMap[functionName];\r\n\r\n            if (!!func && !!func.filePath) {\r\n                window.open(func.filePath);\r\n            }\r\n        }\r\n    }\r\n\r\n    showFunctionsGraph(): void {\r\n\r\n        this.backendClient.call('VisualizeFunctionsAsAGraph', '').then(() => {}, err => {\r\n            console.log(`Failed to goto functions graph: ${err.message}`);\r\n        });\r\n    }\r\n\r\n    private loadCustomTab(): void {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        this.selectedTab.load(this._details, cancelToken).then(() => {}, err => { \r\n                \r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.showError('Failed to load tab', err);\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    private setAutoRefresh(): void {\r\n\r\n        if (!this._autoRefresh) {\r\n            return;\r\n        }\r\n\r\n        if (!!this._autoRefreshToken) {\r\n            clearTimeout(this._autoRefreshToken);\r\n        }\r\n        this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n    }\r\n\r\n    private loadAllHistory(orchestrationId: string): Promise<HistoryEvent[]> {\r\n\r\n        const uri = `/orchestrations('${orchestrationId}')/history`;\r\n        return this._backendClient.call('GET', uri).then(response => response.history);\r\n    }\r\n\r\n    @observable\r\n    private _tabStates: ICustomTabState[] = [];\r\n\r\n    @observable\r\n    private _details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n    @observable\r\n    private _history: HistoryEvent[] = [];\r\n    @observable\r\n    private _tabIndex: number = 0;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n    @observable\r\n    private _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _restartDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _historyTotalCount: number = 0;\r\n    @observable\r\n    private _functionMap: FunctionsMap = {};\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 200;\r\n}","import { observable, computed } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\nimport { buildFunctionDiagramCode } from './az-func-as-a-graph/buildFunctionDiagramCode';\r\nimport { FunctionGraphStateBase } from './FunctionGraphStateBase';\r\n\r\n// State of FunctionGraph view\r\nexport class FunctionGraphState extends FunctionGraphStateBase {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get functionsLoaded(): boolean { return !!this._traversalResult; };\r\n\r\n    @computed\r\n    get renderFunctions(): boolean { return this._renderFunctions; };\r\n    set renderFunctions(val: boolean) {\r\n        this._renderFunctions = val;\r\n        this.render();\r\n    };\r\n\r\n    @computed\r\n    get renderProxies(): boolean { return this._renderProxies; };\r\n    set renderProxies(val: boolean) {\r\n        this._renderProxies = val;\r\n        this.render();\r\n    };\r\n    \r\n    render() {\r\n        \r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n        this.errorMessage = '';\r\n\r\n        if (!this._traversalResult) {\r\n            return;\r\n        }\r\n\r\n        this._inProgress = true;\r\n        try {\r\n            const diagramCode = buildFunctionDiagramCode(this._traversalResult.functions, this._traversalResult.proxies,\r\n                {\r\n                    doNotRenderFunctions: !this._renderFunctions,\r\n                    doNotRenderProxies: !this._renderProxies\r\n                });\r\n\r\n            if (!diagramCode) {\r\n                this._inProgress = false;\r\n                return;\r\n            }\r\n\r\n            this._diagramCode = `graph LR\\n${diagramCode}`;\r\n\r\n            mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n\r\n                this._diagramSvg = this.applyIcons(svg);\r\n\r\n                this._inProgress = false;\r\n            });\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to render: ${err.message}`;\r\n            this._inProgress = false;\r\n        }\r\n    }\r\n\r\n    load() {\r\n\r\n        if (this._inProgress) {\r\n            return;\r\n        }\r\n\r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        this._inProgress = true;\r\n        this.errorMessage = '';\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n        this._traversalResult = null;\r\n\r\n        this._backendClient.call('GET', '/function-map').then(response => {\r\n\r\n            this._traversalResult = response;\r\n            this.render();\r\n\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to traverse. ${!err.response ? err.message : err.response.data}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../../DateTimeHelpers';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from '../DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from '../ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => this.showError('Purge history failed', err))\r\n        .finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { ErrorMessageState } from '../ErrorMessageState';\r\n\r\n// State of Clean Entity Storage Dialog\r\nexport class CleanEntityStorageDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(isOpen: boolean) {\r\n        this._dialogOpen = isOpen;\r\n\r\n        if (isOpen) {\r\n            this._response = null;\r\n            this.removeEmptyEntities = true;\r\n            this.releaseOrphanedLocks = true;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get response(): CleanEntityStorageResponse | null { return this._response; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return true;\r\n    };\r\n\r\n    @observable\r\n    removeEmptyEntities: boolean;\r\n    @observable\r\n    releaseOrphanedLocks: boolean;\r\n    \r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    clean() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/clean-entity-storage', {\r\n            removeEmptyEntities: this.removeEmptyEntities,\r\n            releaseOrphanedLocks: this.releaseOrphanedLocks\r\n        }).then(response => {\r\n            this._response = response;\r\n        }, err => this.showError('Clean Entity Storage failed', err))\r\n        .finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _response: CleanEntityStorageResponse | null = null;\r\n}\r\n\r\nexport class CleanEntityStorageResponse\r\n{\r\n    numberOfEmptyEntitiesRemoved: number;\r\n    numberOfOrphanedLocksRemoved: number;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { ErrorMessageState } from '../ErrorMessageState';\r\n\r\n// State of Connection Params Dialog\r\nexport class ConnectionParamsDialogState extends ErrorMessageState {\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (!!value) {\r\n\r\n            this._inProgress = true;\r\n\r\n            this._backendClient.call('GET', '/manage-connection').then(response => {\r\n    \r\n                this.connectionString = this._oldConnectionString = response.connectionString;\r\n                this.hubName = this._oldHubName = response.hubName;\r\n                this._isReadOnly = response.isReadOnly;\r\n    \r\n            }, err => this.showError('Load failed', err))\r\n            .finally(() => {\r\n                this._inProgress = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n    \r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this._dialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => this.showError('Save failed', err))\r\n        .finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n\r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { ErrorMessageState } from '../ErrorMessageState';\r\n\r\n// State of New Orchestration Instance Dialog\r\nexport class StartNewInstanceDialogState extends ErrorMessageState {\r\n\r\n    @observable\r\n    instanceId: string;\r\n    @observable\r\n    orchestratorFunctionName: string;\r\n    @observable\r\n    input: string;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        this.instanceId = '';\r\n        this.orchestratorFunctionName = '';\r\n        this.input = '';\r\n    }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    showWithFunctionName(funcName: string) {\r\n        this.dialogOpen = true;\r\n        this.orchestratorFunctionName = funcName;\r\n    }\r\n    \r\n    startNewInstance() {\r\n\r\n        var inputObject = null;\r\n        if (!!this.input) {\r\n            try {\r\n\r\n                inputObject = JSON.parse(this.input);\r\n            \r\n            } catch (err) {\r\n    \r\n                this.showError('Failed to parse input', err);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/orchestrations', { id: this.instanceId, name: this.orchestratorFunctionName, data: inputObject })\r\n        .then(response => {\r\n\r\n            this._dialogOpen = false;\r\n            this._backendClient.showDetails(response.instanceId);\r\n\r\n        }, err => this.showError('Failed to start new instance', err))\r\n        .finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { QueryString } from './QueryString';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n\r\n        // Also placing into query string\r\n        const queryString = new QueryString();\r\n        queryString.values[fieldName] = value;\r\n        queryString.apply();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        // Also placing into query string\r\n        const queryString = new QueryString();\r\n\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n\r\n                delete queryString.values[item.fieldName];\r\n\r\n            } else {\r\n\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n\r\n                queryString.values[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        queryString.apply();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        // Query string should take precedence\r\n        const queryString = new QueryString();\r\n        if (!!queryString.values[fieldName]) {\r\n            return queryString.values[fieldName];\r\n        }\r\n\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n\r\n        // Also dropping from query string\r\n        const queryString = new QueryString();\r\n        delete queryString.values[fieldName];\r\n        queryString.apply();\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// Defines handlers for messages being sent by VsCode extension\r\nexport type VsCodeCustomMessageHandlers = {\r\n    purgeHistory: (data: any) => void;\r\n    cleanEntityStorage: (data: any) => void;\r\n    startNewInstance: (data: any) => void;\r\n};\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return null; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            if (!!this._handlers && (!!this._handlers[message.id])) {\r\n\r\n                try {\r\n                    this._handlers[message.id](message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    showDetails(instanceId: string) {\r\n        this.call('OpenInNewWindow', instanceId);\r\n    }\r\n\r\n    setCustomHandlers(handlers: VsCodeCustomMessageHandlers) {\r\n\r\n        this._handlers = handlers;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: VsCodeCustomMessageHandlers;\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const StateFromVsCode: {};\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n        this._state = StateFromVsCode[this._prefix];\r\n        if (!this._state) {\r\n            this._state = {};\r\n        }\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        this._state[fieldName] = value\r\n        this.save();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete this._state[item.fieldName];\r\n            } else {\r\n                this._state[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        this.save();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        return this._state[fieldName];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete this._state[fieldName];\r\n        this.save();\r\n    }\r\n\r\n    private readonly _state: any;\r\n\r\n    private save(): void {\r\n        this._vsCodeApi.postMessage({ method: 'PersistState', key: this._prefix, data: this._state });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport './index.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\n\r\nimport { Main } from './components/Main';\r\nimport { MainState } from './states/MainState';\r\nimport { Theme } from './theme';\r\n\r\ndocument.body.style.backgroundColor = Theme.palette.background.paper;\r\n\r\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\r\nconst appState = new MainState();\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={Theme} >\r\n        <Main state={appState} />\r\n    </ThemeProvider>,\r\n    document.getElementById('root') as HTMLElement\r\n);"],"sourceRoot":""}