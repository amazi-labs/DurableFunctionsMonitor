{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/DurableOrchestrationStatus.ts","states/ErrorMessageState.ts","services/BackendClient.ts","states/LoginState.ts","theme.ts","components/OrchestrationLink.tsx","CancelToken.ts","states/ResultsListTabState.ts","states/MermaidDiagramStateBase.ts","states/ResultsGanttDiagramTabState.ts","states/ResultsHistogramTabState.ts","states/QueryString.ts","states/OrchestrationsState.ts","components/SaveAsSvgButton.tsx","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/PurgeHistoryDialog.tsx","components/CleanEntityStorageDialog.tsx","components/Main.tsx","states/MainMenuState.ts","states/MermaidDiagramTabState.ts","states/SequenceDiagramTabState.ts","states/GanttDiagramTabState.ts","states/LiquidMarkupTabState.ts","states/OrchestrationDetailsState.ts","states/PurgeHistoryDialogState.ts","states/CleanEntityStorageDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","states/MainState.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","LoginIcon","observer","React","render","state","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","fontSize","DialogContentText","allowedTaskHubNames","DialogTitle","List","hubName","ListItem","button","Link","href","locationPathName","CircularProgress","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","key","aria-label","MainMenu","componentDidMount","setWindowTitle","showConnectionParamsDialog","showPurgeHistoryDialog","showCleanEntityStorageDialog","connectionParamsDialogOpen","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","label","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","value","onChange","target","connectionString","DialogActions","saveConnectionParams","isDirty","DateTimeHelpers","t","isValid","result","moment","toISOString","slice","utc","isAfter","MinMoment","isBefore","MaxMoment","dt","HistoryEventFields","RuntimeStatuses","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","tabTemplateNames","DurableOrchestrationStatusFields","ErrorMessageState","observable","RoutePrefix","DfmRoutePrefix","BackendUri","process","BackendClient","_getTaskHubName","constructor","_getAuthorizationHeaderAsync","call","method","url","data","Promise","reject","then","headers","axios","request","r","OrchestrationsPathPrefix","LoginState","_isLoggedIn","_userName","_taskHubName","_allowedTaskHubNames","window","location","pathname","pos","lastIndexOf","substring","endsWith","tryGetTaskHubName","toLowerCase","origin","substr","length","super","_aadApp","defaults","maxRedirects","login","uri","get","response","loginWithEasyAuthConfig","err","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","console","log","idToken","rawIdToken","Authorization","acquireTokenRedirect","config","interceptors","use","reload","initializeTaskHubNameAndConfirmLogin","Msal","authority","redirectUri","rootUri","handleRedirectCallback","authErr","accountState","errorCode","account","getAccount","loginRedirect","hubNames","pathParts","split","filter","p","computed","colorTheme","REACT_APP_COLOR_THEME","DfmClientConfig","theme","Theme","createMuiTheme","palette","type","CustomTabStyle","backgroundColor","RuntimeStatusToStyle","status","hexToRGBA","error","light","success","warning","background","paper","hex","alpha","parseInt","toFixed","OrchestrationLink","backendClient","isVsCode","onLinkClicked","orchestrationId","routePrefixAndTaskHubName","extraSanitizeHrefComponent","s","replace","CancelToken","ResultsListTabState","_hiddenColumns","_orchestrations","_orderByDirection","_orderBy","val","resetOrderBy","_refresh","_backendClient","_localStorage","_noMorePagesToLoad","_pageSize","orderByString","getItem","orderByDirectionString","hiddenColumnsString","hideColumn","push","setItem","join","unhide","removeItem","reset","load","filterClause","cancelToken","isAutoRefresh","setItems","fieldName","skip","orderByClause","orderByDirection","hiddenColumnsClause","isCancelled","MermaidDiagramStateBase","initMermaidWhenNeeded","_mermaidInitialized","mermaid","initialize","startOnLoad","sequence","noteMargin","boxMargin","boxTextMargin","escapeTitle","formatDuration","durationInMs","isNaN","days","Math","floor","c","hours","minutes","seconds","formatDateTime","timestamp","formatDurationInSeconds","round","ResultsGanttDiagramTabState","_diagramSvg","_diagramCode","instances","all","renderDiagram","sequenceLines","svg","results","prevSectionName","sectionNr","instance","nextLine","sectionName","Date","getTime","ResultsHistogramTabState","_zoomedIn","_histograms","_numOfInstancesShown","_filterState","_originalTimeInterval","_applyingZoom","_numOfIntervals","timeFrom","timeTill","startTime","valueOf","bucketLength","ceil","loadNextBatch","applyZoom","left","right","cancel","from","till","reloadOrchestrations","resetZoom","pageNumber","instanceTypeName","emptyHistogram","i","x0","x","y","instanceStartPos","QueryString","_values","pairs","search","pair","decodeURIComponent","apply","queryString","encodeURIComponent","history","replaceState","FilterOperatorEnum","ResultsTabEnum","OrchestrationsState","_selectedTabIndex","values","toString","_tabStates","_cancelToken","_autoRefresh","loadOrchestrations","_timeFrom","listState","_timeTill","_filterValue","_filterOperator","_filteredColumn","_showStatuses","isStatusChecked","includes","setStatusChecked","checked","indexOf","splice","_refreshToken","clearTimeout","setTimeout","_delayedRefreshDelay","rescheduleDelayedRefresh","_oldFilterValue","momentFrom","_oldTimeFrom","_oldTimeTill","timeFromString","subtract","timeTillString","filteredColumnString","filterOperatorString","filterValueString","showStatusesString","JSON","parse","autoRefreshString","Number","applyTimeFrom","isValidMoment","applyTimeTill","applyFilterValue","stringify","encodedFilterValue","Equals","StartsWith","Contains","NotEquals","NotStartsWith","NotContains","selectedTabState","finally","SaveAsSvgButton","variant","size","fileName","URL","createObjectURL","Blob","download","getStyledSvg","Orchestrations","document","addEventListener","selectedTabIndex","scrollingElement","scrollHeight","innerHeight","scrollTop","Histogram","ctrlKey","keyCode","AppBar","position","Toolbar","Grid","container","item","xs","style","marginLeft","ampm","autoOk","invalidDateMessage","format","momentAsUtc","onBlur","onAccept","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Checkbox","timeTillEnabled","placeholder","Select","filteredColumn","inputProps","col","filterOperator","filterValue","FormGroup","showStatuses","onScroll","FormControlLabel","control","flex","autoRefresh","Tabs","ev","Tab","FormHelperText","orchestrations","hiddenColumns","component","Paper","elevation","renderTable","showLastEventColumn","renderEmptyTable","renderHistogram","Gantt","renderGanttChart","histogramState","typeNames","histograms","sort","numOfInstancesShown","zoomedIn","innerWidth","xType","stackBy","top","tickTotal","tickFormat","formatTimeTick","typeName","stroke","getColorCodeForInstanceType","drag","enableY","onDragEnd","area","colors","items","orientation","ganttState","rawHtml","dangerouslySetInnerHTML","__html","navigator","clipboard","writeText","diagramCode","visibleColumns","f","Table","TableHead","TableRow","onlyOneVisibleColumnLeft","TableCell","onMouseEnter","columnUnderMouse","onMouseLeave","TableSortLabel","active","orderBy","direction","TableBody","orchestration","rowStyle","cellStyle","verticalAlign","InputBase","multiline","rowsMax","renderJson","instanceType","hashCode","charCodeAt","m","timeRange","second","millisecond","event","preventDefault","json","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","raiseEventDialogOpen","purge","eventName","rows","eventData","raiseEvent","DurableEntityFields","details","runtimeStatusStyle","sm","md","zeroMinWidth","OrchestrationButtons","restartDialogOpen","rewindConfirmationOpen","terminateConfirmationOpen","setCustomStatusDialogOpen","rewind","terminate","newCustomStatus","setCustomStatus","isCustomStatusDirty","restartWithNewInstanceId","restart","OrchestrationFields","loadHistory","totalItems","historyTotalCount","itemsShown","events","index","Timestamp","EventType","SubOrchestrationId","FunctionName","Name","ScheduledTime","Result","Details","OrchestrationDetails","loadDetails","loadInProgress","tabStates","tabState","selectedTab","isMermaidDiagram","description","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","RadioGroup","row","Radio","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","CleanEntityStorageDialog","removeEmptyEntities","releaseOrphanedLocks","clean","numberOfEmptyEntitiesRemoved","numberOfOrphanedLocksRemoved","Main","utils","MomentUtils","loginState","mainMenuState","src","Breadcrumbs","taskHubName","orchestrationDetailsState","Autocomplete","freeSolo","options","isExactMatch","suggestions","typedInstanceId","newValue","goto","renderInput","params","orchestrationsState","purgeHistoryDialogState","cleanEntityStorageDialogState","MainMenuState","_inProgress","_isReadOnly","_oldConnectionString","_oldHubName","_purgeHistoryDialogState","_cleanEntityStorageDialogState","isReadOnly","alert","accountName","version","MermaidDiagramTabState","_loadHistory","buildDiagram","SequenceDiagramTabState","getSequenceForOrchestration","orchestrationName","parentOrchestrationName","historyEvents","externalActor","formatTimestamp","subOrchestrationId","subOrchestrationName","maxDurationInMs","DurationInMs","j","GanttDiagramTabState","renderOrchestration","isParentOrchestration","startedEvent","find","completedEvent","needToAddAxisFormat","lineName","LiquidMarkupTabState","_rawHtml","_orchestrationId","OrchestrationDetailsState","loadCustomTab","_history","_details","_historyTotalCount","_raiseEventDialogOpen","_setCustomStatusDialogOpen","_restartDialogOpen","_autoRefreshToken","requestBody","setAutoRefresh","tabStateIndex","orchId","loadAllHistory","templateName","totalCount","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","statuses","Array","has","included","add","delete","CleanEntityStorageDialogState","isOpen","_response","TypedLocalStorage","_prefix","localStorage","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","random","postMessage","setCustomHandlers","purgeHistoryHandler","cleanEntityStorageHandler","VsCodeTypedLocalStorage","_state","StateFromVsCode","save","MainState","_typedInstanceId","reloadSuggestions","_suggestions","vsCodeApi","acquireVsCodeApi","OrchestrationIdFromVsCode","body","appState","ReactDOM","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.5589e2d6.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 367,\n\t\"./locale.js\": 367\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 673;","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    List, ListItem, Link,\r\n    Menu, MenuItem, Tooltip, Typography, DialogTitle\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage ? (!state.allowedTaskHubNames ? (<>\r\n                            \r\n                            <Container className=\"login-progress\">\r\n                                <CircularProgress />\r\n                            </Container>\r\n                            <DialogContentText>Login in progress...</DialogContentText>\r\n\r\n                        </>) : (<>\r\n                                \r\n                            <DialogTitle>Select your Task Hub</DialogTitle>\r\n                            <List className=\"task-hub-list\">\r\n                                {state.allowedTaskHubNames.map(hubName => (\r\n                                    <ListItem button>\r\n                                        <Link href={state.locationPathName + hubName}>{hubName}</Link>\r\n                                    </ListItem>)\r\n                                )}\r\n                            </List>\r\n                            \r\n                        </>)): (<>\r\n                        \r\n                            <Container className=\"login-progress\">\r\n                                <Error color=\"secondary\" fontSize=\"large\" />\r\n                            </Container>\r\n                            <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            \r\n                        </>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <IconButton color=\"inherit\"\r\n                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n            >\r\n                <MenuIcon/>\r\n            </IconButton>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                <MenuItem onClick={() => state.showCleanEntityStorageDialog()}>Clean Entity Storage...</MenuItem>\r\n            </Menu>\r\n\r\n            <Dialog\r\n                open={state.connectionParamsDialogOpen}\r\n                onClose={() => state.connectionParamsDialogOpen = false}\r\n            >\r\n                <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                    \r\n                    <DialogContentText>\r\n                        {\r\n                            state.isReadonly ?\r\n                                \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively)\" :\r\n                                \"The below values will be saved to local.settings.json file.\"\r\n                        }\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Hub Name\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.hubName}\r\n                        onChange={(evt) => state.hubName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Azure Storage Connection String\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: state.isReadonly }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.connectionString}\r\n                        onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                    />\r\n\r\n                    <ErrorMessage state={state}/>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    {(!state.isReadonly) && (\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    )}\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    public static momentAsUtc(t: moment.Moment): moment.Moment {\r\n        \r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        const result = moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n        result.utc();\r\n        return result;\r\n    }\r\n\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01').utc();\r\n    private static MaxMoment = moment('2100-01-01').utc();\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    FunctionName: string;\r\n    ScheduledTime: string;\r\n    DurationInMs: number;\r\n    SubOrchestrationId: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport const RuntimeStatuses = ['Completed', 'Running', 'Failed', 'Pending', 'Terminated', 'Canceled', 'ContinuedAsNew'] as const;\r\nexport type RuntimeStatus = typeof RuntimeStatuses[number];\r\n\r\nexport type EntityType = 'Orchestration' | 'DurableEntity';\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    tabTemplateNames?: string[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nconst RoutePrefix = !process.env.REACT_APP_BACKEND_BASE_URI ? (!DfmRoutePrefix ? '/' : `/${DfmRoutePrefix}/`) : process.env.REACT_APP_BACKEND_BASE_URI + '/';\r\nexport const BackendUri = RoutePrefix + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return RoutePrefix + this._getTaskHubName(); }\r\n\r\n    constructor(private _getTaskHubName: () => string, private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + '/' + this._getTaskHubName() + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nexport const OrchestrationsPathPrefix = `/orchestrations/`;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @computed\r\n    get taskHubName(): string { return this._taskHubName;  }\r\n\r\n    @computed\r\n    get allowedTaskHubNames(): string[] { return this._allowedTaskHubNames; }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    // Returns window.location.pathname minus DFM's client-side routing\r\n    get locationPathName(): string {\r\n\r\n        var result = window.location.pathname;\r\n\r\n        const pos = result.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos >= 0) {\r\n            result = result.substring(0, pos);\r\n        }\r\n\r\n        if (!result.endsWith('/')) {\r\n            result += '/';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Returns the site's root URI (everything _before_ Task Hub name)\r\n    get rootUri(): string {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            const pos = window.location.href.toLowerCase().lastIndexOf('/' + hubName.toLowerCase());\r\n            if (pos >= 0) {\r\n                return window.location.href.substring(0, pos);\r\n            }\r\n        }\r\n\r\n        return window.location.origin +\r\n            (\r\n                window.location.pathname.endsWith('/') ?\r\n                    window.location.pathname.substr(0, window.location.pathname.length - 1) :\r\n                    window.location.pathname\r\n            );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Turning redirects off, as we don't ever need them anyway\r\n        axios.defaults.maxRedirects = 0;\r\n\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(response => this.loginWithEasyAuthConfig(response.data), err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<undefined>((resolve, reject) => resolve(undefined));\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    @observable\r\n    private _taskHubName: string;\r\n\r\n    @observable\r\n    private _allowedTaskHubNames: string[];\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    private loginWithEasyAuthConfig(config: {userName: string, clientId: string, authority: string}) {\r\n\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost or using server-directed login flow\r\n            // and proceed with no client-side auth\r\n            \r\n            this._userName = config.userName;\r\n\r\n            // Reloading the page upon cookie expiration\r\n            axios.interceptors.response.use(response => response, err => {\r\n\r\n                // Couldn't find a better way to detect this\r\n                if (err.message === 'Network Error') {\r\n                    window.location.reload(true);\r\n                }\r\n\r\n                return Promise.reject(err);\r\n            });\r\n\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority,\r\n                redirectUri: this.rootUri\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, (authErr: Msal.AuthError, accountState: string) => {\r\n\r\n            console.log(`Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`);\r\n        });\r\n\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            this._aadApp.loginRedirect();\r\n\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n        }\r\n    }\r\n\r\n    private initializeTaskHubNameAndConfirmLogin(): void {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            this._taskHubName = hubName;\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Trying to load the list of allowed Task Hubs from the backend\r\n        this.getAuthorizationHeaderAsync().then(headers => {\r\n\r\n            const uri = `${BackendUri}/task-hub-names`;\r\n            axios.get(uri, { headers }).then(response => {\r\n                \r\n                const hubNames: string[] = response.data;\r\n\r\n                if (hubNames.length === 1) {\r\n                    \r\n                    // Redirecting to that Task Hub\r\n                    window.location.pathname = this.locationPathName + hubNames[0];\r\n                } else {\r\n\r\n                    // Asking the user to choose from\r\n                    this._allowedTaskHubNames = hubNames;\r\n                }\r\n\r\n            }, err => {\r\n                this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n            });\r\n        });\r\n    }\r\n\r\n    // Extracts Task Hub name from window.location.href, still honoring client-side routing and subpaths\r\n    private tryGetTaskHubName(): string {\r\n\r\n        const locationPathName = this.locationPathName;\r\n\r\n        // If current path ends with DfmRoutePrefix, then it doesn't actually contain Task Hub name\r\n        if (locationPathName.toLowerCase().endsWith(`/${DfmRoutePrefix.toLowerCase()}/`)) {\r\n            return null;\r\n        }\r\n\r\n        const pathParts = locationPathName.split('/').filter(p => !!p);\r\n        if (pathParts.length < 1) {\r\n            return null;\r\n        }\r\n\r\n        // Consider the last path part to be the Task Hub name.\r\n        // This should work even if we're hosted under some subpath\r\n        return pathParts[pathParts.length - 1];\r\n    }\r\n}","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nimport { RuntimeStatus } from './states/DurableOrchestrationStatus';\r\n\r\n// Config object passed as a global variable\r\ndeclare const DfmClientConfig: { theme: string };\r\n\r\nconst colorTheme = !process.env.REACT_APP_COLOR_THEME ? DfmClientConfig.theme : process.env.REACT_APP_COLOR_THEME;\r\n\r\nexport const Theme = createMuiTheme({\r\n    palette: { type: colorTheme === 'dark' ? 'dark' : 'light' }\r\n});\r\n\r\nexport const CustomTabStyle = Theme.palette.type === \"dark\" ? {\r\n    backgroundColor: '#aaa'\r\n} : {};\r\n\r\nexport function RuntimeStatusToStyle(status: RuntimeStatus): {} {\r\n\r\n    var backgroundColor: string = null;\r\n\r\n    switch (status) {\r\n        case \"Failed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.error.light, 0.2);\r\n            break;\r\n        case \"Completed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.success.light, 0.2);\r\n            break;\r\n        case \"Running\":\r\n            backgroundColor = hexToRGBA(Theme.palette.warning.light, 0.2);\r\n            break;\r\n        case \"Terminated\":\r\n            backgroundColor = hexToRGBA(Theme.palette.background.paper, 0.1);\r\n            break;\r\n    }\r\n\r\n    return !!backgroundColor ? { backgroundColor } : {};\r\n}\r\n\r\nexport function hexToRGBA(hex: string, alpha: number): string {\r\n\r\n    if (hex.length > 4) {\r\n        return `rgba(${parseInt(hex.slice(1, 3), 16)}, ${parseInt(hex.slice(3, 5), 16)}, ${parseInt(hex.slice(5, 7), 16)}, ${alpha.toFixed(1)})`;\r\n    } else {\r\n        return `rgba(${parseInt(hex.slice(1, 2), 16)}, ${parseInt(hex.slice(2, 3), 16)}, ${parseInt(hex.slice(3, 4), 16)}, ${alpha.toFixed(1)})`;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationsPathPrefix } from '../states/LoginState';\r\nimport { Theme } from '../theme';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, title?: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href=\"/\" onClick={this.onLinkClicked} >\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href={`${this.props.backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\nexport class CancelToken {\r\n    @observable\r\n    inProgress: boolean = false;\r\n    @observable\r\n    isCancelled: boolean = false;\r\n}\r\n","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// Represents the state of a tab in the results pane\r\nexport interface IResultsTabState {\r\n\r\n    reset(): void;\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void>;\r\n}\r\n\r\n// Resulting list of orchestrations represented as a plain table\r\nexport class ResultsListTabState implements IResultsTabState {\r\n\r\n    @observable\r\n    columnUnderMouse: string;\r\n\r\n    @computed\r\n    get hiddenColumns(): string[] { return this._hiddenColumns; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection; }\r\n\r\n    @computed\r\n    get orderBy(): string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val) {\r\n\r\n            this._orderBy = val;\r\n            this._orderByDirection = 'asc';\r\n\r\n        } else if (this._orderByDirection === 'desc') {\r\n\r\n            this.resetOrderBy();\r\n        }\r\n        else {\r\n            this._orderByDirection = 'desc';\r\n        }\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<ResultsListTabState>, private _refresh: () => void) {\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n\r\n        const hiddenColumnsString = this._localStorage.getItem('hiddenColumns');\r\n        if (!!hiddenColumnsString) {\r\n            this._hiddenColumns = hiddenColumnsString.split('|');\r\n        }\r\n    }\r\n\r\n    hideColumn(name: string) {\r\n        this._hiddenColumns.push(name);\r\n        this._localStorage.setItem('hiddenColumns', this._hiddenColumns.join('|'));\r\n    }\r\n\r\n    unhide() {\r\n        this._hiddenColumns = [];\r\n        this._localStorage.removeItem('hiddenColumns');\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean = false): Promise<void> {\r\n\r\n        if (isAutoRefresh) { \r\n\r\n            this._noMorePagesToLoad = false;\r\n\r\n        } else {\r\n\r\n            if (!!this._noMorePagesToLoad) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            // persisting state as a batch\r\n            this._localStorage.setItems([\r\n                { fieldName: 'orderBy', value: this._orderBy },\r\n                { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n            ]);            \r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const hiddenColumnsClause = !this._hiddenColumns.length ? '' : `&hidden-columns=${this._hiddenColumns.join('|')}`;\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}${hiddenColumnsClause}`;\r\n\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n            \r\n            if (isAutoRefresh) {\r\n                this._orchestrations = response;\r\n            } else {\r\n                this._orchestrations.push(...response);\r\n            }\r\n\r\n            if (!response.length) {\r\n\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n\r\n    @observable\r\n    private _hiddenColumns: string[] = [];\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n}","import { observable } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\n// Base class for all mermaid-related states\r\nexport abstract class MermaidDiagramStateBase {\r\n\r\n\r\n    @observable\r\n    protected _diagramCode: string;\r\n    @observable\r\n    protected _diagramSvg: string;\r\n\r\n    protected initMermaidWhenNeeded() : void {\r\n\r\n        if (MermaidDiagramStateBase._mermaidInitialized) { \r\n            return;\r\n        }\r\n\r\n        mermaid.initialize({\r\n            startOnLoad: true,\r\n            sequence: {\r\n                noteMargin: 0,\r\n                boxMargin: 5,\r\n                boxTextMargin: 5\r\n            }\r\n        });\r\n\r\n        MermaidDiagramStateBase._mermaidInitialized = true;\r\n    }\r\n\r\n    protected escapeTitle(id: string) {\r\n\r\n        return id.replace(/[@:;]/g, ' ');\r\n    }\r\n\r\n    protected formatDuration(durationInMs: number): string {\r\n\r\n        var result = '';\r\n        if (isNaN(durationInMs) || (durationInMs < 0)) {\r\n            return result;\r\n        }\r\n\r\n        const days = Math.floor(durationInMs / 86400000);\r\n        if (days > 30) {\r\n            // something went wrong...\r\n            return result;\r\n        }\r\n\r\n        var c = 0;\r\n\r\n        if (days > 0) {\r\n            result += days.toFixed(0) + 'd';\r\n            ++c;\r\n            durationInMs = durationInMs % 86400000;\r\n        }\r\n\r\n        const hours = Math.floor(durationInMs / 3600000);\r\n        if (hours > 0) {\r\n            result += hours.toFixed(0) + 'h';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 3600000;\r\n        }\r\n\r\n        const minutes = Math.floor(durationInMs / 60000);\r\n        if (minutes > 0) {\r\n            result += minutes.toFixed(0) + 'm';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 60000;\r\n        }\r\n\r\n        const seconds = Math.floor(durationInMs / 1000);\r\n        if (seconds > 0) {\r\n            result += seconds.toFixed(0) + 's';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 1000;\r\n        }\r\n\r\n        if (durationInMs > 0) {\r\n            result += durationInMs.toFixed(0) + 'ms';\r\n        }\r\n\r\n        if (!result) {\r\n            result = '0ms';\r\n        }\r\n\r\n        return `(${result})`;\r\n    }\r\n\r\n    protected formatDateTime(timestamp: string): string {\r\n\r\n        return timestamp.substr(0, 23);\r\n    }\r\n\r\n    protected formatDurationInSeconds(durationInMs: number): string {\r\n\r\n        return Math.round(durationInMs / 1000).toFixed(0) + 's';\r\n    }\r\n\r\n    private static _mermaidInitialized = false;\r\n}","import { computed } from 'mobx'\r\nimport mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsGanttDiagramTabState extends MermaidDiagramStateBase implements IResultsTabState {\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; }\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; }\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            const uri = `/orchestrations?$top=500&$orderby=createdTime asc${filterClause}`;\r\n\r\n            this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                Promise.all(this.renderDiagram(instances)).then(sequenceLines => {\r\n\r\n                    this._diagramCode = 'gantt \\n' +\r\n                        `title Gantt Chart (${instances.length} instances shown) \\n` +\r\n                        'dateFormat YYYY-MM-DDTHH:mm:ssZ \\n' +\r\n                        sequenceLines.join('');\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    try {\r\n\r\n                        mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                            this._diagramSvg = svg;\r\n                            resolve();\r\n                        });\r\n\r\n                    } catch (err) {\r\n                        reject(err);\r\n                    }\r\n\r\n                }, reject);\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private renderDiagram(instances: DurableOrchestrationStatus[]): Promise<string>[] {\r\n\r\n        const results: Promise<string>[] = [];\r\n\r\n        var prevSectionName = '';\r\n        var sectionNr = 0;\r\n        for (const instance of instances) {\r\n\r\n            var nextLine = '';\r\n\r\n            // Grouping instances by their type\r\n            const sectionName = instance.entityType === 'DurableEntity' ? instance.entityId.name : instance.name;\r\n            if (sectionName !== prevSectionName) {\r\n                \r\n                nextLine = `section ${++sectionNr}. ${this.escapeTitle(sectionName)} \\n`;\r\n                prevSectionName = sectionName;\r\n            }\r\n\r\n            const instanceId = instance.entityType === 'DurableEntity' ? instance.entityId.key : instance.instanceId;\r\n            const durationInMs = new Date(instance.lastUpdatedTime).getTime() - new Date(instance.createdTime).getTime();\r\n\r\n            nextLine += `${this.escapeTitle(instanceId)} ${this.formatDuration(durationInMs)}: active, ${this.formatDateTime(instance.createdTime)}, ${this.formatDurationInSeconds(durationInMs < 1000 ? 1000 : durationInMs)} \\n`;\r\n            \r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        return results;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\n\r\ntype HistogramColumn = { x0: number, x: number, y: number };\r\ntype TimeInterval = { timeFrom: moment.Moment, timeTill: moment.Moment };\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsHistogramTabState implements IResultsTabState {\r\n\r\n    @computed\r\n    get zoomedIn() { return this._zoomedIn; }\r\n\r\n    @computed\r\n    get histograms() { return this._histograms; }\r\n\r\n    @computed\r\n    get numOfInstancesShown() { return this._numOfInstancesShown; }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _filterState: TimeInterval & { reloadOrchestrations: () => void, cancel: () => void })\r\n    {\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._numOfInstancesShown = 0;\r\n        this._histograms = {};\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        if (!this._applyingZoom && !this._zoomedIn) {\r\n\r\n            this._originalTimeInterval = { timeFrom: this._filterState.timeFrom, timeTill: this._filterState.timeTill };\r\n        }\r\n\r\n        this._numOfInstancesShown = 0;\r\n\r\n        const startTime = this._filterState.timeFrom.valueOf();\r\n        var bucketLength = Math.ceil((this._filterState.timeTill.valueOf() - startTime) / this._numOfIntervals);\r\n        if (bucketLength <= 0) {\r\n            bucketLength = 1;\r\n        }\r\n\r\n        return this.loadNextBatch(filterClause, startTime, bucketLength, 0, cancelToken);\r\n    }\r\n\r\n    applyZoom(left: Date, right: Date) {\r\n\r\n        this._numOfInstancesShown = 0;\r\n\r\n        this._filterState.cancel();\r\n        \r\n        // rounding to next second\r\n        const from = Math.floor(left.getTime() / 1000) * 1000;\r\n        const till = Math.ceil(right.getTime() / 1000) * 1000;\r\n\r\n        this._filterState.timeFrom = moment(from).utc();\r\n        this._filterState.timeTill = moment(till).utc();\r\n\r\n        this._applyingZoom = true;\r\n        try {\r\n            this._filterState.reloadOrchestrations();\r\n        } finally {\r\n            this._applyingZoom = false;\r\n        }\r\n\r\n        this._zoomedIn = true;\r\n    }\r\n\r\n    resetZoom() {\r\n\r\n        if (!this._zoomedIn || !this._originalTimeInterval) {\r\n            return;\r\n        }\r\n\r\n        this._zoomedIn = false;\r\n\r\n        this._filterState.cancel();\r\n\r\n        this._filterState.timeFrom = this._originalTimeInterval.timeFrom;\r\n        this._filterState.timeTill = this._originalTimeInterval.timeTill;\r\n        this._originalTimeInterval = null;\r\n\r\n        this._filterState.reloadOrchestrations();\r\n    }\r\n\r\n    @observable\r\n    private _histograms: { [typeName: string]: HistogramColumn[]; } = {};\r\n\r\n    @observable\r\n    private _numOfInstancesShown: number = 0;\r\n\r\n    @observable\r\n    private _zoomedIn = false;\r\n\r\n    private _originalTimeInterval: TimeInterval = null;\r\n    private _applyingZoom = false;\r\n\r\n    private readonly _numOfIntervals = 200;\r\n    private readonly _pageSize = 1000;\r\n\r\n    private loadNextBatch(filterClause: string, startTime: number, bucketLength: number, pageNumber: number, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${this._numOfInstancesShown}${filterClause}`;\r\n\r\n        const promise = this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            for (var instance of instances) {\r\n\r\n                const instanceTypeName = instance.entityType === 'DurableEntity' ? instance.entityId.name : instance.name;\r\n\r\n                if (!this._histograms[instanceTypeName]) {\r\n                    \r\n                    const emptyHistogram = [];\r\n                    for (var i = 0; i < this._numOfIntervals; i++) {\r\n                        emptyHistogram[i] = { x0: startTime + i * bucketLength, x: startTime + (i + 1) * bucketLength, y: 0 };\r\n                    }\r\n                    this._histograms[instanceTypeName] = emptyHistogram;\r\n                }\r\n\r\n                const instanceStartPos = Math.floor((new Date(instance.createdTime).getTime() - startTime) / bucketLength);\r\n                if (instanceStartPos < 0 || instanceStartPos >= this._numOfIntervals) {\r\n                    continue;\r\n                }\r\n\r\n                this._histograms[instanceTypeName][instanceStartPos].y += 1;\r\n            }\r\n\r\n            this._numOfInstancesShown += instances.length;\r\n\r\n            if (instances.length === this._pageSize) {\r\n                \r\n                return this.loadNextBatch(filterClause, startTime, bucketLength, pageNumber + 1, cancelToken);\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n}","\r\n// Helper class for dealing with browser's query string\r\nexport class QueryString {\r\n\r\n    constructor() {\r\n\r\n        const pairs = window.location.search.substr(1).split('&');\r\n        for (var pairString of pairs) {\r\n            const pair = pairString.split('=');\r\n            if (pair.length > 1) {\r\n                this._values[pair[0]] = decodeURIComponent(pair[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    get values(): { [key: string]: string } { return this._values; }\r\n\r\n    apply(): void {\r\n\r\n        var queryString = '';\r\n\r\n        for (var key in this._values) {\r\n            if (!!queryString) {\r\n                queryString += '&';\r\n            }\r\n            queryString += key + '=' + encodeURIComponent(this._values[key]);\r\n        }\r\n\r\n        window.history.replaceState(null, null, !queryString ? '' : '?' + queryString);\r\n    }\r\n\r\n    private _values: { [key: string]: string } = {};\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState, ResultsListTabState } from './ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from './ResultsGanttDiagramTabState';\r\nimport { ResultsHistogramTabState } from './ResultsHistogramTabState';\r\nimport { RuntimeStatus } from './DurableOrchestrationStatus';\r\nimport { QueryString } from './QueryString';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains,\r\n    NotEquals,\r\n    NotStartsWith,\r\n    NotContains\r\n}\r\n\r\nexport enum ResultsTabEnum {\r\n    List = 0,\r\n    Histogram,\r\n    Gantt\r\n}\r\n\r\nexport type RuntimeStatusOrDurableEntities = RuntimeStatus | 'DurableEntities';\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get selectedTabIndex(): ResultsTabEnum { return this._selectedTabIndex; }\r\n    set selectedTabIndex(val: ResultsTabEnum) {\r\n\r\n        if (this._selectedTabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._selectedTabIndex = val;\r\n\r\n        // Also placing tab index into query string\r\n        const queryString = new QueryString();\r\n        queryString.values['tabIndex'] = this._selectedTabIndex.toString();\r\n        queryString.apply();\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    get selectedTabState(): IResultsTabState {\r\n        return this._tabStates[this._selectedTabIndex];\r\n    }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment { return this._timeFrom; }\r\n    set timeFrom(val: moment.Moment) {\r\n        this._timeFrom = val;\r\n        this.listState.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment { return (!this._timeTill) ? moment().utc() : this._timeTill; }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this.listState.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment().utc() : null;\r\n\r\n        if (!val) {\r\n            this.listState.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showStatuses(): RuntimeStatusOrDurableEntities[] { return this._showStatuses; }\r\n    \r\n    isStatusChecked(status?: RuntimeStatusOrDurableEntities): boolean {\r\n\r\n        if (!status) {\r\n            return !this._showStatuses;\r\n        }\r\n\r\n        if (!this._showStatuses) {\r\n            return true;\r\n        }\r\n\r\n        return !!this._showStatuses.includes(status);\r\n    }\r\n\r\n    setStatusChecked(checked: boolean, status?: RuntimeStatusOrDurableEntities): void {\r\n\r\n        if (checked) {\r\n\r\n            if (!status) {\r\n                this._showStatuses = null;\r\n            } else {\r\n                if (!this._showStatuses) {\r\n                    this._showStatuses = [];\r\n                }\r\n                this._showStatuses.push(status);\r\n            }\r\n            \r\n        } else {\r\n\r\n            if (!status) {\r\n                this._showStatuses = [];\r\n            } else {\r\n                if (!this._showStatuses) {\r\n                    this._showStatuses = [];\r\n                }\r\n\r\n                const i = this._showStatuses.indexOf(status);\r\n                if (i >= 0) {\r\n                    this._showStatuses.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n        }\r\n        this._refreshToken = setTimeout(() => this.reloadOrchestrations(), this._delayedRefreshDelay);\r\n    }\r\n\r\n    rescheduleDelayedRefresh() {\r\n        \r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = setTimeout(() => this.reloadOrchestrations(), this._delayedRefreshDelay);\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState & ResultsListTabState>) {\r\n        super();\r\n        \r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n        momentFrom.utc();\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._timeTill.utc();\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showStatusesString = this._localStorage.getItem('showStatuses');\r\n        if (!!showStatusesString) {\r\n            this._showStatuses = JSON.parse(showStatusesString);\r\n        }\r\n        \r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        // Trying to get tab index from query string\r\n        const queryString = new QueryString();\r\n        if (!!queryString.values['tabIndex']) {\r\n            this._selectedTabIndex = parseInt(queryString.values['tabIndex']);\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n\r\n        // Canceling delayed refresh, if any\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = null;\r\n        }\r\n\r\n        for (const resultState of this._tabStates) {\r\n            resultState.reset();\r\n        }\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showStatuses', value: !!this._showStatuses ? JSON.stringify(this._showStatuses) : null },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        const cancelToken = this._cancelToken;\r\n        if (!!cancelToken.inProgress) {\r\n            return;            \r\n        }\r\n        cancelToken.inProgress = true;\r\n        \r\n        const timeFrom = this._timeFrom.toISOString();\r\n        const timeTill = !!this._timeTill ? this._timeTill.toISOString() : moment().utc().toISOString();\r\n        var filterClause = `&$filter=createdTime ge '${timeFrom}' and createdTime le '${timeTill}'`;\r\n        \r\n        if (!!this._showStatuses) {\r\n\r\n            filterClause += ` and runtimeStatus in (${this._showStatuses.map(s => `'${s}'`).join(',')})`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            const encodedFilterValue = encodeURIComponent(this._filterValue);\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${encodedFilterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${encodedFilterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${encodedFilterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.NotEquals:\r\n                    filterClause += `${this._filteredColumn} ne '${encodedFilterValue}'`;\r\n                    break;\r\n                case FilterOperatorEnum.NotStartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${encodedFilterValue}') eq false`;\r\n                    break;\r\n                case FilterOperatorEnum.NotContains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${encodedFilterValue}') eq false`;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.selectedTabState.load(filterClause, cancelToken, isAutoRefresh).then(() => {\r\n\r\n            if (!!this._refreshToken) {\r\n                clearTimeout(this._refreshToken);\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                this._refreshToken = setTimeout(() => {\r\n\r\n                    this.loadOrchestrations(true);\r\n\r\n                }, this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n                \r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _selectedTabIndex: ResultsTabEnum = ResultsTabEnum.List;\r\n\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    @observable\r\n    private _showStatuses: RuntimeStatusOrDurableEntities[] = null;\r\n\r\n    private readonly _tabStates: IResultsTabState[] = [\r\n        new ResultsListTabState(this._backendClient, this._localStorage, () => this.reloadOrchestrations()),\r\n        new ResultsHistogramTabState(this._backendClient, this),\r\n        new ResultsGanttDiagramTabState(this._backendClient)\r\n    ];\r\n\r\n    private get listState(): ResultsListTabState { return this._tabStates[0] as ResultsListTabState; }\r\n\r\n    private _refreshToken: NodeJS.Timeout;\r\n    private readonly _delayedRefreshDelay = 2500;\r\n\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n}","import * as React from 'react';\r\n\r\nimport { Box, Button, Typography } from '@material-ui/core';\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// A button to save something as an .SVG file\r\nexport class SaveAsSvgButton extends React.Component<{ svg: string, fileName: string, inProgress: boolean, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    size=\"large\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => this.props.backendClient.call('SaveAs', this.props.fileName + '.svg', this.props.svg)}\r\n                >\r\n                    <SaveIcon />\r\n                    <Box width={20} />\r\n                    <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                </Button>\r\n            );\r\n\r\n        } else {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    size=\"large\"\r\n                    disabled={this.props.inProgress}\r\n                    href={URL.createObjectURL(new Blob([this.props.svg], { type: 'image/svg+xml' }))}\r\n                    download={this.props.fileName + '.svg'}\r\n                >\r\n                    <SaveIcon />\r\n                    <Box width={20} />\r\n                    <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Appends some styling to SVG code, so it can also be saved as file\r\nexport function getStyledSvg(svg: string): string {\r\n\r\n    return svg.replace('</style>',\r\n        '.note { stroke: none !important; fill: none !important; } ' +\r\n        '.noteText { font-size: 9px !important; } ' +\r\n        '</style>'\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n    AppBar, Box, Button, Checkbox, FormGroup, FormControl, FormControlLabel, FormLabel, FormHelperText, Grid, IconButton, InputBase,\r\n    InputLabel, Link, LinearProgress, MenuItem, Paper, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, Tab, Tabs, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport { XYPlot, XAxis, YAxis, DiscreteColorLegend, VerticalRectSeries, Highlight } from 'react-vis';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields, RuntimeStatuses } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState, ResultsTabEnum, FilterOperatorEnum } from '../states/OrchestrationsState';\r\nimport { ResultsListTabState } from '../states/ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from '../states/ResultsGanttDiagramTabState';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\n\r\nimport { CustomTabStyle, RuntimeStatusToStyle } from '../theme';\r\nimport { ResultsHistogramTabState } from 'src/states/ResultsHistogramTabState';\r\n\r\nconst MaxJsonLengthToShow = 1024;\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const state = this.props.state;\r\n\r\n            if (state.selectedTabIndex !== ResultsTabEnum.List ) {\r\n                return;\r\n            }\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                state.loadOrchestrations();\r\n            }\r\n        });\r\n\r\n        // Doing zoom reset\r\n        document.addEventListener('keydown', (evt: any) => {\r\n\r\n            const state = this.props.state;\r\n            if (state.selectedTabIndex === ResultsTabEnum.Histogram && !!evt.ctrlKey && evt.keyCode === 90) {\r\n\r\n                const histogramState = state.selectedTabState as ResultsHistogramTabState;\r\n                histogramState.resetZoom();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const listState = state.selectedTabState as ResultsListTabState;\r\n\r\n        return (<>\r\n            \r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Grid container className=\"toolbar-grid1\">\r\n                        <Grid item xs={12}>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"from-input\"\r\n                                style={{ marginLeft: 10 }}\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"From &nbsp;&nbsp; (UTC)\"\r\n                                invalidDateMessage=\"\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                                onBlur={() => state.applyTimeFrom()}\r\n                                onAccept={() => state.applyTimeFrom()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n                            <FormControl>\r\n                                <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                                <Checkbox\r\n                                    id=\"till-checkbox\"\r\n                                    className=\"till-checkbox\"\r\n                                    disabled={state.inProgress}\r\n                                    checked={state.timeTillEnabled}\r\n                                    onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                                />\r\n                            </FormControl>\r\n\r\n                            {state.timeTillEnabled ? (\r\n                                <KeyboardDateTimePicker\r\n                                    className=\"till-input\"\r\n                                    ampm={false}\r\n                                    autoOk={true}\r\n                                    label=\"(UTC)\"\r\n                                    invalidDateMessage=\"\"\r\n                                    format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                    disabled={state.inProgress}\r\n                                    value={state.timeTill}\r\n                                    onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                                    onBlur={() => state.applyTimeTill()}\r\n                                    onAccept={() => state.applyTimeTill()}\r\n                                    onKeyPress={this.handleKeyPress}\r\n                                />\r\n                            ) : (\r\n                                <TextField\r\n                                    className=\"till-input\"\r\n                                    label=\"(UTC)\"\r\n                                    placeholder=\"[Now]\"\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    type=\"text\"\r\n                                    disabled={true}\r\n                                />\r\n                            )}                        \r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid2\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl>\r\n                                <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select filtered-column-input\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filteredColumn}\r\n                                    onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                    inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                    <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                    {DurableOrchestrationStatusFields.map(col => {\r\n                                        return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                    })}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className=\"toolbar-grid2-item1-select\">\r\n                                <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filterOperator}\r\n                                    onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                    inputProps={{ id: \"filter-operator-select\" }}>\r\n                                    <MenuItem value={FilterOperatorEnum.Equals}>Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.StartsWith}>Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.Contains}>Contains</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotEquals}>Not Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotStartsWith}>Not Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotContains}>Not Contains</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                            <TextField\r\n                                className=\"filter-value-input\"\r\n                                label=\"Filter Value\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                placeholder=\"[some text or 'null']\"\r\n                                disabled={state.filteredColumn === '0' || state.inProgress}\r\n                                value={state.filterValue}\r\n                                onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                                onBlur={() => state.applyFilterValue()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <FormGroup className=\"toolbar-runtime-status-group\">\r\n\r\n                        <InputLabel className=\"toolbar-runtime-status-group-label\" shrink={true}>Type/Status {!state.showStatuses ? '' : ` (${state.showStatuses.length} selected)`}</InputLabel>\r\n\r\n                        <FormGroup className=\"toolbar-runtime-status-checkbox-group\" onScroll={() => state.rescheduleDelayedRefresh()}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked()}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked)}\r\n                                />}\r\n                                label=\"[All]\"\r\n                            />\r\n\r\n                            {RuntimeStatuses.map(status => (<FormControlLabel key={status}\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked(status)}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked, status)}\r\n                                />}\r\n                                label={'Orchestations:' + status}\r\n                            />))}\r\n\r\n                            <FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked('DurableEntities')}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked, 'DurableEntities')}\r\n                                />}\r\n                                label=\"Durable Entities\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                    </FormGroup>\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Grid container className=\"toolbar-grid3\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl className=\"form-control-float-right\">\r\n                                <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                                <Select\r\n                                    className=\"autorefresh-select\"\r\n                                    inputProps={{ id: \"auto-refresh-select\" }}\r\n                                    value={state.autoRefresh}\r\n                                    onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                                >\r\n                                    <MenuItem value={0}>Never</MenuItem>\r\n                                    <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                    <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                    <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                            <Button\r\n                                className=\"refresh-button form-control-float-right\"\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                size=\"large\"\r\n                                onClick={() => state.inProgress ? state.cancel() : state.reloadOrchestrations()}\r\n                            >\r\n                                {state.inProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <AppBar color=\"inherit\" position=\"static\">\r\n                <Tabs className=\"tab-buttons\" value={state.selectedTabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.selectedTabIndex = val}>\r\n\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">List</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Time Histogram</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Gantt Chart</Typography>} />\r\n\r\n                </Tabs>\r\n            </AppBar>\r\n\r\n            {state.selectedTabIndex === ResultsTabEnum.List && (<>\r\n\r\n                <FormHelperText className=\"items-count-label\">\r\n                    {!!listState.orchestrations.length && (<>\r\n                        {`${listState.orchestrations.length} items shown`}\r\n                        {!!listState.hiddenColumns.length && (<>\r\n\r\n                            {`, ${listState.hiddenColumns.length} columns hidden `}\r\n\r\n                            (<Link className=\"unhide-button\"\r\n                                component=\"button\"\r\n                                variant=\"inherit\"\r\n                                onClick={() => listState.unhide()}\r\n                            >\r\n                                unhide\r\n                            </Link>)\r\n                        </>)}\r\n                    </>)}\r\n                </FormHelperText>\r\n\r\n                <Paper elevation={0} >\r\n                    {!!listState.orchestrations.length ? this.renderTable(listState, state.showLastEventColumn, state.backendClient) : this.renderEmptyTable()}\r\n                </Paper>\r\n\r\n                {state.inProgress && !!listState.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                \r\n            </>)}\r\n\r\n            {state.selectedTabIndex === ResultsTabEnum.Histogram && this.renderHistogram(state.selectedTabState as ResultsHistogramTabState) }\r\n            \r\n            {state.selectedTabIndex === ResultsTabEnum.Gantt && this.renderGanttChart(state, state.selectedTabState as ResultsGanttDiagramTabState)}\r\n                \r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderHistogram(histogramState: ResultsHistogramTabState): JSX.Element {\r\n\r\n        const typeNames = Object.keys(histogramState.histograms).sort();\r\n\r\n        return (<>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {`${histogramState.numOfInstancesShown} items shown`}\r\n\r\n                {histogramState.zoomedIn && (<>\r\n\r\n                    {', '}\r\n                    <Link className=\"unhide-button\"\r\n                        component=\"button\"\r\n                        variant=\"inherit\"\r\n                        onClick={() => histogramState.resetZoom()}\r\n                    >\r\n                        reset zoom (Ctrl+Z)\r\n                        </Link>\r\n                </>)}\r\n\r\n            </FormHelperText>\r\n\r\n            <XYPlot\r\n                width={window.innerWidth - 40} height={window.innerHeight - 400}\r\n                xType=\"time\"\r\n                stackBy=\"y\"\r\n                margin={{ left: 80, right: 10, top: 20 }}\r\n            >\r\n                {!!histogramState.numOfInstancesShown && (\r\n                    <YAxis tickTotal={7} />\r\n                )}\r\n                <XAxis tickTotal={7} tickFormat={t => this.formatTimeTick(t)} />\r\n\r\n                {typeNames.map(typeName => (<VerticalRectSeries\r\n                    key={typeName}\r\n                    stroke=\"white\"\r\n                    color={this.getColorCodeForInstanceType(typeName)}\r\n                    data={histogramState.histograms[typeName]}\r\n                />))}\r\n\r\n                {!!histogramState.numOfInstancesShown && (\r\n\r\n                    <Highlight\r\n                        color=\"#829AE3\"\r\n                        drag\r\n                        enableY={false}\r\n\r\n                        onDragEnd={(area) => {\r\n                            if (!!area) {\r\n                                histogramState.applyZoom(area.left, area.right);\r\n                            }\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n            </XYPlot>\r\n\r\n            <DiscreteColorLegend className=\"histogram-legend\"\r\n                colors={typeNames.map(typeName => this.getColorCodeForInstanceType(typeName))}\r\n                items={typeNames}\r\n                orientation=\"horizontal\"\r\n            />\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderGanttChart(state: OrchestrationsState, ganttState: ResultsGanttDiagramTabState): JSX.Element {\r\n\r\n        if (!ganttState.rawHtml) {\r\n            return null;\r\n        }\r\n\r\n        return (<>\r\n\r\n            <div\r\n                className=\"raw-html-div\"\r\n                style={CustomTabStyle}\r\n                dangerouslySetInnerHTML={{ __html: getStyledSvg(ganttState.rawHtml) }}\r\n            />\r\n\r\n            <Toolbar variant=\"dense\">\r\n\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    size=\"large\"\r\n                    disabled={state.inProgress}\r\n                    onClick={() => window.navigator.clipboard.writeText(ganttState.diagramCode)}\r\n                >\r\n                    <FileCopyIcon />\r\n                    <Box width={10} />\r\n                    <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                </Button>\r\n\r\n                <Box width={20} />\r\n\r\n                <SaveAsSvgButton\r\n                    svg={getStyledSvg(ganttState.rawHtml)}\r\n                    fileName={`gantt-chart-${state.timeFrom.format('YYYY-MM-DD-HH-mm-ss')}-${state.timeTill.format('YYYY-MM-DD-HH-mm-ss')}`}\r\n                    inProgress={state.inProgress}\r\n                    backendClient={state.backendClient}\r\n                />\r\n\r\n                <Box width={20} />\r\n            </Toolbar>\r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(results: ResultsListTabState, showLastEventColumn: boolean, backendClient: IBackendClient): JSX.Element {\r\n\r\n        const visibleColumns = DurableOrchestrationStatusFields\r\n            // hiding artificial 'lastEvent' column, when not used\r\n            .filter(f => showLastEventColumn ? true : f !== 'lastEvent');\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {visibleColumns.map(col => {\r\n\r\n                            const onlyOneVisibleColumnLeft = visibleColumns.length <= results.hiddenColumns.length + 1;\r\n\r\n                            return !results.hiddenColumns.includes(col) && (\r\n                                <TableCell key={col}\r\n                                    onMouseEnter={() => results.columnUnderMouse = col}\r\n                                    onMouseLeave={() => results.columnUnderMouse = ''}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={results.orderBy === col}\r\n                                        direction={results.orderByDirection}\r\n                                        onClick={() => results.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n                                    </TableSortLabel>\r\n\r\n                                    {results.columnUnderMouse === col && !onlyOneVisibleColumnLeft && (\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size=\"small\"\r\n                                            className=\"column-hide-button\"\r\n                                            onClick={() => results.hideColumn(col)}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>                                        \r\n                                    )}\r\n\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {results.orchestrations.map(orchestration => {\r\n\r\n                        const rowStyle = RuntimeStatusToStyle(orchestration.runtimeStatus);\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                style={rowStyle}\r\n                            >\r\n                                {!results.hiddenColumns.includes('instanceId') && (\r\n                                    <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                        <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={backendClient} />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('name') && (\r\n                                    <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                        {orchestration.name}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('createdTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {orchestration.createdTime}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('lastUpdatedTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {orchestration.lastUpdatedTime}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('runtimeStatus') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.runtimeStatus}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('lastEvent') && showLastEventColumn && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.lastEvent}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('input') && (\r\n                                    <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.input)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('output') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.output)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('customStatus') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.customStatus)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    private getColorCodeForInstanceType(instanceType: string): string {\r\n\r\n        // Taking hash out of input string (reversed, to make names like 'func1', 'func2' etc. look different)\r\n        var hashCode = 0;\r\n        for (var i = instanceType.length - 1; i >= 0; i--) {\r\n            hashCode = ((hashCode << 5) - hashCode) + instanceType.charCodeAt(i);\r\n            // Convert to positive 32-bit integer\r\n            hashCode &= 0x7FFFFFFF;\r\n        }\r\n\r\n        // min 6 hex digits\r\n        hashCode |= 0x100000;\r\n\r\n        // Not too white\r\n        hashCode &= 0xFFFFEF;\r\n\r\n        return '#' + hashCode.toString(16);\r\n    }\r\n\r\n    private formatTimeTick(t: Date) {\r\n\r\n        const m = moment(t).utc();\r\n        const timeRange = this.props.state.timeTill.valueOf() - this.props.state.timeFrom.valueOf();\r\n\r\n        if (timeRange > 5 * 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD');\r\n        }\r\n\r\n        if (timeRange > 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD HH:mm');\r\n        }\r\n\r\n        if (timeRange > 10000) {\r\n\r\n            return m.second() === 0 ? m.format('HH:mm') : m.format('HH:mm:ss');\r\n        }\r\n\r\n        return (m.millisecond() === 0) ? m.format('HH:mm:ss') : m.format(':SSS');\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    private renderJson(json: any): string {\r\n\r\n        const result = JSON.stringify(json);\r\n\r\n        return result.length > MaxJsonLengthToShow ? `[${result.length} symbols long JSON]` : result;\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Send Signal\r\n            </Button>\r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Send Signal</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide signal name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Signal Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Signal Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Send\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Grid, TextField } from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId?.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId?.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    FormControlLabel, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.restartDialogOpen = true}>\r\n                Restart\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.restartDialogOpen}\r\n                onClose={() => state.restartDialogOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Restart</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to restart orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n\r\n                    <FormControlLabel control={<Checkbox\r\n                        checked={state.restartWithNewInstanceId}\r\n                        onChange={(evt) => state.restartWithNewInstanceId = evt.target.checked} />}\r\n                        label=\"Restart with new instanceId\"\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.restartDialogOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.restart()} color=\"secondary\">\r\n                        Restart\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, InputBase, Table, TableBody, TableCell, TableHead, TableRow, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { HistoryEventFields, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) {\r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 50;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadHistory();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const totalItems = this.props.state.historyTotalCount;\r\n        const details = this.props.state.details;\r\n        const history = this.props.state.history;\r\n        const itemsShown = history.length;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"instanceId\"\r\n                        value={details.instanceId}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: { totalItems === itemsShown ? `${itemsShown} items` : `${itemsShown} of ${totalItems} items shown` }\r\n            </FormHelperText>\r\n\r\n            {!!history.length && this.renderTable(history)}\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderTable(events: HistoryEvent[]): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: HistoryEvent, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n\r\n                                    {!!event.SubOrchestrationId ?\r\n                                        (<OrchestrationLink\r\n                                            orchestrationId={event.SubOrchestrationId}\r\n                                            title={event.FunctionName}\r\n                                            backendClient={this.props.state.backendClient} />)\r\n                                        :\r\n                                        (event.Name ?? event.FunctionName)\r\n                                    }\r\n\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, FormControl, InputLabel, LinearProgress, MenuItem,\r\n    Select, Tabs, Tab, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\nimport { CustomTabStyle } from '../theme';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"details-top-toolbar\">\r\n\r\n                    {state.details.entityType === \"Orchestration\" && (\r\n                        <OrchestrationButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    {state.details.entityType === \"DurableEntity\" && (\r\n                        <DurableEntityButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            inputProps={{ id: 'auto-refresh-select' }}>\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress && !state.loadInProgress}\r\n                        onClick={() => state.loadInProgress ? state.cancel() : state.loadDetails()}\r\n                    >\r\n                        {state.loadInProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {!!state.tabStates.length && (<>\r\n                <AppBar color=\"inherit\" position=\"static\">\r\n                    <Tabs className=\"tab-buttons\" value={state.selectedTabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.selectedTabIndex = val}>\r\n                        \r\n                        <Tab className=\"tab-buttons\" disabled={state.inProgress} \r\n                            label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Details</Typography>}\r\n                        />\r\n                        \r\n                        {state.tabStates.map(tabState => (\r\n                            <Tab className=\"tab-buttons\" key={tabState.name} disabled={state.inProgress} \r\n                                label={<Typography color=\"textPrimary\" variant=\"subtitle2\">{tabState.name}</Typography>}\r\n                            />\r\n                        ))}\r\n\r\n                    </Tabs>\r\n                </AppBar>\r\n            </>)}\r\n\r\n            {!state.selectedTabIndex && state.details.entityType === \"Orchestration\" && (<>\r\n                <OrchestrationFields state={state} />\r\n\r\n                {state.inProgress && !!state.history.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            </>)}\r\n\r\n            {!state.selectedTabIndex && state.details.entityType === \"DurableEntity\" &&\r\n                <DurableEntityFields details={state.details} />\r\n            }\r\n\r\n            {!!state.selectedTab && !!state.selectedTab.rawHtml && (<>\r\n\r\n                <div\r\n                    className=\"raw-html-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.selectedTab.rawHtml) }}\r\n                />\r\n                \r\n                {state.selectedTab.isMermaidDiagram && (\r\n\r\n                    <Toolbar variant=\"dense\">\r\n                        <Typography style={{ flex: 1 }} />\r\n\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"default\"\r\n                            size=\"large\"\r\n                            disabled={state.inProgress}\r\n                            onClick={() => window.navigator.clipboard.writeText(state.selectedTab.description)}\r\n                        >\r\n                            <FileCopyIcon />\r\n                            <Box width={10} />\r\n                            <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                        </Button>\r\n\r\n                        <Box width={20} />\r\n\r\n                        <SaveAsSvgButton\r\n                            svg={getStyledSvg(state.selectedTab.rawHtml)}\r\n                            fileName={state.orchestrationId}\r\n                            inProgress={state.inProgress}\r\n                            backendClient={state.backendClient}\r\n                        />\r\n\r\n                        <Box width={20} />\r\n                    </Toolbar>\r\n                )}\r\n                \r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                        To clean up deleted Entities use the 'Clean Entity Storage' command instead. \r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-from-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? 'Last Updated From (UTC)' : 'From (UTC)'}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? 'Last Updated Till (UTC)' : 'Till (UTC)'}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === 'Orchestration' && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === 'DurableEntity' && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, LinearProgress, \r\n} from '@material-ui/core';\r\n\r\nimport './CleanEntityStorageDialog.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { CleanEntityStorageDialogState } from '../states/CleanEntityStorageDialogState';\r\n\r\n// Dialog with parameters for cleaning entity storage\r\n@observer\r\nexport class CleanEntityStorageDialog extends React.Component<{ state: CleanEntityStorageDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Clean Entity Storage</DialogTitle>\r\n\r\n                {!state.response && (<>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                        <DialogContentText>\r\n                            An entity is considered empty, and is removed, if it has no state, is not locked, and has been idle for more than EntityMessageReorderWindowInMinutes. Locks are considered orphaned, and are released, if the orchestration that holds them is not in state Running.\r\n                        </DialogContentText>\r\n\r\n                        <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                            <FormGroup row>\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.removeEmptyEntities}\r\n                                    onChange={(evt) => state.removeEmptyEntities = evt.target.checked} />}\r\n                                    label=\"Remove Empty Entities\"\r\n                                />\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.releaseOrphanedLocks}\r\n                                    onChange={(evt) => state.releaseOrphanedLocks = evt.target.checked} />}\r\n                                    label=\"Release Orphaned Locks\"\r\n                                />\r\n                                \r\n                            </FormGroup>\r\n                        </FormControl>\r\n\r\n                        <ErrorMessage state={state} />\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => state.clean()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                            Clean\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n                {!!state.response && (<>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfEmptyEntitiesRemoved} empty entities removed. \r\n                        </DialogContentText>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfOrphanedLocksRemoved} orphaned locks removed.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\nimport { CleanEntityStorageDialog } from './CleanEntityStorageDialog';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={`${!DfmRoutePrefix ? '' : '/'}${DfmRoutePrefix}/logo.svg`} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                <Link color=\"inherit\" href={state.loginState.rootUri}>\r\n                                    Durable Functions Monitor\r\n                                </Link>\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={state.loginState.locationPathName}>\r\n                                    / {state.loginState.taskHubName}\r\n                                </Link>\r\n\r\n                                {!state.orchestrationDetailsState ?\r\n                                    (\r\n                                        <Autocomplete\r\n                                            className=\"instance-id-input\"\r\n                                            freeSolo\r\n                                            options={state.isExactMatch ? [] : state.suggestions}\r\n                                            value={state.typedInstanceId}\r\n                                            onChange={(evt, newValue) => {\r\n                                                state.typedInstanceId = newValue ?? '';\r\n                                                if (!!newValue) {\r\n                                                    state.goto();\r\n                                                }\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    className={state.isExactMatch ? 'instance-id-valid' : null}\r\n                                                    size=\"small\"\r\n                                                    label=\"instanceId to go to...\"\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(evt) => state.typedInstanceId = evt.target.value as string}\r\n                                                    onKeyPress={(evt) => this.handleKeyPress(evt)}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    )\r\n                                    :\r\n                                    (<Typography color=\"inherit\">\r\n                                        <Link color=\"inherit\" href={window.location.pathname}>\r\n                                            {state.orchestrationDetailsState.orchestrationId}\r\n                                        </Link>\r\n                                    </Typography>)\r\n                                }\r\n\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n                <CleanEntityStorageDialog state={state.cleanEntityStorageDialogState} />\r\n\r\n            </></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.goto();\r\n        }\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _purgeHistoryDialogState: PurgeHistoryDialogState,\r\n        private _cleanEntityStorageDialogState: CleanEntityStorageDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    showCleanEntityStorageDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this._cleanEntityStorageDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n    \r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { computed } from 'mobx';\r\n\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// Base class for all mermaid diagram tab states\r\nexport abstract class MermaidDiagramTabState extends MermaidDiagramStateBase implements ICustomTabState {\r\n\r\n    readonly name: string = \"Diagram\";\r\n    readonly isMermaidDiagram: boolean = true;\r\n\r\n    @computed\r\n    get description(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; };\r\n\r\n    constructor(protected _loadHistory: (orchestrationId: string) => Promise<HistoryEvent[]>) {\r\n        super();\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n        \r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return this._loadHistory(details.instanceId).then(history => {\r\n\r\n            if (!history.length || cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            return this.buildDiagram(details, history, cancelToken);\r\n        });\r\n    }\r\n\r\n    protected abstract buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void>;\r\n}","import mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of Sequence Diagram tab on OrchestrationDetails view\r\nexport class SequenceDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Sequence Diagram\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken) : Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.getSequenceForOrchestration(details.name, '.', history)).then(sequenceLines => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'sequenceDiagram \\n' + sequenceLines.join('');\r\n\r\n                try {\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private getSequenceForOrchestration(orchestrationName: string, parentOrchestrationName: string, historyEvents: HistoryEvent[]): Promise<string>[] {\r\n\r\n        const externalActor = '.'\r\n        const results: Promise<string>[] = [];\r\n        var nextLine: string;\r\n\r\n        var i = 0;\r\n        while (i < historyEvents.length) {\r\n            const event = historyEvents[i];\r\n\r\n            switch (event.EventType) {\r\n                case 'ExecutionStarted':\r\n\r\n                    nextLine =\r\n                        `${parentOrchestrationName}->>+${orchestrationName}:[ExecutionStarted] \\n` +\r\n                        `Note over ${parentOrchestrationName},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.getSequenceForOrchestration(subOrchestrationName, orchestrationName, history)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`${orchestrationName}-x${subOrchestrationName}:[FailedToLoad] \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    nextLine = `${orchestrationName}-x${event.FunctionName}:[SubOrchestrationInstanceFailed] \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    // Trying to aggregate multiple parallel calls\r\n                    var maxDurationInMs = event.DurationInMs;\r\n                    var j = i + 1;\r\n                    for (; j < historyEvents.length &&\r\n                        historyEvents[j].EventType === 'TaskCompleted' &&\r\n                        historyEvents[j].FunctionName === event.FunctionName &&\r\n                        historyEvents[j].ScheduledTime.substr(0, 23) === event.ScheduledTime.substr(0, 23);\r\n                        j++) {\r\n\r\n                        if (maxDurationInMs < historyEvents[j].DurationInMs) {\r\n                            maxDurationInMs = historyEvents[j].DurationInMs;\r\n                        }\r\n                    }\r\n\r\n                    if (j === i + 1) {\r\n\r\n                        const nextLine =\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n                        \r\n                    } else {\r\n\r\n                        const nextLine =\r\n                            `par ${j - i} calls \\n` +\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(maxDurationInMs)} \\n` +\r\n                            `end \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n\r\n                        i = j - 1;\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `${orchestrationName}-x${orchestrationName}:${event.FunctionName}(failed) \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'EventRaised':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:${event.Name} \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TimerFired':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[TimerFired] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionTerminated':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[ExecutionTerminated] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionCompleted':\r\n\r\n                    nextLine =\r\n                        `${orchestrationName}-->>-${parentOrchestrationName}:[ExecutionCompleted] \\n` +\r\n                        `Note over ${orchestrationName},${parentOrchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatTimestamp(timestamp: string): string {\r\n        if (timestamp.length <= 11) {\r\n            return timestamp;\r\n        }\r\n        return '(' + timestamp.substr(11, 12) + 'Z)';\r\n    }\r\n}","import mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of Gantt Diagram tab on OrchestrationDetails view\r\nexport class GanttDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Gantt Chart\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.renderOrchestration(details.instanceId, details.name, history, true)).then(sequenceLines => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title ${details.name}(${details.instanceId}) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss.SSS \\n' +\r\n                    sequenceLines.join('');\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private renderOrchestration(orchestrationId: string, orchestrationName: string, historyEvents: HistoryEvent[], isParentOrchestration: boolean): Promise<string>[] {\r\n\r\n        const results: Promise<string>[] = [];\r\n\r\n        const startedEvent = historyEvents.find(event => event.EventType === 'ExecutionStarted');\r\n        const completedEvent = historyEvents.find(event => event.EventType === 'ExecutionCompleted');\r\n\r\n        var needToAddAxisFormat = isParentOrchestration;\r\n        var nextLine: string;\r\n\r\n        if (!!startedEvent && !!completedEvent) {\r\n\r\n            if (needToAddAxisFormat) {\r\n\r\n                const longerThanADay = completedEvent.DurationInMs > 86400000;\r\n                nextLine = longerThanADay ? 'axisFormat %Y-%m-%d %H:%M \\n' : 'axisFormat %H:%M:%S \\n';\r\n                results.push(Promise.resolve(nextLine));\r\n                needToAddAxisFormat = false;\r\n            }\r\n            \r\n            nextLine = isParentOrchestration ? '' : `section ${orchestrationName}(${this.escapeTitle(orchestrationId)}) \\n`;\r\n\r\n            var lineName = this.formatDuration(completedEvent.DurationInMs);\r\n            if (!lineName) {\r\n                lineName = orchestrationName;\r\n            }\r\n\r\n            nextLine += `${lineName}: ${isParentOrchestration ? '' : 'active,'} ${this.formatDateTime(startedEvent.Timestamp)}, ${this.formatDurationInSeconds(completedEvent.DurationInMs)} \\n`;\r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        if (needToAddAxisFormat) {\r\n\r\n            nextLine = 'axisFormat %H:%M:%S \\n';\r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        for(var event of historyEvents) {\r\n        \r\n            switch (event.EventType) {\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.renderOrchestration(subOrchestrationId, subOrchestrationName, history, false)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`%% Failed to load ${subOrchestrationName}. ${err.message} \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: done, ${this.formatDateTime(event.ScheduledTime)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: crit, ${this.formatDateTime(event.ScheduledTime)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of a custom liquid markup tab on OrchestrationDetails view\r\nexport class LiquidMarkupTabState implements ICustomTabState {\r\n\r\n    name: string = \"\";\r\n    readonly description: string = \"\";\r\n    readonly isMermaidDiagram: boolean = false;\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._rawHtml; };\r\n\r\n    constructor(private _orchestrationId: string, private _backendClient: IBackendClient) {\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/custom-tab-markup('${this.name}')`;\r\n        return this._backendClient.call('POST', uri).then(response => {\r\n\r\n            if (!cancelToken.isCancelled) {\r\n               \r\n                this._rawHtml = response;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _rawHtml: string;\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { SequenceDiagramTabState } from './SequenceDiagramTabState';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { GanttDiagramTabState } from './GanttDiagramTabState';\r\nimport { LiquidMarkupTabState } from './LiquidMarkupTabState';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { QueryString } from './QueryString';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get selectedTabIndex(): number { return this._selectedTabIndex; }\r\n    set selectedTabIndex(val: number) {\r\n\r\n        if (this._selectedTabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._selectedTabIndex = val;\r\n\r\n        // Also placing tab index into query string\r\n        const queryString = new QueryString();\r\n        queryString.values['tabIndex'] = this._selectedTabIndex.toString();\r\n        queryString.apply();\r\n\r\n        if (!!this.selectedTab) {\r\n\r\n            this.loadCustomTab();\r\n\r\n        } else if (!this._history.length) {\r\n\r\n            this.loadHistory();\r\n        }\r\n    }\r\n\r\n    get selectedTab(): ICustomTabState {\r\n        return !this._selectedTabIndex ? null : this._tabStates[this._selectedTabIndex - 1];\r\n    }\r\n\r\n    @computed\r\n    get details(): DurableOrchestrationStatus { return this._details; }\r\n\r\n    @computed\r\n    get history(): HistoryEvent[] { return this._history; }\r\n\r\n    @computed\r\n    get historyTotalCount(): number { return this._historyTotalCount; }\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get loadInProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress || this.loadInProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        this.newCustomStatus = !!this._details.customStatus ? JSON.stringify(this._details.customStatus) : '';\r\n    }\r\n\r\n    @computed\r\n    get restartDialogOpen(): boolean { return this._restartDialogOpen; }\r\n    set restartDialogOpen(val: boolean) {\r\n        this._restartDialogOpen = val;\r\n        this.restartWithNewInstanceId = true;\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this._details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this._details.customStatus);\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n    @observable\r\n    restartWithNewInstanceId: boolean = true;\r\n\r\n    @computed\r\n    get tabStates(): ICustomTabState[] { return this._tabStates; }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        // Trying to get tab index from query string\r\n        const queryString = new QueryString();\r\n        if (!!queryString.values['tabIndex']) {\r\n            this._selectedTabIndex = parseInt(queryString.values['tabIndex']);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this._history = [];\r\n            this._details = new DurableOrchestrationStatus();\r\n            this._tabStates = [];\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    restart() {\r\n        this.restartDialogOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/restart`;\r\n        const requestBody = { restartWithNewInstanceId: this.restartWithNewInstanceId };\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to restart: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse event data: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse custom status: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to set custom status: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) { // We might end up here, if next timer occurs while a custom tab is still loading\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n            return;\r\n        }\r\n\r\n        this._inProgress = true;\r\n        this._noMorePagesToLoad = false;\r\n\r\n        if (!this._autoRefresh && (!this.selectedTab)) {\r\n            \r\n            this._history = [];\r\n            this._historyTotalCount = 0;\r\n        }\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n        \r\n            this._details = response;\r\n\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n\r\n            var tabStateIndex = 0;\r\n\r\n            // Loading sequence diagram tab\r\n            if (this._details.entityType === \"Orchestration\") {\r\n               \r\n                if (this._tabStates.length <= tabStateIndex) {\r\n                    this._tabStates.push(new SequenceDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                    this._tabStates.push(new GanttDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                }\r\n                tabStateIndex += 2;\r\n            }\r\n\r\n            // Loading custom tabs\r\n            if (!!this._details.tabTemplateNames) {\r\n                for (var templateName of this._details.tabTemplateNames) {\r\n\r\n                    if (this._tabStates.length <= tabStateIndex) {\r\n                        this._tabStates.push(new LiquidMarkupTabState(this._orchestrationId, this._backendClient));\r\n                    }\r\n                    this._tabStates[tabStateIndex].name = templateName;\r\n                    tabStateIndex++;\r\n                }                \r\n            }\r\n\r\n            this._inProgress = false;\r\n\r\n            if (!this.selectedTab) {\r\n                \r\n                this.loadHistory(!!this._autoRefresh);\r\n\r\n            } else {\r\n\r\n                this.loadCustomTab();\r\n            }\r\n            \r\n        }, err => {\r\n            this._inProgress = false;\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadHistory(isAutoRefresh: boolean = false): void {\r\n\r\n        if (!!this.inProgress || !!this.selectedTab || !!this._noMorePagesToLoad) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._history.length;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/history?$top=${this._pageSize}&$skip=${skip}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            this._historyTotalCount = response.totalCount;\r\n\r\n            if (isAutoRefresh) {\r\n                this._history = response.history;\r\n            } else {\r\n                this._history.push(...response.history);\r\n\r\n                if (response.history.length < this._pageSize) {\r\n\r\n                    // Stop the infinite scrolling\r\n                    this._noMorePagesToLoad = true;\r\n                }\r\n            }\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Failed to load history: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    private loadCustomTab(): void {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        this.selectedTab.load(this._details, cancelToken).then(() => {}, err => { \r\n                \r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Failed to load tab: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    private setAutoRefresh(): void {\r\n\r\n        if (!this._autoRefresh) {\r\n            return;\r\n        }\r\n\r\n        if (!!this._autoRefreshToken) {\r\n            clearTimeout(this._autoRefreshToken);\r\n        }\r\n        this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n    }\r\n\r\n    private loadAllHistory(orchestrationId: string): Promise<HistoryEvent[]> {\r\n\r\n        const uri = `/orchestrations('${orchestrationId}')/history`;\r\n        return this._backendClient.call('GET', uri).then(response => response.history);\r\n    }\r\n\r\n    @observable\r\n    private _tabStates: ICustomTabState[] = [];\r\n\r\n    @observable\r\n    private _details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n    @observable\r\n    private _history: HistoryEvent[] = [];\r\n    @observable\r\n    private _selectedTabIndex: number = 0;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n    @observable\r\n    private _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _restartDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _historyTotalCount: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 200;\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { observable, computed } from 'mobx'\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Clean Entity Storage Dialog\r\nexport class CleanEntityStorageDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(isOpen: boolean) {\r\n        this._dialogOpen = isOpen;\r\n\r\n        if (isOpen) {\r\n            this._response = null;\r\n            this.removeEmptyEntities = true;\r\n            this.releaseOrphanedLocks = true;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get response(): CleanEntityStorageResponse | null { return this._response; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return true;\r\n    };\r\n\r\n    @observable\r\n    removeEmptyEntities: boolean;\r\n    @observable\r\n    releaseOrphanedLocks: boolean;\r\n    \r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    clean() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/clean-entity-storage', {\r\n            removeEmptyEntities: this.removeEmptyEntities,\r\n            releaseOrphanedLocks: this.releaseOrphanedLocks\r\n        }).then(response => {\r\n            this._response = response;\r\n        }, err => {\r\n            this.errorMessage = `Clean Entity Storage failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _response: CleanEntityStorageResponse | null = null;\r\n}\r\n\r\nexport class CleanEntityStorageResponse\r\n{\r\n    numberOfEmptyEntitiesRemoved: number;\r\n    numberOfOrphanedLocksRemoved: number;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { QueryString } from './QueryString';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n\r\n        // Also placing into query string\r\n        const queryString = new QueryString();\r\n        queryString.values[fieldName] = value;\r\n        queryString.apply();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        // Also placing into query string\r\n        const queryString = new QueryString();\r\n\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n\r\n                delete queryString.values[item.fieldName];\r\n\r\n            } else {\r\n\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n\r\n                queryString.values[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        queryString.apply();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        // Query string should take precedence\r\n        const queryString = new QueryString();\r\n        if (!!queryString.values[fieldName]) {\r\n            return queryString.values[fieldName];\r\n        }\r\n\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n\r\n        // Also dropping from query string\r\n        const queryString = new QueryString();\r\n        delete queryString.values[fieldName];\r\n        queryString.apply();\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return null; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setCustomHandlers(purgeHistoryHandler: () => void, cleanEntityStorageHandler: () => void) {\r\n\r\n        this._handlers['purgeHistory'] = purgeHistoryHandler;\r\n        this._handlers['cleanEntityStorage'] = cleanEntityStorageHandler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const StateFromVsCode: {};\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n        this._state = StateFromVsCode[this._prefix];\r\n        if (!this._state) {\r\n            this._state = {};\r\n        }\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        this._state[fieldName] = value\r\n        this.save();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete this._state[item.fieldName];\r\n            } else {\r\n                this._state[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        this.save();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        return this._state[fieldName];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete this._state[fieldName];\r\n        this.save();\r\n    }\r\n\r\n    private readonly _state: any;\r\n\r\n    private save(): void {\r\n        this._vsCodeApi.postMessage({ method: 'PersistState', key: this._prefix, data: this._state });\r\n    }\r\n}\r\n","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { BackendClient } from '../services/BackendClient';\r\nimport { LoginState, OrchestrationsPathPrefix } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { ResultsListTabState } from './ResultsListTabState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n    cleanEntityStorageDialogState: CleanEntityStorageDialogState;\r\n\r\n    @computed\r\n    get typedInstanceId(): string {\r\n        return this._typedInstanceId;\r\n    }\r\n    set typedInstanceId(s: string) {\r\n        this._typedInstanceId = s;\r\n        this.reloadSuggestions();\r\n    }\r\n\r\n    @computed\r\n    get suggestions(): string[] {\r\n        return this._suggestions;\r\n    }\r\n\r\n    @computed\r\n    get isExactMatch(): boolean {\r\n        return this._suggestions.length === 1 && this._suggestions[0] === this._typedInstanceId;\r\n    }\r\n    \r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState & ResultsListTabState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setCustomHandlers(\r\n                    () => this.purgeHistoryDialogState.dialogOpen = true,\r\n                    () => this.cleanEntityStorageDialogState.dialogOpen = true\r\n                );\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(() => this.loginState.taskHubName, () => this.loginState.getAuthorizationHeaderAsync());\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState, this.cleanEntityStorageDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Opens the entered orchestrationId in a new tab\r\n    goto() {\r\n        window.open(`${this._backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this._typedInstanceId}`);\r\n        this._typedInstanceId = '';\r\n        this._suggestions = [];\r\n    }\r\n\r\n    @observable\r\n    private _suggestions: string[] = [];\r\n    @observable\r\n    private _typedInstanceId: string = '';\r\n\r\n    private readonly _backendClient: IBackendClient;\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const pos = window.location.pathname.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos < 0) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(pos + OrchestrationsPathPrefix.length);\r\n    }\r\n\r\n    // Reloads list of suggested instanceIds\r\n    private reloadSuggestions(): void {\r\n\r\n        if (!this._typedInstanceId || this._typedInstanceId.length < 2) {\r\n            this._suggestions = [];\r\n            return;\r\n        }\r\n\r\n        const uri = `/id-suggestions(prefix='${this._typedInstanceId}')`;\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response || !this._typedInstanceId) {\r\n                this._suggestions = [];\r\n            } else {\r\n                this._suggestions = response;\r\n            }\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport './index.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\n\r\nimport { Main } from './components/Main';\r\nimport { MainState } from './states/MainState';\r\nimport { Theme } from './theme';\r\n\r\ndocument.body.style.backgroundColor = Theme.palette.background.paper;\r\n\r\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\r\nconst appState = new MainState();\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={Theme} >\r\n        <Main state={appState} />\r\n    </ThemeProvider>,\r\n    document.getElementById('root') as HTMLElement\r\n);"],"sourceRoot":""}