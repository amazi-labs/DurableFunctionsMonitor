{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/DurableOrchestrationStatus.ts","states/ErrorMessageState.ts","services/BackendClient.ts","states/LoginState.ts","states/OrchestrationsState.ts","components/OrchestrationLink.tsx","CancelToken.ts","theme.ts","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/PurgeHistoryDialog.tsx","components/CleanEntityStorageDialog.tsx","components/Main.tsx","states/MainMenuState.ts","states/MermaidDiagramTabState.ts","states/SequenceDiagramTabState.ts","states/GanttDiagramTabState.ts","states/LiquidMarkupTabState.ts","states/OrchestrationDetailsState.ts","states/PurgeHistoryDialogState.ts","states/CleanEntityStorageDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","states/MainState.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","LoginIcon","observer","React","render","state","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","fontSize","DialogContentText","allowedTaskHubNames","DialogTitle","List","hubName","ListItem","button","Link","href","locationPathName","CircularProgress","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","key","aria-label","MainMenu","componentDidMount","setWindowTitle","showConnectionParamsDialog","showPurgeHistoryDialog","showCleanEntityStorageDialog","connectionParamsDialogOpen","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","label","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","value","onChange","target","connectionString","DialogActions","saveConnectionParams","isDirty","DateTimeHelpers","t","isValid","result","moment","toISOString","slice","utc","isAfter","MinMoment","isBefore","MaxMoment","dt","HistoryEventFields","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","historyEvents","tabTemplateNames","DurableOrchestrationStatusFields","ErrorMessageState","observable","RoutePrefix","DfmRoutePrefix","BackendUri","process","BackendClient","_getTaskHubName","constructor","_getAuthorizationHeaderAsync","call","method","url","data","Promise","reject","then","headers","axios","request","r","FilterOperatorEnum","ShowEntityTypeEnum","LoginState","_isLoggedIn","_userName","_taskHubName","_allowedTaskHubNames","window","location","pathname","pos","lastIndexOf","substring","endsWith","super","_aadApp","login","uri","get","response","loginWithEasyAuthConfig","err","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","console","log","idToken","rawIdToken","Authorization","acquireTokenRedirect","config","Msal","authority","redirectUri","getRootUri","handleRedirectCallback","authErr","accountState","errorCode","account","getAccount","initializeTaskHubNameAndConfirmLogin","loginRedirect","tryGetTaskHubName","hubNames","length","toLowerCase","pathParts","split","filter","p","origin","computed","OrchestrationLink","backendClient","isVsCode","onLinkClicked","orchestrationId","routePrefixAndTaskHubName","extraSanitizeHrefComponent","s","replace","CancelToken","OrchestrationsState","_hiddenColumns","_cancelToken","isCancelled","_orchestrations","_autoRefresh","val","_localStorage","setItem","toString","loadOrchestrations","_timeFrom","resetOrderBy","_timeTill","reloadOrchestrations","_orderByDirection","_orderBy","_filterValue","_filterOperator","_filteredColumn","_showEntityType","_oldFilterValue","_backendClient","momentFrom","_noMorePagesToLoad","_pageSize","_autoRefreshToken","_oldTimeFrom","_oldTimeTill","timeFromString","getItem","subtract","timeTillString","filteredColumnString","filterOperatorString","filterValueString","showEntityTypeString","autoRefreshString","Number","orderByString","orderByDirectionString","hiddenColumnsString","hideColumn","push","join","unhide","removeItem","applyTimeFrom","isValidMoment","applyTimeTill","applyFilterValue","setItems","fieldName","cancel","isAutoRefresh","cancelToken","timeFrom","timeTill","filterClause","OrchestrationsOnly","DurableEntitiesOnly","Equals","StartsWith","Contains","skip","orderByClause","orderByDirection","hiddenColumnsClause","clearTimeout","setTimeout","finally","ShowBoth","colorTheme","REACT_APP_COLOR_THEME","DfmClientConfig","theme","Theme","createMuiTheme","palette","type","RuntimeStatusToStyle","status","backgroundColor","hexToRGBA","error","light","success","warning","background","paper","hex","alpha","parseInt","toFixed","Orchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","AppBar","position","Toolbar","variant","Grid","container","item","xs","style","marginLeft","ampm","autoOk","invalidDateMessage","format","momentAsUtc","onBlur","onAccept","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Checkbox","checked","timeTillEnabled","placeholder","Select","filteredColumn","inputProps","col","filterOperator","filterValue","RadioGroup","showEntityType","FormControlLabel","control","Radio","flex","autoRefresh","size","FormHelperText","orchestrations","hiddenColumns","component","Paper","elevation","renderTable","renderEmptyTable","visibleColumns","f","showLastEventColumn","Table","TableHead","TableRow","onlyOneVisibleColumnLeft","includes","TableCell","onMouseEnter","columnUnderMouse","onMouseLeave","TableSortLabel","active","orderBy","direction","TableBody","orchestration","rowStyle","cellStyle","verticalAlign","InputBase","multiline","rowsMax","renderJson","event","preventDefault","json","JSON","stringify","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","raiseEventDialogOpen","purge","eventName","rows","eventData","raiseEvent","DurableEntityFields","details","runtimeStatusStyle","sm","md","zeroMinWidth","OrchestrationButtons","restartDialogOpen","rewindConfirmationOpen","terminateConfirmationOpen","setCustomStatusDialogOpen","rewind","terminate","newCustomStatus","setCustomStatus","isCustomStatusDirty","restartWithNewInstanceId","restart","OrchestrationFields","events","index","Timestamp","EventType","SubOrchestrationId","FunctionName","Name","ScheduledTime","Result","Details","OrchestrationDetails","loadDetails","tabStates","Tabs","selectedTabIndex","ev","Tab","tabState","selectedTab","rawHtml","dangerouslySetInnerHTML","__html","getStyledSvg","isMermaidDiagram","description","svg","SaveAsSvgButton","URL","createObjectURL","Blob","download","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","row","FormGroup","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","CleanEntityStorageDialog","removeEmptyEntities","releaseOrphanedLocks","clean","numberOfEmptyEntitiesRemoved","numberOfOrphanedLocksRemoved","Main","utils","MomentUtils","loginState","mainMenuState","src","Breadcrumbs","orchestrationDetailsState","Autocomplete","freeSolo","options","isExactMatch","suggestions","typedInstanceId","newValue","goto","renderInput","params","orchestrationsState","purgeHistoryDialogState","cleanEntityStorageDialogState","MainMenuState","_inProgress","_isReadOnly","_oldConnectionString","_oldHubName","_purgeHistoryDialogState","_cleanEntityStorageDialogState","isReadOnly","alert","accountName","version","MermaidDiagramTabState","_diagramCode","_diagramSvg","_loadDetails","load","_mermaidInitialized","mermaid","initialize","startOnLoad","sequence","noteMargin","boxMargin","boxTextMargin","buildDiagram","formatDuration","durationInMs","isNaN","days","Math","floor","c","hours","minutes","seconds","SequenceDiagramTabState","all","getSequenceForOrchestration","sequenceLines","orchestrationName","parentOrchestrationName","results","i","nextLine","formatDateTime","subOrchestrationName","maxDurationInMs","DurationInMs","j","substr","timestamp","GanttDiagramTabState","renderOrchestration","isParentOrchestration","startedEvent","find","completedEvent","needToAddAxisFormat","escapeOrchestrationId","lineName","formatDurationInSeconds","round","LiquidMarkupTabState","_rawHtml","_orchestrationId","OrchestrationDetailsState","_selectedTabIndex","loadCustomTabIfNeeded","_tabStates","_raiseEventDialogOpen","_setCustomStatusDialogOpen","_restartDialogOpen","requestBody","parse","setAutoRefresh","internalLoadDetails","tabStateIndex","orchId","templateName","history","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","statuses","Array","from","values","has","included","add","delete","CleanEntityStorageDialogState","isOpen","_response","TypedLocalStorage","_prefix","localStorage","items","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","random","postMessage","setCustomHandlers","purgeHistoryHandler","cleanEntityStorageHandler","VsCodeTypedLocalStorage","_state","StateFromVsCode","save","MainState","_typedInstanceId","reloadSuggestions","_suggestions","vsCodeApi","acquireVsCodeApi","taskHubName","OrchestrationIdFromVsCode","body","appState","ReactDOM","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.e1c2358a.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 253,\n\t\"./locale.js\": 253\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 538;","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    List, ListItem, Link,\r\n    Menu, MenuItem, Tooltip, Typography, DialogTitle\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage ? (!state.allowedTaskHubNames ? (<>\r\n                            \r\n                            <Container className=\"login-progress\">\r\n                                <CircularProgress />\r\n                            </Container>\r\n                            <DialogContentText>Login in progress...</DialogContentText>\r\n\r\n                        </>) : (<>\r\n                                \r\n                            <DialogTitle>Select your Task Hub</DialogTitle>\r\n                            <List className=\"task-hub-list\">\r\n                                {state.allowedTaskHubNames.map(hubName => (\r\n                                    <ListItem button>\r\n                                        <Link href={state.locationPathName + hubName}>{hubName}</Link>\r\n                                    </ListItem>)\r\n                                )}\r\n                            </List>\r\n                            \r\n                        </>)): (<>\r\n                        \r\n                            <Container className=\"login-progress\">\r\n                                <Error color=\"secondary\" fontSize=\"large\" />\r\n                            </Container>\r\n                            <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            \r\n                        </>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <IconButton color=\"inherit\"\r\n                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n            >\r\n                <MenuIcon/>\r\n            </IconButton>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                <MenuItem onClick={() => state.showCleanEntityStorageDialog()}>Clean Entity Storage...</MenuItem>\r\n            </Menu>\r\n\r\n            <Dialog\r\n                open={state.connectionParamsDialogOpen}\r\n                onClose={() => state.connectionParamsDialogOpen = false}\r\n            >\r\n                <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                    \r\n                    <DialogContentText>\r\n                        {\r\n                            state.isReadonly ?\r\n                                \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively)\" :\r\n                                \"The below values will be saved to local.settings.json file.\"\r\n                        }\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Hub Name\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.hubName}\r\n                        onChange={(evt) => state.hubName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Azure Storage Connection String\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: state.isReadonly }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.connectionString}\r\n                        onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                    />\r\n\r\n                    <ErrorMessage state={state}/>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    {(!state.isReadonly) && (\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    )}\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    public static momentAsUtc(t: moment.Moment): moment.Moment {\r\n        \r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        const result = moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n        result.utc();\r\n        return result;\r\n    }\r\n\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01').utc();\r\n    private static MaxMoment = moment('2100-01-01').utc();\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    FunctionName: string;\r\n    ScheduledTime: string;\r\n    DurationInMs: number;\r\n    SubOrchestrationId: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport type RuntimeStatus = \"Running\" | \"Completed\" | \"ContinuedAsNew\" | \"Failed\" | \"Canceled\" | \"Terminated\" | \"Pending\";\r\n\r\nexport type EntityType = \"Orchestration\" | \"DurableEntity\";\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n    tabTemplateNames?: string[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nconst RoutePrefix = !process.env.REACT_APP_BACKEND_BASE_URI ? (!DfmRoutePrefix ? '/' : `/${DfmRoutePrefix}/`) : process.env.REACT_APP_BACKEND_BASE_URI + '/';\r\nexport const BackendUri = RoutePrefix + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return RoutePrefix + this._getTaskHubName(); }\r\n\r\n    constructor(private _getTaskHubName: () => string, private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + '/' + this._getTaskHubName() + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nexport const OrchestrationsPathPrefix = `/orchestrations/`;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @computed\r\n    get taskHubName(): string { return this._taskHubName;  }\r\n\r\n    @computed\r\n    get allowedTaskHubNames(): string[] { return this._allowedTaskHubNames; }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    // Returns window.location.pathname minus DFM's client-side routing\r\n    get locationPathName(): string {\r\n\r\n        var result = window.location.pathname;\r\n\r\n        const pos = result.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos >= 0) {\r\n            result = result.substring(0, pos);\r\n        }\r\n\r\n        if (!result.endsWith('/')) {\r\n            result += '/';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(response => this.loginWithEasyAuthConfig(response.data), err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<undefined>((resolve, reject) => resolve(undefined));\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    @observable\r\n    private _taskHubName: string;\r\n\r\n    @observable\r\n    private _allowedTaskHubNames: string[];\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    private loginWithEasyAuthConfig(config: {clientId: string, authority: string}) {\r\n\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost and proceed with no auth\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority,\r\n                redirectUri: this.getRootUri()\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, (authErr: Msal.AuthError, accountState: string) => {\r\n\r\n            console.log(`Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`);\r\n        });\r\n\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            this._aadApp.loginRedirect();\r\n\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n        }\r\n    }\r\n\r\n    private initializeTaskHubNameAndConfirmLogin(): void {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            this._taskHubName = hubName;\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Trying to load the list of allowed Task Hubs from the backend\r\n        this.getAuthorizationHeaderAsync().then(headers => {\r\n\r\n            const uri = `${BackendUri}/task-hub-names`;\r\n            axios.get(uri, { headers }).then(response => {\r\n                \r\n                const hubNames: string[] = response.data;\r\n\r\n                if (hubNames.length === 1) {\r\n                    \r\n                    // Redirecting to that Task Hub\r\n                    window.location.pathname = this.locationPathName + hubNames[0];\r\n                } else {\r\n\r\n                    // Asking the user to choose from\r\n                    this._allowedTaskHubNames = hubNames;\r\n                }\r\n\r\n            }, err => {\r\n                this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n            });\r\n        });\r\n    }\r\n\r\n    // Extracts Task Hub name from window.location.href, still honoring client-side routing and subpaths\r\n    private tryGetTaskHubName(): string {\r\n\r\n        const locationPathName = this.locationPathName;\r\n\r\n        // If current path ends with DfmRoutePrefix, then it doesn't actually contain Task Hub name\r\n        if (locationPathName.toLowerCase().endsWith(`/${DfmRoutePrefix.toLowerCase()}/`)) {\r\n            return null;\r\n        }\r\n\r\n        const pathParts = locationPathName.split('/').filter(p => !!p);\r\n        if (pathParts.length < 1) {\r\n            return null;\r\n        }\r\n\r\n        // Consider the last path part to be the Task Hub name.\r\n        // This should work even if we're hosted under some subpath\r\n        return pathParts[pathParts.length - 1];\r\n    }\r\n\r\n    // Returns the site's root URI (everything _before_ Task Hub name)\r\n    private getRootUri(): string {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            const pos = window.location.href.toLowerCase().lastIndexOf('/' + hubName.toLowerCase());\r\n            if (pos >= 0) {\r\n                return window.location.href.substring(0, pos);\r\n            }\r\n        }\r\n\r\n        return window.location.origin + window.location.pathname;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\nexport enum ShowEntityTypeEnum {\r\n    ShowBoth = 0,\r\n    OrchestrationsOnly,\r\n    DurableEntitiesOnly\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get hiddenColumns(): string[] { return this._hiddenColumns; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment { return this._timeFrom; }\r\n    set timeFrom(val: moment.Moment) {\r\n        this._timeFrom = val;\r\n        this.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment { return (!this._timeTill) ? moment().utc() : this._timeTill; }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment().utc() : null;\r\n\r\n        if (!val) {\r\n            this.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val) {\r\n            \r\n            this._orderBy = val;\r\n            this._orderByDirection = 'asc';\r\n\r\n        } else if (this._orderByDirection === 'desc') {\r\n\r\n            this.resetOrderBy();\r\n        }\r\n        else {\r\n            this._orderByDirection = 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showEntityType(): string { return ShowEntityTypeEnum[this._showEntityType]; }\r\n    set showEntityType(val: string) {\r\n\r\n        this._showEntityType = ShowEntityTypeEnum[val];\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n\r\n    @observable\r\n    columnUnderMouse: string;\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState>) {\r\n        super();\r\n        \r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n        momentFrom.utc();\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._timeTill.utc();\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showEntityTypeString = this._localStorage.getItem('showEntityType');\r\n        if (!!showEntityTypeString) {\r\n            this._showEntityType = ShowEntityTypeEnum[showEntityTypeString];\r\n        }\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n\r\n        const hiddenColumnsString = this._localStorage.getItem('hiddenColumns');\r\n        if (!!hiddenColumnsString) {\r\n            this._hiddenColumns = hiddenColumnsString.split('|');\r\n        }\r\n\r\n    }\r\n\r\n    hideColumn(name: string) {\r\n        this._hiddenColumns.push(name);\r\n        this._localStorage.setItem('hiddenColumns', this._hiddenColumns.join('|'));\r\n    }\r\n\r\n    unhide() {\r\n        this._hiddenColumns = [];\r\n        this._localStorage.removeItem('hiddenColumns');\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showEntityType', value: ShowEntityTypeEnum[this._showEntityType] },\r\n            { fieldName: 'orderBy', value: this._orderBy },\r\n            { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        const cancelToken = this._cancelToken;\r\n        if (!!cancelToken.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        cancelToken.inProgress = true;\r\n        \r\n        const timeFrom = this._timeFrom.toISOString();\r\n        const timeTill = !!this._timeTill ? this._timeTill.toISOString() : moment().utc().toISOString();\r\n        var filterClause = `&$filter=createdTime ge '${timeFrom}' and createdTime le '${timeTill}'`;\r\n\r\n        if (this._showEntityType === ShowEntityTypeEnum.OrchestrationsOnly) {\r\n            filterClause += ` and entityType eq 'Orchestration'`;\r\n        }\r\n        else if (this._showEntityType === ShowEntityTypeEnum.DurableEntitiesOnly) {\r\n            filterClause += ` and entityType eq 'DurableEntity'`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const hiddenColumnsClause = !this._hiddenColumns.length ? '' : `&hidden-columns=${this._hiddenColumns.join('|')}`; \r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}${hiddenColumnsClause}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!cancelToken.isCancelled)\r\n            {\r\n                if (!response.length) {\r\n\r\n                    // Stop the infinite scrolling\r\n                    this._noMorePagesToLoad = true;\r\n\r\n                } else {\r\n\r\n                    if (isAutoRefresh) {\r\n                        this._orchestrations = response;\r\n                    } else {\r\n                        this._orchestrations.push(...response);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n    @observable\r\n    private _showEntityType: ShowEntityTypeEnum = ShowEntityTypeEnum.ShowBoth;\r\n\r\n    @observable\r\n    private _hiddenColumns: string[] = [];\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n\r\n    private resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationsPathPrefix } from '../states/LoginState';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, title?: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link href=\"/\" onClick={this.onLinkClicked} >\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link href={`${this.props.backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\nexport class CancelToken {\r\n    @observable\r\n    inProgress: boolean = false;\r\n    @observable\r\n    isCancelled: boolean = false;\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nimport { RuntimeStatus } from './states/DurableOrchestrationStatus';\r\n\r\n// Config object passed as a global variable\r\ndeclare const DfmClientConfig: { theme: string };\r\n\r\nconst colorTheme = !process.env.REACT_APP_COLOR_THEME ? DfmClientConfig.theme : process.env.REACT_APP_COLOR_THEME;\r\n\r\nexport const Theme = createMuiTheme({\r\n    palette: { type: colorTheme === 'dark' ? 'dark': 'light' }\r\n});\r\n\r\nexport function RuntimeStatusToStyle(status: RuntimeStatus): {} {\r\n\r\n    var backgroundColor: string = null;\r\n\r\n    switch (status) {\r\n        case \"Failed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.error.light, 0.2);\r\n            break;\r\n        case \"Completed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.success.light, 0.2);\r\n            break;\r\n        case \"Running\":\r\n            backgroundColor = hexToRGBA(Theme.palette.warning.light, 0.2);\r\n            break;\r\n        case \"Terminated\":\r\n            backgroundColor = hexToRGBA(Theme.palette.background.paper, 0.1);\r\n            break;\r\n    }\r\n\r\n    return !!backgroundColor ? { backgroundColor } : {};\r\n}\r\n\r\nexport function hexToRGBA(hex: string, alpha: number): string {\r\n\r\n    if (hex.length > 4) {\r\n        return `rgba(${parseInt(hex.slice(1, 3), 16)}, ${parseInt(hex.slice(3, 5), 16)}, ${parseInt(hex.slice(5, 7), 16)}, ${alpha.toFixed(1)})`;\r\n    } else {\r\n        return `rgba(${parseInt(hex.slice(1, 2), 16)}, ${parseInt(hex.slice(2, 3), 16)}, ${parseInt(hex.slice(3, 4), 16)}, ${alpha.toFixed(1)})`;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, Checkbox, FormControl, FormControlLabel, FormHelperText, Grid, IconButton, InputBase,\r\n    InputLabel, Link, LinearProgress, MenuItem, Paper, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography,\r\n    Radio, RadioGroup\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState, ShowEntityTypeEnum } from '../states/OrchestrationsState';\r\n\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\nconst MaxJsonLengthToShow = 1024;\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Grid container className=\"toolbar-grid1\">\r\n                        <Grid item xs={12}>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"from-input\"\r\n                                style={{ marginLeft: 10 }}\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"From &nbsp;&nbsp; (UTC)\"\r\n                                invalidDateMessage=\"\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                                onBlur={() => state.applyTimeFrom()}\r\n                                onAccept={() => state.applyTimeFrom()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n                            <FormControl>\r\n                                <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                                <Checkbox\r\n                                    id=\"till-checkbox\"\r\n                                    className=\"till-checkbox\"\r\n                                    disabled={state.inProgress}\r\n                                    checked={state.timeTillEnabled}\r\n                                    onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                                />\r\n                            </FormControl>\r\n\r\n                            {state.timeTillEnabled ? (\r\n                                <KeyboardDateTimePicker\r\n                                    className=\"till-input\"\r\n                                    ampm={false}\r\n                                    autoOk={true}\r\n                                    label=\"(UTC)\"\r\n                                    invalidDateMessage=\"\"\r\n                                    format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                    disabled={state.inProgress}\r\n                                    value={state.timeTill}\r\n                                    onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                                    onBlur={() => state.applyTimeTill()}\r\n                                    onAccept={() => state.applyTimeTill()}\r\n                                    onKeyPress={this.handleKeyPress}\r\n                                />\r\n                            ) : (\r\n                                <TextField\r\n                                    className=\"till-input\"\r\n                                    label=\"(UTC)\"\r\n                                    placeholder=\"[Now]\"\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    type=\"text\"\r\n                                    disabled={true}\r\n                                />\r\n                            )}                        \r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid2\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl>\r\n                                <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select filtered-column-input\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filteredColumn}\r\n                                    onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                    inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                    <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                    {DurableOrchestrationStatusFields.map(col => {\r\n                                        return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                    })}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className=\"toolbar-grid2-item1-select\">\r\n                                <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filterOperator}\r\n                                    onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                    inputProps={{ id: \"filter-operator-select\" }}>\r\n                                    <MenuItem value={0}>Equals</MenuItem>\r\n                                    <MenuItem value={1}>Starts With</MenuItem>\r\n                                    <MenuItem value={2}>Contains</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                            <TextField\r\n                                className=\"filter-value-input\"\r\n                                label=\"Filter Value\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                placeholder=\"[some text or 'null']\"\r\n                                disabled={state.filteredColumn === '0' || state.inProgress}\r\n                                value={state.filterValue}\r\n                                onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                                onBlur={() => state.applyFilterValue()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <RadioGroup\r\n                        value={state.showEntityType}\r\n                        onChange={(evt) => state.showEntityType = (evt.target as HTMLInputElement).value}\r\n                    >\r\n                        <FormControlLabel\r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.ShowBoth]}\r\n                            control={<Radio />}\r\n                            label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Show both</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.OrchestrationsOnly]}\r\n                            control={<Radio />}\r\n                            label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Orchestrations only</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.DurableEntitiesOnly]}\r\n                            control={<Radio />}\r\n                            label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Durable Entities only</Typography>}\r\n                        />\r\n                    </RadioGroup>\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Grid container className=\"toolbar-grid3\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl className=\"form-control-float-right\">\r\n                                <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    inputProps={{ id: \"auto-refresh-select\" }}\r\n                                    value={state.autoRefresh}\r\n                                    onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                                >\r\n                                    <MenuItem value={0}>Never</MenuItem>\r\n                                    <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                    <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                    <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                            <Button\r\n                                className=\"refresh-button form-control-float-right\"\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                size=\"large\"\r\n                                onClick={() => state.inProgress ? state.cancel() : state.reloadOrchestrations()}\r\n                            >\r\n                                {state.inProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {!!state.orchestrations.length && (<>\r\n                    \r\n                    {`${state.orchestrations.length} items shown`}\r\n\r\n                    {!!state.hiddenColumns.length && (<>\r\n                        {`, ${state.hiddenColumns.length} columns hidden `}\r\n                        ( <Link\r\n                                className=\"unhide-button\"\r\n                                component=\"button\"\r\n                                variant=\"inherit\"\r\n                                onClick={() => state.unhide()}\r\n                            >\r\n                                unhide\r\n                        </Link> )\r\n                        \r\n                    </>)}\r\n                </>)}\r\n\r\n            </FormHelperText>\r\n\r\n            <Paper elevation={0} >\r\n                {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n            </Paper>\r\n\r\n            {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        const visibleColumns = DurableOrchestrationStatusFields\r\n            // hiding artificial 'lastEvent' column, when not used\r\n            .filter(f => state.showLastEventColumn ? true : f !== 'lastEvent');\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {visibleColumns.map(col => {\r\n\r\n                            const onlyOneVisibleColumnLeft = visibleColumns.length <= state.hiddenColumns.length + 1;\r\n\r\n                            return !state.hiddenColumns.includes(col) && (\r\n                                <TableCell key={col}\r\n                                    onMouseEnter={() => state.columnUnderMouse = col}\r\n                                    onMouseLeave={() => state.columnUnderMouse = ''}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={state.orderBy === col}\r\n                                        direction={state.orderByDirection}\r\n                                        onClick={() => state.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n                                    </TableSortLabel>\r\n\r\n                                    {state.columnUnderMouse === col && !onlyOneVisibleColumnLeft && (\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size=\"small\"\r\n                                            className=\"column-hide-button\"\r\n                                            onClick={() => state.hideColumn(col)}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>                                        \r\n                                    )}\r\n\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const rowStyle = RuntimeStatusToStyle(orchestration.runtimeStatus);\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                style={rowStyle}\r\n                            >\r\n                                {!state.hiddenColumns.includes('instanceId') && (\r\n                                    <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                        <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={state.backendClient} />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('name') && (\r\n                                    <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                        {orchestration.name}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('createdTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {orchestration.createdTime}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('lastUpdatedTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {orchestration.lastUpdatedTime}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('runtimeStatus') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.runtimeStatus}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('lastEvent') && state.showLastEventColumn && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.lastEvent}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('input') && (\r\n                                    <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.input)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('output') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.output)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('customStatus') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.customStatus)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    private renderJson(json: any): string {\r\n\r\n        const result = JSON.stringify(json);\r\n\r\n        return result.length > MaxJsonLengthToShow ? `[${result.length} symbols long JSON]` : result;\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Send Signal\r\n            </Button>\r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Send Signal</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide signal name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Signal Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Signal Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Send\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Grid, TextField } from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId?.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId?.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    FormControlLabel, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.restartDialogOpen = true}>\r\n                Restart\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.restartDialogOpen}\r\n                onClose={() => state.restartDialogOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Restart</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to restart orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n\r\n                    <FormControlLabel control={<Checkbox\r\n                        checked={state.restartWithNewInstanceId}\r\n                        onChange={(evt) => state.restartWithNewInstanceId = evt.target.checked} />}\r\n                        label=\"Restart with new instanceId\"\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.restartDialogOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.restart()} color=\"secondary\">\r\n                        Restart\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, InputBase, Table, TableBody, TableCell, TableHead, TableRow, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ details: DurableOrchestrationStatus, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"instanceId\"\r\n                        value={details.instanceId}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!details.historyEvents ? details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {this.renderTable(details.historyEvents)}\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any> | undefined): JSX.Element {\r\n\r\n        if (!events || !events.length) {\r\n            return this.renderEmptyTable();\r\n        }\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n\r\n                                    {!!event.SubOrchestrationId ?\r\n                                        (<OrchestrationLink\r\n                                            orchestrationId={event.SubOrchestrationId}\r\n                                            title={event.FunctionName}\r\n                                            backendClient={this.props.backendClient} />)\r\n                                        :\r\n                                        (event.Name ?? event.FunctionName)\r\n                                    }\r\n\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, FormControl, InputLabel, LinearProgress, MenuItem, Paper,\r\n    Select, Tabs, Tab, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { Theme, hexToRGBA } from '../theme';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    {state.details.entityType === \"Orchestration\" && (\r\n                        <OrchestrationButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    {state.details.entityType === \"DurableEntity\" && (\r\n                        <DurableEntityButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            inputProps={{ id: 'auto-refresh-select' }}>\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => state.loadDetails()}\r\n                    >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {!!state.tabStates.length && (<>\r\n                <AppBar color=\"inherit\" position=\"static\">\r\n                    <Tabs value={state.selectedTabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.selectedTabIndex = val}>\r\n                        \r\n                        <Tab className=\"tab-title\" disabled={state.inProgress} \r\n                            label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Details</Typography>}\r\n                        />\r\n                        \r\n                        {state.tabStates.map(tabState => (\r\n                            <Tab className=\"tab-title\" key={tabState.name} disabled={state.inProgress} \r\n                                label={<Typography color=\"textPrimary\" variant=\"subtitle2\">{tabState.name}</Typography>}\r\n                            />\r\n                        ))}\r\n\r\n                    </Tabs>\r\n                </AppBar>\r\n            </>)}\r\n\r\n            {!state.selectedTabIndex && state.details.entityType === \"Orchestration\" &&\r\n                (<OrchestrationFields details={state.details} backendClient={state.backendClient} />)\r\n            }\r\n            {!state.selectedTabIndex && state.details.entityType === \"DurableEntity\" &&\r\n                <DurableEntityFields details={state.details} />\r\n            }\r\n\r\n            {!!state.selectedTab && !!state.selectedTab.rawHtml && (<>\r\n\r\n                <div\r\n                    className=\"raw-html-div\"\r\n                    style={\r\n                        Theme.palette.type === \"dark\" ? {\r\n                            backgroundColor: '#aaa'\r\n                        } : {}\r\n                    }\r\n                    dangerouslySetInnerHTML={{ __html: this.getStyledSvg(state.selectedTab.rawHtml) }}\r\n                />\r\n                \r\n                {state.selectedTab.isMermaidDiagram && (\r\n\r\n                    <Toolbar variant=\"dense\">\r\n                        <TextField\r\n                            label=\"mermaid diagram code (for your reference)\"\r\n                            value={state.selectedTab.description}\r\n                            margin=\"normal\"\r\n                            InputProps={{ readOnly: true }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            rowsMax={4}\r\n                        />\r\n\r\n                        <Box width={20} />\r\n\r\n                        <SaveAsSvgButton\r\n                            svg={this.getStyledSvg(state.selectedTab.rawHtml)}\r\n                            orchestrationId={state.orchestrationId}\r\n                            inProgress={state.inProgress}\r\n                            backendClient={state.backendClient}\r\n                        />\r\n\r\n                    </Toolbar>\r\n                )}\r\n                \r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n\r\n    // Appends some styling to SVG code, so it can also be saved as file\r\n    private getStyledSvg(svg: string): string {\r\n\r\n        return svg.replace('</style>',\r\n            '.note { stroke: none !important; fill: none !important; } ' +\r\n            '.noteText { font-size: 9px !important; } ' +\r\n            '</style>'\r\n        );\r\n    }\r\n}\r\n\r\nclass SaveAsSvgButton extends React.Component<{ svg: string, orchestrationId: string, inProgress: boolean, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    size=\"large\"\r\n                    className=\"save-svg-button\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => this.props.backendClient.call('SaveAs', this.props.orchestrationId + '.svg', this.props.svg)}\r\n                >\r\n                    <div>\r\n                        <SaveIcon />\r\n                        <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                    </div>\r\n                </Button>\r\n            );\r\n\r\n        } else {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    size=\"large\"\r\n                    className=\"save-svg-button\"\r\n                    disabled={this.props.inProgress}\r\n                    href={URL.createObjectURL(new Blob([this.props.svg], { type: 'image/svg+xml' }))}\r\n                    download={this.props.orchestrationId + '.svg'}\r\n                >\r\n                    <div>\r\n                        <SaveIcon />\r\n                        <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                    </div>\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                        To clean up deleted Entities use the 'Clean Entity Storage' command instead. \r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-from-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? 'Last Updated From (UTC)' : 'From (UTC)'}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? 'Last Updated Till (UTC)' : 'Till (UTC)'}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === 'Orchestration' && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === 'DurableEntity' && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, LinearProgress, \r\n} from '@material-ui/core';\r\n\r\nimport './CleanEntityStorageDialog.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { CleanEntityStorageDialogState } from '../states/CleanEntityStorageDialogState';\r\n\r\n// Dialog with parameters for cleaning entity storage\r\n@observer\r\nexport class CleanEntityStorageDialog extends React.Component<{ state: CleanEntityStorageDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Clean Entity Storage</DialogTitle>\r\n\r\n                {!state.response && (<>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                        <DialogContentText>\r\n                            An entity is considered empty, and is removed, if it has no state, is not locked, and has been idle for more than EntityMessageReorderWindowInMinutes. Locks are considered orphaned, and are released, if the orchestration that holds them is not in state Running.\r\n                        </DialogContentText>\r\n\r\n                        <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                            <FormGroup row>\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.removeEmptyEntities}\r\n                                    onChange={(evt) => state.removeEmptyEntities = evt.target.checked} />}\r\n                                    label=\"Remove Empty Entities\"\r\n                                />\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.releaseOrphanedLocks}\r\n                                    onChange={(evt) => state.releaseOrphanedLocks = evt.target.checked} />}\r\n                                    label=\"Release Orphaned Locks\"\r\n                                />\r\n                                \r\n                            </FormGroup>\r\n                        </FormControl>\r\n\r\n                        <ErrorMessage state={state} />\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => state.clean()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                            Clean\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n                {!!state.response && (<>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfEmptyEntitiesRemoved} empty entities removed. \r\n                        </DialogContentText>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfOrphanedLocksRemoved} orphaned locks removed.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\nimport { CleanEntityStorageDialog } from './CleanEntityStorageDialog';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={`${!DfmRoutePrefix ? '' : '/'}${DfmRoutePrefix}/logo.svg`} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                Durable Functions Monitor\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={state.loginState.locationPathName}>\r\n                                    / instances\r\n                                </Link>\r\n\r\n                                {!state.orchestrationDetailsState ?\r\n                                    (\r\n                                        <Autocomplete\r\n                                            className=\"instance-id-input\"\r\n                                            freeSolo\r\n                                            options={state.isExactMatch ? [] : state.suggestions}\r\n                                            value={state.typedInstanceId}\r\n                                            onChange={(evt, newValue) => {\r\n                                                state.typedInstanceId = newValue ?? '';\r\n                                                if (!!newValue) {\r\n                                                    state.goto();\r\n                                                }\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    className={state.isExactMatch ? 'instance-id-valid' : null}\r\n                                                    size=\"small\"\r\n                                                    label=\"instanceId to go to...\"\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(evt) => state.typedInstanceId = evt.target.value as string}\r\n                                                    onKeyPress={(evt) => this.handleKeyPress(evt)}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    )\r\n                                    :\r\n                                    (<Typography color=\"inherit\">\r\n                                        {state.orchestrationDetailsState.orchestrationId}\r\n                                    </Typography>)\r\n                                }\r\n\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n                <CleanEntityStorageDialog state={state.cleanEntityStorageDialogState} />\r\n\r\n            </></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.goto();\r\n        }\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _purgeHistoryDialogState: PurgeHistoryDialogState,\r\n        private _cleanEntityStorageDialogState: CleanEntityStorageDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    showCleanEntityStorageDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this._cleanEntityStorageDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n    \r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { observable, computed } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\n\r\n// Base class for all mermaid diagram tab states\r\nexport abstract class MermaidDiagramTabState implements ICustomTabState {\r\n\r\n    readonly name: string = \"Diagram\";\r\n    readonly isMermaidDiagram: boolean = true;\r\n\r\n    @computed\r\n    get description(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; };\r\n\r\n    constructor(protected _loadDetails: (orchestrationId: string) => Promise<DurableOrchestrationStatus>) {\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus) : Promise<void> {\r\n\r\n        // Only doing this on demand, just in case\r\n        if (!MermaidDiagramTabState._mermaidInitialized) {\r\n\r\n            mermaid.initialize({\r\n                startOnLoad: true,\r\n                sequence: {\r\n                    noteMargin: 0,\r\n                    boxMargin: 5,\r\n                    boxTextMargin: 5\r\n                }\r\n            });\r\n            MermaidDiagramTabState._mermaidInitialized = true;\r\n        }\r\n\r\n        if (!details.historyEvents) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.buildDiagram(details);\r\n    }\r\n\r\n    @observable\r\n    protected _diagramCode: string;\r\n    @observable\r\n    protected _diagramSvg: string;\r\n\r\n    private static _mermaidInitialized = false;\r\n\r\n    protected abstract buildDiagram(details: DurableOrchestrationStatus): Promise<void>;\r\n\r\n    protected formatDuration(durationInMs: number): string {\r\n\r\n        var result = '';\r\n        if (isNaN(durationInMs) || (durationInMs < 0)) {\r\n            return result;\r\n        }\r\n\r\n        const days = Math.floor(durationInMs / 86400000);\r\n        if (days > 30) {\r\n            // something went wrong...\r\n            return result;\r\n        }\r\n\r\n        var c = 0;\r\n\r\n        if (days > 0) {\r\n            result += days.toFixed(0) + 'd';\r\n            ++c;\r\n            durationInMs = durationInMs % 86400000;\r\n        }\r\n\r\n        const hours = Math.floor(durationInMs / 3600000);\r\n        if (hours > 0) {\r\n            result += hours.toFixed(0) + 'h';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n            \r\n            durationInMs = durationInMs % 3600000;\r\n        }\r\n\r\n        const minutes = Math.floor(durationInMs / 60000);\r\n        if (minutes > 0) {\r\n            result += minutes.toFixed(0) + 'm';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 60000;\r\n        }\r\n\r\n        const seconds = Math.floor(durationInMs / 1000);\r\n        if (seconds > 0) {\r\n            result += seconds.toFixed(0) + 's';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 1000;\r\n        }\r\n\r\n        if (durationInMs > 0) {\r\n            result += durationInMs.toFixed(0) + 'ms';\r\n        }\r\n\r\n        return `(${result})`;\r\n    }\r\n}","import mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\n\r\n// State of Sequence Diagram tab on OrchestrationDetails view\r\nexport class SequenceDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Sequence Diagram\";\r\n\r\n    constructor(loadDetails: (orchestrationId: string) => Promise<DurableOrchestrationStatus>) {\r\n        super(loadDetails);\r\n    }\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus) : Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.getSequenceForOrchestration(details.name, '.', details.historyEvents)).then(sequenceLines => {\r\n\r\n                this._diagramCode = 'sequenceDiagram \\n' + sequenceLines.join('');\r\n\r\n                try {\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private getSequenceForOrchestration(orchestrationName: string,\r\n        parentOrchestrationName: string,\r\n        historyEvents: HistoryEvent[]): Promise<string>[] {\r\n\r\n        const externalActor = '.'\r\n        const results: Promise<string>[] = [];\r\n\r\n        var i = 0;\r\n        while (i < historyEvents.length) {\r\n            const event = historyEvents[i];\r\n\r\n            switch (event.EventType) {\r\n                case 'ExecutionStarted':\r\n\r\n                    var nextLine =\r\n                        `${parentOrchestrationName}->>+${orchestrationName}:[ExecutionStarted] \\n` +\r\n                        `Note over ${parentOrchestrationName},${orchestrationName}: ${this.formatDateTime(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadDetails(event.SubOrchestrationId).then(details => {\r\n\r\n                                Promise.all(this.getSequenceForOrchestration(details.name, orchestrationName, details.historyEvents)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`${orchestrationName}-x${subOrchestrationName}:[FailedToLoad] \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    var nextLine = `${orchestrationName}-x${event.FunctionName}:[SubOrchestrationInstanceFailed] \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    // Trying to aggregate multiple parallel calls\r\n                    var maxDurationInMs = event.DurationInMs;\r\n                    var j = i + 1;\r\n                    for (; j < historyEvents.length &&\r\n                        historyEvents[j].EventType === 'TaskCompleted' &&\r\n                        historyEvents[j].FunctionName === event.FunctionName &&\r\n                        historyEvents[j].ScheduledTime.substr(0, 23) === event.ScheduledTime.substr(0, 23);\r\n                        j++) {\r\n\r\n                        if (maxDurationInMs < historyEvents[j].DurationInMs) {\r\n                            maxDurationInMs = historyEvents[j].DurationInMs;\r\n                        }\r\n                    }\r\n\r\n                    if (j === i + 1) {\r\n\r\n                        const nextLine =\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n                        \r\n                    } else {\r\n\r\n                        const nextLine =\r\n                            `par ${j - i} calls \\n` +\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(maxDurationInMs)} \\n` +\r\n                            `end \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n\r\n                        i = j - 1;\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    var nextLine = `${orchestrationName}-x${orchestrationName}:${event.FunctionName}(failed) \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'EventRaised':\r\n\r\n                    var nextLine =\r\n                        `${externalActor}->>${orchestrationName}:${event.Name} \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatDateTime(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TimerFired':\r\n\r\n                    var nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[TimerFired] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatDateTime(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionTerminated':\r\n\r\n                    var nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[ExecutionTerminated] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatDateTime(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionCompleted':\r\n\r\n                    var nextLine =\r\n                        `${orchestrationName}-->>-${parentOrchestrationName}:[ExecutionCompleted] \\n` +\r\n                        `Note over ${orchestrationName},${parentOrchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatDateTime(timestamp: string): string {\r\n        if (timestamp.length <= 11) {\r\n            return timestamp;\r\n        }\r\n        return '(' + timestamp.substr(11, 12) + 'Z)';\r\n    }\r\n}","import mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\n\r\n// State of Gantt Diagram tab on OrchestrationDetails view\r\nexport class GanttDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Gantt Chart\";\r\n\r\n    constructor(loadDetails: (orchestrationId: string) => Promise<DurableOrchestrationStatus>) {\r\n        super(loadDetails);\r\n    }\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus): Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.renderOrchestration(details, true)).then(sequenceLines => {\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title ${details.name}(${details.instanceId}) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss.SSS \\n' +\r\n                    sequenceLines.join('');\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private renderOrchestration(details: DurableOrchestrationStatus, isParentOrchestration: boolean): Promise<string>[] {\r\n\r\n        const results: Promise<string>[] = [];\r\n\r\n        const orchestrationId = details.instanceId;\r\n        const orchestrationName = details.name;\r\n        const historyEvents = details.historyEvents;\r\n\r\n        const startedEvent = historyEvents.find(event => event.EventType == 'ExecutionStarted');\r\n        const completedEvent = historyEvents.find(event => event.EventType == 'ExecutionCompleted');\r\n\r\n        var needToAddAxisFormat = isParentOrchestration;\r\n\r\n        if (!!startedEvent && !!completedEvent) {\r\n\r\n            if (needToAddAxisFormat) {\r\n\r\n                const longerThanADay = completedEvent.DurationInMs > 86400000;\r\n                var nextLine = longerThanADay ? 'axisFormat %Y-%m-%d %H:%M \\n' : 'axisFormat %H:%M:%S \\n';\r\n                results.push(Promise.resolve(nextLine));\r\n                needToAddAxisFormat = false;\r\n            }\r\n            \r\n            var nextLine = isParentOrchestration ? '' : `section ${orchestrationName}(${this.escapeOrchestrationId(orchestrationId)}) \\n`;\r\n\r\n            var lineName = this.formatDuration(completedEvent.DurationInMs);\r\n            if (!lineName) {\r\n                lineName = orchestrationName;\r\n            }\r\n\r\n            nextLine += `${lineName}: ${isParentOrchestration ? '' : 'active,'} ${this.formatDateTime(startedEvent.Timestamp)}, ${this.formatDurationInSeconds(completedEvent.DurationInMs)} \\n`;\r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        if (needToAddAxisFormat) {\r\n\r\n            var nextLine = 'axisFormat %H:%M:%S \\n';\r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        for(var event of historyEvents) {\r\n        \r\n            switch (event.EventType) {\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadDetails(event.SubOrchestrationId).then(details => {\r\n\r\n                                Promise.all(this.renderOrchestration(details, false)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`%% Failed to load ${subOrchestrationName}. ${err.message} \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    var nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: done, ${this.formatDateTime(event.ScheduledTime)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    var nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: crit, ${this.formatDateTime(event.ScheduledTime)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatDateTime(timestamp: string): string {\r\n\r\n        return timestamp.substr(0, 23);\r\n    }\r\n\r\n    private formatDurationInSeconds(durationInMs: number): string {\r\n\r\n        return Math.round(durationInMs / 1000).toFixed(0) + 's';\r\n    }\r\n\r\n    private escapeOrchestrationId(id: string) {\r\n\r\n        return id.replace(/[:;]/g, ' ');\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ICustomTabState } from './ICustomTabState';\r\n\r\n// State of a custom liquid markup tab on OrchestrationDetails view\r\nexport class LiquidMarkupTabState implements ICustomTabState {\r\n\r\n    name: string = \"\";\r\n    readonly description: string = \"\";\r\n    readonly isMermaidDiagram: boolean = false;\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._rawHtml; };\r\n\r\n    constructor(private _orchestrationId: string, private _backendClient: IBackendClient) {\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus): Promise<void> {\r\n        \r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            const uri = `/orchestrations('${this._orchestrationId}')/custom-tab-markup('${this.name}')`;\r\n\r\n            this._backendClient.call('POST', uri).then(response => { \r\n\r\n                this._rawHtml = response;\r\n                resolve();\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _rawHtml: string;\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { SequenceDiagramTabState } from './SequenceDiagramTabState';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { GanttDiagramTabState } from './GanttDiagramTabState';\r\nimport { LiquidMarkupTabState } from './LiquidMarkupTabState';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get selectedTabIndex(): number { return this._selectedTabIndex; }\r\n    set selectedTabIndex(val: number) {\r\n\r\n        this._selectedTabIndex = val;\r\n        this.loadCustomTabIfNeeded();\r\n    }\r\n\r\n    get selectedTab(): ICustomTabState {\r\n        return !this._selectedTabIndex ? null : this._tabStates[this._selectedTabIndex - 1];\r\n    }\r\n\r\n    @observable\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        this.newCustomStatus = !!this.details.customStatus ? JSON.stringify(this.details.customStatus) : '';\r\n    }\r\n\r\n    @computed\r\n    get restartDialogOpen(): boolean { return this._restartDialogOpen; }\r\n    set restartDialogOpen(val: boolean) {\r\n        this._restartDialogOpen = val;\r\n        this.restartWithNewInstanceId = true;\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this.details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this.details.customStatus);\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n    @observable\r\n    restartWithNewInstanceId: boolean = true;\r\n\r\n    @computed\r\n    get tabStates(): ICustomTabState[] { return this._tabStates; }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.details = new DurableOrchestrationStatus();\r\n            this._tabStates = [];\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    restart() {\r\n        this.restartDialogOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/restart`;\r\n        const requestBody = { restartWithNewInstanceId: this.restartWithNewInstanceId };\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to restart: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse event data: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse custom status: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to set custom status: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n    \r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        this.internalLoadDetails(this._orchestrationId).then(response => {\r\n        \r\n            this.details = response;\r\n\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n\r\n            var tabStateIndex = 0;\r\n\r\n            // Loading sequence diagram tab\r\n            if (this.details.entityType === \"Orchestration\") {\r\n               \r\n                if (this._tabStates.length <= tabStateIndex) {\r\n                    this._tabStates.push(new SequenceDiagramTabState((orchId) => this.internalLoadDetails(orchId)));\r\n                    this._tabStates.push(new GanttDiagramTabState((orchId) => this.internalLoadDetails(orchId)));\r\n                }\r\n                tabStateIndex += 2;\r\n            }\r\n\r\n            // Loading custom tabs\r\n            if (!!this.details.tabTemplateNames) {\r\n                for (var templateName of this.details.tabTemplateNames) {\r\n\r\n                    if (this._tabStates.length <= tabStateIndex) {\r\n                        this._tabStates.push(new LiquidMarkupTabState(this._orchestrationId, this._backendClient));\r\n                    }\r\n                    this._tabStates[tabStateIndex].name = templateName;\r\n                    tabStateIndex++;\r\n                }                \r\n            }\r\n\r\n            this._inProgress = false;\r\n\r\n            // Reloading the current custom tab as well\r\n            this.loadCustomTabIfNeeded();\r\n            \r\n        }, err => {\r\n            this._inProgress = false;\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    private loadCustomTabIfNeeded(): void {\r\n\r\n        if (!!this._inProgress || !this.selectedTab) {\r\n            return;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this.selectedTab.load(this.details).then(() => {}, err => { \r\n                \r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Failed to load tab: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    private setAutoRefresh(): void {\r\n\r\n        if (!this._autoRefresh) {\r\n            return;\r\n        }\r\n\r\n        if (!!this._autoRefreshToken) {\r\n            clearTimeout(this._autoRefreshToken);\r\n        }\r\n        this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n    }\r\n\r\n    @observable\r\n    private _tabStates: ICustomTabState[] = [];\r\n\r\n    @observable\r\n    private _selectedTabIndex: number = 0;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _restartDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n\r\n    private internalLoadDetails(orchestrationId: string): Promise<DurableOrchestrationStatus> {\r\n\r\n        const uri = `/orchestrations('${orchestrationId}')`;\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response) {\r\n                throw { message: `Orchestration '${orchestrationId}' not found.` };\r\n            }\r\n\r\n            // Based on backend implementation, this field can appear to be called differently ('historyEvents' vs. 'history')\r\n            // Fixing that here\r\n            if (!!response.history) {\r\n                response.historyEvents = response.history;\r\n            }\r\n\r\n            return response;\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { observable, computed } from 'mobx'\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Clean Entity Storage Dialog\r\nexport class CleanEntityStorageDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(isOpen: boolean) {\r\n        this._dialogOpen = isOpen;\r\n\r\n        if (isOpen) {\r\n            this._response = null;\r\n            this.removeEmptyEntities = true;\r\n            this.releaseOrphanedLocks = true;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get response(): CleanEntityStorageResponse | null { return this._response; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return true;\r\n    };\r\n\r\n    @observable\r\n    removeEmptyEntities: boolean;\r\n    @observable\r\n    releaseOrphanedLocks: boolean;\r\n    \r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    clean() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/clean-entity-storage', {\r\n            removeEmptyEntities: this.removeEmptyEntities,\r\n            releaseOrphanedLocks: this.releaseOrphanedLocks\r\n        }).then(response => {\r\n            this._response = response;\r\n        }, err => {\r\n            this.errorMessage = `Clean Entity Storage failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _response: CleanEntityStorageResponse | null = null;\r\n}\r\n\r\nexport class CleanEntityStorageResponse\r\n{\r\n    numberOfEmptyEntitiesRemoved: number;\r\n    numberOfOrphanedLocksRemoved: number;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n            } else {\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return null; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setCustomHandlers(purgeHistoryHandler: () => void, cleanEntityStorageHandler: () => void) {\r\n\r\n        this._handlers['purgeHistory'] = purgeHistoryHandler;\r\n        this._handlers['cleanEntityStorage'] = cleanEntityStorageHandler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const StateFromVsCode: {};\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n        this._state = StateFromVsCode[this._prefix];\r\n        if (!this._state) {\r\n            this._state = {};\r\n        }\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        this._state[fieldName] = value\r\n        this.save();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete this._state[item.fieldName];\r\n            } else {\r\n                this._state[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        this.save();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        return this._state[fieldName];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete this._state[fieldName];\r\n        this.save();\r\n    }\r\n\r\n    private readonly _state: any;\r\n\r\n    private save(): void {\r\n        this._vsCodeApi.postMessage({ method: 'PersistState', key: this._prefix, data: this._state });\r\n    }\r\n}\r\n","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { BackendClient } from '../services/BackendClient';\r\nimport { LoginState, OrchestrationsPathPrefix } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n    cleanEntityStorageDialogState: CleanEntityStorageDialogState;\r\n\r\n    @computed\r\n    get typedInstanceId(): string {\r\n        return this._typedInstanceId;\r\n    }\r\n    set typedInstanceId(s: string) {\r\n        this._typedInstanceId = s;\r\n        this.reloadSuggestions();\r\n    }\r\n\r\n    @computed\r\n    get suggestions(): string[] {\r\n        return this._suggestions;\r\n    }\r\n\r\n    @computed\r\n    get isExactMatch(): boolean {\r\n        return this._suggestions.length === 1 && this._suggestions[0] === this._typedInstanceId;\r\n    }\r\n    \r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setCustomHandlers(\r\n                    () => this.purgeHistoryDialogState.dialogOpen = true,\r\n                    () => this.cleanEntityStorageDialogState.dialogOpen = true\r\n                );\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(() => this.loginState.taskHubName, () => this.loginState.getAuthorizationHeaderAsync());\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState, this.cleanEntityStorageDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Opens the entered orchestrationId in a new tab\r\n    goto() {\r\n        window.open(`${this._backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this._typedInstanceId}`);\r\n        this._typedInstanceId = '';\r\n        this._suggestions = [];\r\n    }\r\n\r\n    @observable\r\n    private _suggestions: string[] = [];\r\n    @observable\r\n    private _typedInstanceId: string = '';\r\n\r\n    private readonly _backendClient: IBackendClient;\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const pos = window.location.pathname.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos < 0) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(pos + OrchestrationsPathPrefix.length);\r\n    }\r\n\r\n    // Reloads list of suggested instanceIds\r\n    private reloadSuggestions(): void {\r\n\r\n        if (!this._typedInstanceId || this._typedInstanceId.length < 2) {\r\n            this._suggestions = [];\r\n            return;\r\n        }\r\n\r\n        const uri = `/id-suggestions(prefix='${this._typedInstanceId}')`;\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response || !this._typedInstanceId) {\r\n                this._suggestions = [];\r\n            } else {\r\n                this._suggestions = response;\r\n            }\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport './index.css';\r\n\r\nimport { Main } from './components/Main';\r\nimport { MainState } from './states/MainState';\r\nimport { Theme } from './theme';\r\n\r\ndocument.body.style.backgroundColor = Theme.palette.background.paper;\r\n\r\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\r\nconst appState = new MainState();\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={Theme} >\r\n        <Main state={appState} />\r\n    </ThemeProvider>,\r\n    document.getElementById('root') as HTMLElement\r\n);"],"sourceRoot":""}