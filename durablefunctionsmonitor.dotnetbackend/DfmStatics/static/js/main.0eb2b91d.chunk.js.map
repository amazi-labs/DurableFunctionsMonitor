{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/DurableOrchestrationStatus.ts","states/ErrorMessageState.ts","services/BackendClient.ts","states/LoginState.ts","theme.ts","components/OrchestrationLink.tsx","CancelToken.ts","states/ResultsListTabState.ts","states/MermaidDiagramStateBase.ts","states/ResultsGanttDiagramTabState.ts","states/ResultsHistogramTabState.ts","states/OrchestrationsState.ts","components/SaveAsSvgButton.tsx","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/PurgeHistoryDialog.tsx","components/CleanEntityStorageDialog.tsx","components/Main.tsx","states/MainMenuState.ts","states/MermaidDiagramTabState.ts","states/SequenceDiagramTabState.ts","states/GanttDiagramTabState.ts","states/LiquidMarkupTabState.ts","states/OrchestrationDetailsState.ts","states/PurgeHistoryDialogState.ts","states/CleanEntityStorageDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","states/MainState.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","LoginIcon","observer","React","render","state","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","fontSize","DialogContentText","allowedTaskHubNames","DialogTitle","List","hubName","ListItem","button","Link","href","locationPathName","CircularProgress","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","key","aria-label","MainMenu","componentDidMount","setWindowTitle","showConnectionParamsDialog","showPurgeHistoryDialog","showCleanEntityStorageDialog","connectionParamsDialogOpen","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","label","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","value","onChange","target","connectionString","DialogActions","saveConnectionParams","isDirty","DateTimeHelpers","t","isValid","result","moment","toISOString","slice","utc","isAfter","MinMoment","isBefore","MaxMoment","dt","HistoryEventFields","RuntimeStatuses","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","tabTemplateNames","DurableOrchestrationStatusFields","ErrorMessageState","observable","RoutePrefix","DfmRoutePrefix","BackendUri","process","BackendClient","_getTaskHubName","constructor","_getAuthorizationHeaderAsync","call","method","url","data","Promise","reject","then","headers","axios","request","r","OrchestrationsPathPrefix","LoginState","_isLoggedIn","_userName","_taskHubName","_allowedTaskHubNames","window","location","pathname","pos","lastIndexOf","substring","endsWith","super","_aadApp","defaults","maxRedirects","login","uri","get","response","loginWithEasyAuthConfig","err","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","console","log","idToken","rawIdToken","Authorization","acquireTokenRedirect","config","interceptors","use","reload","initializeTaskHubNameAndConfirmLogin","Msal","authority","redirectUri","getRootUri","handleRedirectCallback","authErr","accountState","errorCode","account","getAccount","loginRedirect","tryGetTaskHubName","hubNames","length","toLowerCase","pathParts","split","filter","p","origin","substr","computed","colorTheme","REACT_APP_COLOR_THEME","DfmClientConfig","theme","Theme","createMuiTheme","palette","type","CustomTabStyle","backgroundColor","RuntimeStatusToStyle","status","hexToRGBA","error","light","success","warning","background","paper","hex","alpha","parseInt","toFixed","OrchestrationLink","backendClient","isVsCode","onLinkClicked","orchestrationId","routePrefixAndTaskHubName","extraSanitizeHrefComponent","s","replace","CancelToken","ResultsListTabState","_hiddenColumns","_orchestrations","_orderByDirection","_orderBy","val","resetOrderBy","_refresh","_backendClient","_localStorage","_noMorePagesToLoad","_pageSize","orderByString","getItem","orderByDirectionString","hiddenColumnsString","hideColumn","push","setItem","join","unhide","removeItem","reset","load","filterClause","cancelToken","isAutoRefresh","setItems","fieldName","skip","orderByClause","orderByDirection","hiddenColumnsClause","isCancelled","MermaidDiagramStateBase","initMermaidWhenNeeded","_mermaidInitialized","mermaid","initialize","startOnLoad","sequence","noteMargin","boxMargin","boxTextMargin","escapeTitle","formatDuration","durationInMs","isNaN","days","Math","floor","c","hours","minutes","seconds","formatDateTime","timestamp","formatDurationInSeconds","round","ResultsGanttDiagramTabState","_diagramSvg","_diagramCode","instances","all","renderDiagram","sequenceLines","svg","results","prevSectionName","sectionNr","instance","nextLine","sectionName","Date","getTime","ResultsHistogramTabState","_zoomedIn","_histograms","_numOfInstancesShown","_filterState","_originalTimeInterval","_applyingZoom","_numOfIntervals","timeFrom","timeTill","startTime","valueOf","bucketLength","ceil","loadNextBatch","applyZoom","left","right","cancel","from","till","reloadOrchestrations","resetZoom","pageNumber","instanceTypeName","emptyHistogram","i","x0","x","y","instanceStartPos","FilterOperatorEnum","ResultsTabEnum","OrchestrationsState","_selectedTabIndex","_tabStates","_cancelToken","_autoRefresh","toString","loadOrchestrations","_timeFrom","listState","_timeTill","_filterValue","_filterOperator","_filteredColumn","_showStatuses","isStatusChecked","includes","setStatusChecked","checked","indexOf","splice","_refreshToken","clearTimeout","setTimeout","_delayedRefreshDelay","rescheduleDelayedRefresh","_oldFilterValue","momentFrom","_oldTimeFrom","_oldTimeTill","timeFromString","subtract","timeTillString","filteredColumnString","filterOperatorString","filterValueString","showStatusesString","JSON","parse","autoRefreshString","Number","applyTimeFrom","isValidMoment","applyTimeTill","applyFilterValue","stringify","Equals","StartsWith","Contains","NotEquals","NotStartsWith","NotContains","selectedTabState","finally","SaveAsSvgButton","variant","size","fileName","URL","createObjectURL","Blob","download","getStyledSvg","Orchestrations","document","addEventListener","selectedTabIndex","scrollingElement","scrollHeight","innerHeight","scrollTop","Histogram","ctrlKey","keyCode","AppBar","position","Toolbar","Grid","container","item","xs","style","marginLeft","ampm","autoOk","invalidDateMessage","format","momentAsUtc","onBlur","onAccept","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Checkbox","timeTillEnabled","placeholder","Select","filteredColumn","inputProps","col","filterOperator","filterValue","FormGroup","showStatuses","onScroll","FormControlLabel","control","flex","autoRefresh","Tabs","ev","Tab","FormHelperText","orchestrations","hiddenColumns","component","Paper","elevation","renderTable","showLastEventColumn","renderEmptyTable","renderHistogram","Gantt","renderGanttChart","histogramState","typeNames","histograms","sort","numOfInstancesShown","zoomedIn","innerWidth","xType","stackBy","top","tickTotal","tickFormat","formatTimeTick","typeName","stroke","getColorCodeForInstanceType","drag","enableY","onDragEnd","area","colors","items","orientation","ganttState","rawHtml","dangerouslySetInnerHTML","__html","diagramCode","multiline","rowsMax","visibleColumns","f","Table","TableHead","TableRow","onlyOneVisibleColumnLeft","TableCell","onMouseEnter","columnUnderMouse","onMouseLeave","TableSortLabel","active","orderBy","direction","TableBody","orchestration","rowStyle","cellStyle","verticalAlign","InputBase","renderJson","instanceType","hashCode","charCodeAt","m","timeRange","second","millisecond","event","preventDefault","json","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","raiseEventDialogOpen","purge","eventName","rows","eventData","raiseEvent","DurableEntityFields","details","runtimeStatusStyle","sm","md","zeroMinWidth","OrchestrationButtons","restartDialogOpen","rewindConfirmationOpen","terminateConfirmationOpen","setCustomStatusDialogOpen","rewind","terminate","newCustomStatus","setCustomStatus","isCustomStatusDirty","restartWithNewInstanceId","restart","OrchestrationFields","loadHistoryIfNeeded","totalItems","historyTotalCount","history","itemsShown","events","index","Timestamp","EventType","SubOrchestrationId","FunctionName","Name","ScheduledTime","Result","Details","OrchestrationDetails","loadDetails","loadInProgress","tabStates","tabState","selectedTab","isMermaidDiagram","description","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","RadioGroup","row","Radio","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","CleanEntityStorageDialog","removeEmptyEntities","releaseOrphanedLocks","clean","numberOfEmptyEntitiesRemoved","numberOfOrphanedLocksRemoved","Main","utils","MomentUtils","loginState","mainMenuState","src","Breadcrumbs","orchestrationDetailsState","Autocomplete","freeSolo","options","isExactMatch","suggestions","typedInstanceId","newValue","goto","renderInput","params","orchestrationsState","purgeHistoryDialogState","cleanEntityStorageDialogState","MainMenuState","_inProgress","_isReadOnly","_oldConnectionString","_oldHubName","_purgeHistoryDialogState","_cleanEntityStorageDialogState","isReadOnly","alert","accountName","version","MermaidDiagramTabState","_loadHistory","buildDiagram","SequenceDiagramTabState","getSequenceForOrchestration","orchestrationName","parentOrchestrationName","historyEvents","externalActor","formatTimestamp","subOrchestrationId","subOrchestrationName","maxDurationInMs","DurationInMs","j","GanttDiagramTabState","renderOrchestration","isParentOrchestration","startedEvent","find","completedEvent","needToAddAxisFormat","lineName","LiquidMarkupTabState","_rawHtml","_orchestrationId","OrchestrationDetailsState","loadCustomTabIfNeeded","_details","_history","_historyTotalCount","_raiseEventDialogOpen","_setCustomStatusDialogOpen","_restartDialogOpen","_autoRefreshToken","requestBody","setAutoRefresh","tabStateIndex","orchId","loadAllHistory","templateName","totalCount","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","statuses","Array","values","has","included","add","delete","CleanEntityStorageDialogState","isOpen","_response","TypedLocalStorage","_prefix","localStorage","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","random","postMessage","setCustomHandlers","purgeHistoryHandler","cleanEntityStorageHandler","VsCodeTypedLocalStorage","_state","StateFromVsCode","save","MainState","_typedInstanceId","reloadSuggestions","_suggestions","vsCodeApi","acquireVsCodeApi","taskHubName","OrchestrationIdFromVsCode","body","appState","ReactDOM","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.0eb2b91d.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 366,\n\t\"./locale.js\": 366\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 672;","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    List, ListItem, Link,\r\n    Menu, MenuItem, Tooltip, Typography, DialogTitle\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage ? (!state.allowedTaskHubNames ? (<>\r\n                            \r\n                            <Container className=\"login-progress\">\r\n                                <CircularProgress />\r\n                            </Container>\r\n                            <DialogContentText>Login in progress...</DialogContentText>\r\n\r\n                        </>) : (<>\r\n                                \r\n                            <DialogTitle>Select your Task Hub</DialogTitle>\r\n                            <List className=\"task-hub-list\">\r\n                                {state.allowedTaskHubNames.map(hubName => (\r\n                                    <ListItem button>\r\n                                        <Link href={state.locationPathName + hubName}>{hubName}</Link>\r\n                                    </ListItem>)\r\n                                )}\r\n                            </List>\r\n                            \r\n                        </>)): (<>\r\n                        \r\n                            <Container className=\"login-progress\">\r\n                                <Error color=\"secondary\" fontSize=\"large\" />\r\n                            </Container>\r\n                            <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            \r\n                        </>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <IconButton color=\"inherit\"\r\n                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n            >\r\n                <MenuIcon/>\r\n            </IconButton>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                <MenuItem onClick={() => state.showCleanEntityStorageDialog()}>Clean Entity Storage...</MenuItem>\r\n            </Menu>\r\n\r\n            <Dialog\r\n                open={state.connectionParamsDialogOpen}\r\n                onClose={() => state.connectionParamsDialogOpen = false}\r\n            >\r\n                <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                    \r\n                    <DialogContentText>\r\n                        {\r\n                            state.isReadonly ?\r\n                                \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively)\" :\r\n                                \"The below values will be saved to local.settings.json file.\"\r\n                        }\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Hub Name\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.hubName}\r\n                        onChange={(evt) => state.hubName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Azure Storage Connection String\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: state.isReadonly }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.connectionString}\r\n                        onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                    />\r\n\r\n                    <ErrorMessage state={state}/>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    {(!state.isReadonly) && (\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    )}\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    public static momentAsUtc(t: moment.Moment): moment.Moment {\r\n        \r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        const result = moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n        result.utc();\r\n        return result;\r\n    }\r\n\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01').utc();\r\n    private static MaxMoment = moment('2100-01-01').utc();\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    FunctionName: string;\r\n    ScheduledTime: string;\r\n    DurationInMs: number;\r\n    SubOrchestrationId: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport const RuntimeStatuses = ['Completed', 'Running', 'Failed', 'Pending', 'Terminated', 'Canceled', 'ContinuedAsNew'] as const;\r\nexport type RuntimeStatus = typeof RuntimeStatuses[number];\r\n\r\nexport type EntityType = 'Orchestration' | 'DurableEntity';\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    tabTemplateNames?: string[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nconst RoutePrefix = !process.env.REACT_APP_BACKEND_BASE_URI ? (!DfmRoutePrefix ? '/' : `/${DfmRoutePrefix}/`) : process.env.REACT_APP_BACKEND_BASE_URI + '/';\r\nexport const BackendUri = RoutePrefix + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return RoutePrefix + this._getTaskHubName(); }\r\n\r\n    constructor(private _getTaskHubName: () => string, private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + '/' + this._getTaskHubName() + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nexport const OrchestrationsPathPrefix = `/orchestrations/`;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @computed\r\n    get taskHubName(): string { return this._taskHubName;  }\r\n\r\n    @computed\r\n    get allowedTaskHubNames(): string[] { return this._allowedTaskHubNames; }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    // Returns window.location.pathname minus DFM's client-side routing\r\n    get locationPathName(): string {\r\n\r\n        var result = window.location.pathname;\r\n\r\n        const pos = result.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos >= 0) {\r\n            result = result.substring(0, pos);\r\n        }\r\n\r\n        if (!result.endsWith('/')) {\r\n            result += '/';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Turning redirects off, as we don't ever need them anyway\r\n        axios.defaults.maxRedirects = 0;\r\n\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(response => this.loginWithEasyAuthConfig(response.data), err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<undefined>((resolve, reject) => resolve(undefined));\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    @observable\r\n    private _taskHubName: string;\r\n\r\n    @observable\r\n    private _allowedTaskHubNames: string[];\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    private loginWithEasyAuthConfig(config: {userName: string, clientId: string, authority: string}) {\r\n\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost or using server-directed login flow\r\n            // and proceed with no client-side auth\r\n            \r\n            this._userName = config.userName;\r\n\r\n            // Reloading the page upon cookie expiration\r\n            axios.interceptors.response.use(response => response, err => {\r\n\r\n                // Couldn't find a better way to detect this\r\n                if (err.message === 'Network Error') {\r\n                    window.location.reload(true);\r\n                }\r\n\r\n                return Promise.reject(err);\r\n            });\r\n\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority,\r\n                redirectUri: this.getRootUri()\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, (authErr: Msal.AuthError, accountState: string) => {\r\n\r\n            console.log(`Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`);\r\n        });\r\n\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            this._aadApp.loginRedirect();\r\n\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n        }\r\n    }\r\n\r\n    private initializeTaskHubNameAndConfirmLogin(): void {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            this._taskHubName = hubName;\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Trying to load the list of allowed Task Hubs from the backend\r\n        this.getAuthorizationHeaderAsync().then(headers => {\r\n\r\n            const uri = `${BackendUri}/task-hub-names`;\r\n            axios.get(uri, { headers }).then(response => {\r\n                \r\n                const hubNames: string[] = response.data;\r\n\r\n                if (hubNames.length === 1) {\r\n                    \r\n                    // Redirecting to that Task Hub\r\n                    window.location.pathname = this.locationPathName + hubNames[0];\r\n                } else {\r\n\r\n                    // Asking the user to choose from\r\n                    this._allowedTaskHubNames = hubNames;\r\n                }\r\n\r\n            }, err => {\r\n                this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n            });\r\n        });\r\n    }\r\n\r\n    // Extracts Task Hub name from window.location.href, still honoring client-side routing and subpaths\r\n    private tryGetTaskHubName(): string {\r\n\r\n        const locationPathName = this.locationPathName;\r\n\r\n        // If current path ends with DfmRoutePrefix, then it doesn't actually contain Task Hub name\r\n        if (locationPathName.toLowerCase().endsWith(`/${DfmRoutePrefix.toLowerCase()}/`)) {\r\n            return null;\r\n        }\r\n\r\n        const pathParts = locationPathName.split('/').filter(p => !!p);\r\n        if (pathParts.length < 1) {\r\n            return null;\r\n        }\r\n\r\n        // Consider the last path part to be the Task Hub name.\r\n        // This should work even if we're hosted under some subpath\r\n        return pathParts[pathParts.length - 1];\r\n    }\r\n\r\n    // Returns the site's root URI (everything _before_ Task Hub name)\r\n    private getRootUri(): string {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            const pos = window.location.href.toLowerCase().lastIndexOf('/' + hubName.toLowerCase());\r\n            if (pos >= 0) {\r\n                return window.location.href.substring(0, pos);\r\n            }\r\n        }\r\n\r\n        return window.location.origin +\r\n            (\r\n                window.location.pathname.endsWith('/') ?\r\n                window.location.pathname.substr(0, window.location.pathname.length - 1) :\r\n                    window.location.pathname\r\n            );\r\n    }\r\n}","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nimport { RuntimeStatus } from './states/DurableOrchestrationStatus';\r\n\r\n// Config object passed as a global variable\r\ndeclare const DfmClientConfig: { theme: string };\r\n\r\nconst colorTheme = !process.env.REACT_APP_COLOR_THEME ? DfmClientConfig.theme : process.env.REACT_APP_COLOR_THEME;\r\n\r\nexport const Theme = createMuiTheme({\r\n    palette: { type: colorTheme === 'dark' ? 'dark' : 'light' }\r\n});\r\n\r\nexport const CustomTabStyle = Theme.palette.type === \"dark\" ? {\r\n    backgroundColor: '#aaa'\r\n} : {};\r\n\r\nexport function RuntimeStatusToStyle(status: RuntimeStatus): {} {\r\n\r\n    var backgroundColor: string = null;\r\n\r\n    switch (status) {\r\n        case \"Failed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.error.light, 0.2);\r\n            break;\r\n        case \"Completed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.success.light, 0.2);\r\n            break;\r\n        case \"Running\":\r\n            backgroundColor = hexToRGBA(Theme.palette.warning.light, 0.2);\r\n            break;\r\n        case \"Terminated\":\r\n            backgroundColor = hexToRGBA(Theme.palette.background.paper, 0.1);\r\n            break;\r\n    }\r\n\r\n    return !!backgroundColor ? { backgroundColor } : {};\r\n}\r\n\r\nexport function hexToRGBA(hex: string, alpha: number): string {\r\n\r\n    if (hex.length > 4) {\r\n        return `rgba(${parseInt(hex.slice(1, 3), 16)}, ${parseInt(hex.slice(3, 5), 16)}, ${parseInt(hex.slice(5, 7), 16)}, ${alpha.toFixed(1)})`;\r\n    } else {\r\n        return `rgba(${parseInt(hex.slice(1, 2), 16)}, ${parseInt(hex.slice(2, 3), 16)}, ${parseInt(hex.slice(3, 4), 16)}, ${alpha.toFixed(1)})`;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationsPathPrefix } from '../states/LoginState';\r\nimport { Theme } from '../theme';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, title?: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href=\"/\" onClick={this.onLinkClicked} >\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href={`${this.props.backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\nexport class CancelToken {\r\n    @observable\r\n    inProgress: boolean = false;\r\n    @observable\r\n    isCancelled: boolean = false;\r\n}\r\n","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// Represents the state of a tab in the results pane\r\nexport interface IResultsTabState {\r\n\r\n    reset(): void;\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void>;\r\n}\r\n\r\n// Resulting list of orchestrations represented as a plain table\r\nexport class ResultsListTabState implements IResultsTabState {\r\n\r\n    @observable\r\n    columnUnderMouse: string;\r\n\r\n    @computed\r\n    get hiddenColumns(): string[] { return this._hiddenColumns; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection; }\r\n\r\n    @computed\r\n    get orderBy(): string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val) {\r\n\r\n            this._orderBy = val;\r\n            this._orderByDirection = 'asc';\r\n\r\n        } else if (this._orderByDirection === 'desc') {\r\n\r\n            this.resetOrderBy();\r\n        }\r\n        else {\r\n            this._orderByDirection = 'desc';\r\n        }\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<ResultsListTabState>, private _refresh: () => void) {\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n\r\n        const hiddenColumnsString = this._localStorage.getItem('hiddenColumns');\r\n        if (!!hiddenColumnsString) {\r\n            this._hiddenColumns = hiddenColumnsString.split('|');\r\n        }\r\n    }\r\n\r\n    hideColumn(name: string) {\r\n        this._hiddenColumns.push(name);\r\n        this._localStorage.setItem('hiddenColumns', this._hiddenColumns.join('|'));\r\n    }\r\n\r\n    unhide() {\r\n        this._hiddenColumns = [];\r\n        this._localStorage.removeItem('hiddenColumns');\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean = false): Promise<void> {\r\n\r\n        if (isAutoRefresh) { \r\n\r\n            this._noMorePagesToLoad = false;\r\n\r\n        } else {\r\n\r\n            if (!!this._noMorePagesToLoad) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            // persisting state as a batch\r\n            this._localStorage.setItems([\r\n                { fieldName: 'orderBy', value: this._orderBy },\r\n                { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n            ]);            \r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const hiddenColumnsClause = !this._hiddenColumns.length ? '' : `&hidden-columns=${this._hiddenColumns.join('|')}`;\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}${hiddenColumnsClause}`;\r\n\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n            \r\n            if (isAutoRefresh) {\r\n                this._orchestrations = response;\r\n            } else {\r\n                this._orchestrations.push(...response);\r\n            }\r\n\r\n            if (!response.length) {\r\n\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n\r\n    @observable\r\n    private _hiddenColumns: string[] = [];\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n}","import { observable } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\n// Base class for all mermaid-related states\r\nexport abstract class MermaidDiagramStateBase {\r\n\r\n\r\n    @observable\r\n    protected _diagramCode: string;\r\n    @observable\r\n    protected _diagramSvg: string;\r\n\r\n    protected initMermaidWhenNeeded() : void {\r\n\r\n        if (MermaidDiagramStateBase._mermaidInitialized) { \r\n            return;\r\n        }\r\n\r\n        mermaid.initialize({\r\n            startOnLoad: true,\r\n            sequence: {\r\n                noteMargin: 0,\r\n                boxMargin: 5,\r\n                boxTextMargin: 5\r\n            }\r\n        });\r\n\r\n        MermaidDiagramStateBase._mermaidInitialized = true;\r\n    }\r\n\r\n    protected escapeTitle(id: string) {\r\n\r\n        return id.replace(/[@:;]/g, ' ');\r\n    }\r\n\r\n    protected formatDuration(durationInMs: number): string {\r\n\r\n        var result = '';\r\n        if (isNaN(durationInMs) || (durationInMs < 0)) {\r\n            return result;\r\n        }\r\n\r\n        const days = Math.floor(durationInMs / 86400000);\r\n        if (days > 30) {\r\n            // something went wrong...\r\n            return result;\r\n        }\r\n\r\n        var c = 0;\r\n\r\n        if (days > 0) {\r\n            result += days.toFixed(0) + 'd';\r\n            ++c;\r\n            durationInMs = durationInMs % 86400000;\r\n        }\r\n\r\n        const hours = Math.floor(durationInMs / 3600000);\r\n        if (hours > 0) {\r\n            result += hours.toFixed(0) + 'h';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 3600000;\r\n        }\r\n\r\n        const minutes = Math.floor(durationInMs / 60000);\r\n        if (minutes > 0) {\r\n            result += minutes.toFixed(0) + 'm';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 60000;\r\n        }\r\n\r\n        const seconds = Math.floor(durationInMs / 1000);\r\n        if (seconds > 0) {\r\n            result += seconds.toFixed(0) + 's';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 1000;\r\n        }\r\n\r\n        if (durationInMs > 0) {\r\n            result += durationInMs.toFixed(0) + 'ms';\r\n        }\r\n\r\n        if (!result) {\r\n            result = '0ms';\r\n        }\r\n\r\n        return `(${result})`;\r\n    }\r\n\r\n    protected formatDateTime(timestamp: string): string {\r\n\r\n        return timestamp.substr(0, 23);\r\n    }\r\n\r\n    protected formatDurationInSeconds(durationInMs: number): string {\r\n\r\n        return Math.round(durationInMs / 1000).toFixed(0) + 's';\r\n    }\r\n\r\n    private static _mermaidInitialized = false;\r\n}","import { computed } from 'mobx'\r\nimport mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsGanttDiagramTabState extends MermaidDiagramStateBase implements IResultsTabState {\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; }\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; }\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            const uri = `/orchestrations?$top=500&$orderby=createdTime asc${filterClause}`;\r\n\r\n            this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                Promise.all(this.renderDiagram(instances)).then(sequenceLines => {\r\n\r\n                    this._diagramCode = 'gantt \\n' +\r\n                        `title Gantt Chart (${instances.length} instances shown) \\n` +\r\n                        'dateFormat YYYY-MM-DDTHH:mm:ssZ \\n' +\r\n                        sequenceLines.join('');\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    try {\r\n\r\n                        mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                            this._diagramSvg = svg;\r\n                            resolve();\r\n                        });\r\n\r\n                    } catch (err) {\r\n                        reject(err);\r\n                    }\r\n\r\n                }, reject);\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private renderDiagram(instances: DurableOrchestrationStatus[]): Promise<string>[] {\r\n\r\n        const results: Promise<string>[] = [];\r\n\r\n        var prevSectionName = '';\r\n        var sectionNr = 0;\r\n        for (const instance of instances) {\r\n\r\n            var nextLine = '';\r\n\r\n            // Grouping instances by their type\r\n            const sectionName = instance.entityType === 'DurableEntity' ? instance.entityId.name : instance.name;\r\n            if (sectionName !== prevSectionName) {\r\n                \r\n                nextLine = `section ${++sectionNr}. ${this.escapeTitle(sectionName)} \\n`;\r\n                prevSectionName = sectionName;\r\n            }\r\n\r\n            const instanceId = instance.entityType === 'DurableEntity' ? instance.entityId.key : instance.instanceId;\r\n            const durationInMs = new Date(instance.lastUpdatedTime).getTime() - new Date(instance.createdTime).getTime();\r\n\r\n            nextLine += `${this.escapeTitle(instanceId)} ${this.formatDuration(durationInMs)}: active, ${this.formatDateTime(instance.createdTime)}, ${this.formatDurationInSeconds(durationInMs < 1000 ? 1000 : durationInMs)} \\n`;\r\n            \r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        return results;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\n\r\ntype HistogramColumn = { x0: number, x: number, y: number };\r\ntype TimeInterval = { timeFrom: moment.Moment, timeTill: moment.Moment };\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsHistogramTabState implements IResultsTabState {\r\n\r\n    @computed\r\n    get zoomedIn() { return this._zoomedIn; }\r\n\r\n    @computed\r\n    get histograms() { return this._histograms; }\r\n\r\n    @computed\r\n    get numOfInstancesShown() { return this._numOfInstancesShown; }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _filterState: TimeInterval & { reloadOrchestrations: () => void, cancel: () => void })\r\n    {\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._numOfInstancesShown = 0;\r\n        this._histograms = {};\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        if (!this._applyingZoom && !this._zoomedIn) {\r\n\r\n            this._originalTimeInterval = { timeFrom: this._filterState.timeFrom, timeTill: this._filterState.timeTill };\r\n        }\r\n\r\n        this._numOfInstancesShown = 0;\r\n\r\n        const startTime = this._filterState.timeFrom.valueOf();\r\n        var bucketLength = Math.ceil((this._filterState.timeTill.valueOf() - startTime) / this._numOfIntervals);\r\n        if (bucketLength <= 0) {\r\n            bucketLength = 1;\r\n        }\r\n\r\n        return this.loadNextBatch(filterClause, startTime, bucketLength, 0, cancelToken);\r\n    }\r\n\r\n    applyZoom(left: Date, right: Date) {\r\n\r\n        this._numOfInstancesShown = 0;\r\n\r\n        this._filterState.cancel();\r\n        \r\n        // rounding to next second\r\n        const from = Math.floor(left.getTime() / 1000) * 1000;\r\n        const till = Math.ceil(right.getTime() / 1000) * 1000;\r\n\r\n        this._filterState.timeFrom = moment(from).utc();\r\n        this._filterState.timeTill = moment(till).utc();\r\n\r\n        this._applyingZoom = true;\r\n        try {\r\n            this._filterState.reloadOrchestrations();\r\n        } finally {\r\n            this._applyingZoom = false;\r\n        }\r\n\r\n        this._zoomedIn = true;\r\n    }\r\n\r\n    resetZoom() {\r\n\r\n        if (!this._zoomedIn || !this._originalTimeInterval) {\r\n            return;\r\n        }\r\n\r\n        this._zoomedIn = false;\r\n\r\n        this._filterState.cancel();\r\n\r\n        this._filterState.timeFrom = this._originalTimeInterval.timeFrom;\r\n        this._filterState.timeTill = this._originalTimeInterval.timeTill;\r\n        this._originalTimeInterval = null;\r\n\r\n        this._filterState.reloadOrchestrations();\r\n    }\r\n\r\n    @observable\r\n    private _histograms: { [typeName: string]: HistogramColumn[]; } = {};\r\n\r\n    @observable\r\n    private _numOfInstancesShown: number = 0;\r\n\r\n    @observable\r\n    private _zoomedIn = false;\r\n\r\n    private _originalTimeInterval: TimeInterval = null;\r\n    private _applyingZoom = false;\r\n\r\n    private readonly _numOfIntervals = 200;\r\n    private readonly _pageSize = 1000;\r\n\r\n    private loadNextBatch(filterClause: string, startTime: number, bucketLength: number, pageNumber: number, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${this._numOfInstancesShown}${filterClause}`;\r\n\r\n        const promise = this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            for (var instance of instances) {\r\n\r\n                const instanceTypeName = instance.entityType === 'DurableEntity' ? instance.entityId.name : instance.name;\r\n\r\n                if (!this._histograms[instanceTypeName]) {\r\n                    \r\n                    const emptyHistogram = [];\r\n                    for (var i = 0; i < this._numOfIntervals; i++) {\r\n                        emptyHistogram[i] = { x0: startTime + i * bucketLength, x: startTime + (i + 1) * bucketLength, y: 0 };\r\n                    }\r\n                    this._histograms[instanceTypeName] = emptyHistogram;\r\n                }\r\n\r\n                const instanceStartPos = Math.floor((new Date(instance.createdTime).getTime() - startTime) / bucketLength);\r\n                if (instanceStartPos < 0 || instanceStartPos >= this._numOfIntervals) {\r\n                    continue;\r\n                }\r\n\r\n                this._histograms[instanceTypeName][instanceStartPos].y += 1;\r\n            }\r\n\r\n            this._numOfInstancesShown += instances.length;\r\n\r\n            if (instances.length === this._pageSize) {\r\n                \r\n                return this.loadNextBatch(filterClause, startTime, bucketLength, pageNumber + 1, cancelToken);\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState, ResultsListTabState } from './ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from './ResultsGanttDiagramTabState';\r\nimport { ResultsHistogramTabState } from './ResultsHistogramTabState';\r\nimport { RuntimeStatus } from './DurableOrchestrationStatus';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains,\r\n    NotEquals,\r\n    NotStartsWith,\r\n    NotContains\r\n}\r\n\r\nexport enum ResultsTabEnum {\r\n    List = 0,\r\n    Histogram,\r\n    Gantt\r\n}\r\n\r\nexport type RuntimeStatusOrDurableEntities = RuntimeStatus | 'DurableEntities';\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get selectedTabIndex(): ResultsTabEnum { return this._selectedTabIndex; }\r\n    set selectedTabIndex(val: ResultsTabEnum) {\r\n\r\n        if (this._selectedTabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._selectedTabIndex = val;\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    get selectedTabState(): IResultsTabState {\r\n        return this._tabStates[this._selectedTabIndex];\r\n    }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment { return this._timeFrom; }\r\n    set timeFrom(val: moment.Moment) {\r\n        this._timeFrom = val;\r\n        this.listState.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment { return (!this._timeTill) ? moment().utc() : this._timeTill; }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this.listState.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment().utc() : null;\r\n\r\n        if (!val) {\r\n            this.listState.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showStatuses(): RuntimeStatusOrDurableEntities[] { return this._showStatuses; }\r\n    \r\n    isStatusChecked(status?: RuntimeStatusOrDurableEntities): boolean {\r\n\r\n        if (!status) {\r\n            return !this._showStatuses;\r\n        }\r\n\r\n        if (!this._showStatuses) {\r\n            return true;\r\n        }\r\n\r\n        return !!this._showStatuses.includes(status);\r\n    }\r\n\r\n    setStatusChecked(checked: boolean, status?: RuntimeStatusOrDurableEntities): void {\r\n\r\n        if (checked) {\r\n\r\n            if (!status) {\r\n                this._showStatuses = null;\r\n            } else {\r\n                if (!this._showStatuses) {\r\n                    this._showStatuses = [];\r\n                }\r\n                this._showStatuses.push(status);\r\n            }\r\n            \r\n        } else {\r\n\r\n            if (!status) {\r\n                this._showStatuses = [];\r\n            } else {\r\n                if (!this._showStatuses) {\r\n                    this._showStatuses = [];\r\n                }\r\n\r\n                const i = this._showStatuses.indexOf(status);\r\n                if (i >= 0) {\r\n                    this._showStatuses.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n        }\r\n        this._refreshToken = setTimeout(() => this.reloadOrchestrations(), this._delayedRefreshDelay);\r\n    }\r\n\r\n    rescheduleDelayedRefresh() {\r\n        \r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = setTimeout(() => this.reloadOrchestrations(), this._delayedRefreshDelay);\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState & ResultsListTabState>) {\r\n        super();\r\n        \r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n        momentFrom.utc();\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._timeTill.utc();\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showStatusesString = this._localStorage.getItem('showStatuses');\r\n        if (!!showStatusesString) {\r\n            this._showStatuses = JSON.parse(showStatusesString);\r\n        }\r\n        \r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n\r\n        // Canceling delayed refresh, if any\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = null;\r\n        }\r\n\r\n        for (const resultState of this._tabStates) {\r\n            resultState.reset();\r\n        }\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showStatuses', value: !!this._showStatuses ? JSON.stringify(this._showStatuses) : null },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        const cancelToken = this._cancelToken;\r\n        if (!!cancelToken.inProgress) {\r\n            return;            \r\n        }\r\n        cancelToken.inProgress = true;\r\n        \r\n        const timeFrom = this._timeFrom.toISOString();\r\n        const timeTill = !!this._timeTill ? this._timeTill.toISOString() : moment().utc().toISOString();\r\n        var filterClause = `&$filter=createdTime ge '${timeFrom}' and createdTime le '${timeTill}'`;\r\n        \r\n        if (!!this._showStatuses) {\r\n\r\n            filterClause += ` and runtimeStatus in (${this._showStatuses.map(s => `'${s}'`).join(',')})`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.NotEquals:\r\n                    filterClause += `${this._filteredColumn} ne '${this._filterValue}'`;\r\n                    break;\r\n                case FilterOperatorEnum.NotStartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}') eq false`;\r\n                    break;\r\n                case FilterOperatorEnum.NotContains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}') eq false`;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.selectedTabState.load(filterClause, cancelToken, isAutoRefresh).then(() => {\r\n\r\n            if (!!this._refreshToken) {\r\n                clearTimeout(this._refreshToken);\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                this._refreshToken = setTimeout(() => {\r\n\r\n                    this.loadOrchestrations(true);\r\n\r\n                }, this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n                \r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _selectedTabIndex: ResultsTabEnum = ResultsTabEnum.List;\r\n\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    @observable\r\n    private _showStatuses: RuntimeStatusOrDurableEntities[] = null;\r\n\r\n    private readonly _tabStates: IResultsTabState[] = [\r\n        new ResultsListTabState(this._backendClient, this._localStorage, () => this.reloadOrchestrations()),\r\n        new ResultsHistogramTabState(this._backendClient, this),\r\n        new ResultsGanttDiagramTabState(this._backendClient)\r\n    ];\r\n\r\n    private get listState(): ResultsListTabState { return this._tabStates[0] as ResultsListTabState; }\r\n\r\n    private _refreshToken: NodeJS.Timeout;\r\n    private readonly _delayedRefreshDelay = 3000;\r\n\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n}","import * as React from 'react';\r\n\r\nimport { Button, Typography } from '@material-ui/core';\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport './SaveAsSvgButton.css';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// A button to save something as an .SVG file\r\nexport class SaveAsSvgButton extends React.Component<{ svg: string, fileName: string, inProgress: boolean, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    size=\"large\"\r\n                    className=\"save-svg-button\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => this.props.backendClient.call('SaveAs', this.props.fileName + '.svg', this.props.svg)}\r\n                >\r\n                    <div>\r\n                        <SaveIcon />\r\n                        <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                    </div>\r\n                </Button>\r\n            );\r\n\r\n        } else {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    size=\"large\"\r\n                    className=\"save-svg-button\"\r\n                    disabled={this.props.inProgress}\r\n                    href={URL.createObjectURL(new Blob([this.props.svg], { type: 'image/svg+xml' }))}\r\n                    download={this.props.fileName + '.svg'}\r\n                >\r\n                    <div>\r\n                        <SaveIcon />\r\n                        <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                    </div>\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Appends some styling to SVG code, so it can also be saved as file\r\nexport function getStyledSvg(svg: string): string {\r\n\r\n    return svg.replace('</style>',\r\n        '.note { stroke: none !important; fill: none !important; } ' +\r\n        '.noteText { font-size: 9px !important; } ' +\r\n        '</style>'\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n    AppBar, Box, Button, Checkbox, FormGroup, FormControl, FormControlLabel, FormLabel, FormHelperText, Grid, IconButton, InputBase,\r\n    InputLabel, Link, LinearProgress, MenuItem, Paper, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, Tab, Tabs, TextField, Toolbar, Typography,\r\n    Radio, RadioGroup\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\n\r\nimport { XYPlot, XAxis, YAxis, DiscreteColorLegend, VerticalRectSeries, Highlight } from 'react-vis';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields, RuntimeStatuses } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState, ResultsTabEnum, FilterOperatorEnum } from '../states/OrchestrationsState';\r\nimport { ResultsListTabState } from '../states/ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from '../states/ResultsGanttDiagramTabState';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\n\r\nimport { CustomTabStyle, RuntimeStatusToStyle } from '../theme';\r\nimport { ResultsHistogramTabState } from 'src/states/ResultsHistogramTabState';\r\n\r\nconst MaxJsonLengthToShow = 1024;\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const state = this.props.state;\r\n\r\n            if (state.selectedTabIndex !== ResultsTabEnum.List ) {\r\n                return;\r\n            }\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                state.loadOrchestrations();\r\n            }\r\n        });\r\n\r\n        // Doing zoom reset\r\n        document.addEventListener('keydown', (evt: any) => {\r\n\r\n            const state = this.props.state;\r\n            if (state.selectedTabIndex === ResultsTabEnum.Histogram && !!evt.ctrlKey && evt.keyCode === 90) {\r\n\r\n                const histogramState = state.selectedTabState as ResultsHistogramTabState;\r\n                histogramState.resetZoom();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const listState = state.selectedTabState as ResultsListTabState;\r\n\r\n        return (<>\r\n            \r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Grid container className=\"toolbar-grid1\">\r\n                        <Grid item xs={12}>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"from-input\"\r\n                                style={{ marginLeft: 10 }}\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"From &nbsp;&nbsp; (UTC)\"\r\n                                invalidDateMessage=\"\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                                onBlur={() => state.applyTimeFrom()}\r\n                                onAccept={() => state.applyTimeFrom()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n                            <FormControl>\r\n                                <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                                <Checkbox\r\n                                    id=\"till-checkbox\"\r\n                                    className=\"till-checkbox\"\r\n                                    disabled={state.inProgress}\r\n                                    checked={state.timeTillEnabled}\r\n                                    onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                                />\r\n                            </FormControl>\r\n\r\n                            {state.timeTillEnabled ? (\r\n                                <KeyboardDateTimePicker\r\n                                    className=\"till-input\"\r\n                                    ampm={false}\r\n                                    autoOk={true}\r\n                                    label=\"(UTC)\"\r\n                                    invalidDateMessage=\"\"\r\n                                    format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                    disabled={state.inProgress}\r\n                                    value={state.timeTill}\r\n                                    onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                                    onBlur={() => state.applyTimeTill()}\r\n                                    onAccept={() => state.applyTimeTill()}\r\n                                    onKeyPress={this.handleKeyPress}\r\n                                />\r\n                            ) : (\r\n                                <TextField\r\n                                    className=\"till-input\"\r\n                                    label=\"(UTC)\"\r\n                                    placeholder=\"[Now]\"\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    type=\"text\"\r\n                                    disabled={true}\r\n                                />\r\n                            )}                        \r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid2\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl>\r\n                                <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select filtered-column-input\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filteredColumn}\r\n                                    onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                    inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                    <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                    {DurableOrchestrationStatusFields.map(col => {\r\n                                        return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                    })}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className=\"toolbar-grid2-item1-select\">\r\n                                <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filterOperator}\r\n                                    onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                    inputProps={{ id: \"filter-operator-select\" }}>\r\n                                    <MenuItem value={FilterOperatorEnum.Equals}>Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.StartsWith}>Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.Contains}>Contains</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotEquals}>Not Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotStartsWith}>Not Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotContains}>Not Contains</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                            <TextField\r\n                                className=\"filter-value-input\"\r\n                                label=\"Filter Value\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                placeholder=\"[some text or 'null']\"\r\n                                disabled={state.filteredColumn === '0' || state.inProgress}\r\n                                value={state.filterValue}\r\n                                onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                                onBlur={() => state.applyFilterValue()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <FormGroup className=\"toolbar-runtime-status-group\">\r\n\r\n                        <InputLabel className=\"toolbar-runtime-status-group-label\" shrink={true}>Type/Status {!state.showStatuses ? '' : ` (${state.showStatuses.length} selected)`}</InputLabel>\r\n\r\n                        <FormGroup className=\"toolbar-runtime-status-checkbox-group\" onScroll={() => state.rescheduleDelayedRefresh()}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked()}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked)}\r\n                                />}\r\n                                label=\"[All]\"\r\n                            />\r\n\r\n                            {RuntimeStatuses.map(status => (<FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked(status)}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked, status)}\r\n                                />}\r\n                                label={'Orchestations:' + status}\r\n                            />))}\r\n\r\n                            <FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked('DurableEntities')}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked, 'DurableEntities')}\r\n                                />}\r\n                                label=\"Durable Entities\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                    </FormGroup>\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Grid container className=\"toolbar-grid3\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl className=\"form-control-float-right\">\r\n                                <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    inputProps={{ id: \"auto-refresh-select\" }}\r\n                                    value={state.autoRefresh}\r\n                                    onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                                >\r\n                                    <MenuItem value={0}>Never</MenuItem>\r\n                                    <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                    <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                    <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                            <Button\r\n                                className=\"refresh-button form-control-float-right\"\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                size=\"large\"\r\n                                onClick={() => state.inProgress ? state.cancel() : state.reloadOrchestrations()}\r\n                            >\r\n                                {state.inProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <AppBar color=\"inherit\" position=\"static\">\r\n                <Tabs className=\"tab-buttons\" value={state.selectedTabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.selectedTabIndex = val}>\r\n\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">List</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Time Histogram</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Gantt Chart</Typography>} />\r\n\r\n                </Tabs>\r\n            </AppBar>\r\n\r\n            {state.selectedTabIndex === ResultsTabEnum.List && (<>\r\n\r\n                <FormHelperText className=\"items-count-label\">\r\n                    {!!listState.orchestrations.length && (<>\r\n                        {`${listState.orchestrations.length} items shown`}\r\n                        {!!listState.hiddenColumns.length && (<>\r\n\r\n                            {`, ${listState.hiddenColumns.length} columns hidden `}\r\n\r\n                            (<Link className=\"unhide-button\"\r\n                                component=\"button\"\r\n                                variant=\"inherit\"\r\n                                onClick={() => listState.unhide()}\r\n                            >\r\n                                unhide\r\n                            </Link>)\r\n                        </>)}\r\n                    </>)}\r\n                </FormHelperText>\r\n\r\n                <Paper elevation={0} >\r\n                    {!!listState.orchestrations.length ? this.renderTable(listState, state.showLastEventColumn, state.backendClient) : this.renderEmptyTable()}\r\n                </Paper>\r\n\r\n                {state.inProgress && !!listState.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                \r\n            </>)}\r\n\r\n            {state.selectedTabIndex === ResultsTabEnum.Histogram && this.renderHistogram(state.selectedTabState as ResultsHistogramTabState) }\r\n            \r\n            {state.selectedTabIndex === ResultsTabEnum.Gantt && this.renderGanttChart(state, state.selectedTabState as ResultsGanttDiagramTabState)}\r\n                \r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderHistogram(histogramState: ResultsHistogramTabState): JSX.Element {\r\n\r\n        const typeNames = Object.keys(histogramState.histograms).sort();\r\n\r\n        return (<>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {`${histogramState.numOfInstancesShown} items shown`}\r\n\r\n                {histogramState.zoomedIn && (<>\r\n\r\n                    {', '}\r\n                    <Link className=\"unhide-button\"\r\n                        component=\"button\"\r\n                        variant=\"inherit\"\r\n                        onClick={() => histogramState.resetZoom()}\r\n                    >\r\n                        reset zoom (Ctrl+Z)\r\n                        </Link>\r\n                </>)}\r\n\r\n            </FormHelperText>\r\n\r\n            <XYPlot\r\n                width={window.innerWidth - 40} height={window.innerHeight - 400}\r\n                xType=\"time\"\r\n                stackBy=\"y\"\r\n                margin={{ left: 80, right: 10, top: 20 }}\r\n            >\r\n                {!!histogramState.numOfInstancesShown && (\r\n                    <YAxis tickTotal={7} />\r\n                )}\r\n                <XAxis tickTotal={7} tickFormat={t => this.formatTimeTick(t)} />\r\n\r\n                {typeNames.map(typeName => (<VerticalRectSeries\r\n                    key={typeName}\r\n                    stroke=\"white\"\r\n                    color={this.getColorCodeForInstanceType(typeName)}\r\n                    data={histogramState.histograms[typeName]}\r\n                />))}\r\n\r\n                {!!histogramState.numOfInstancesShown && (\r\n\r\n                    <Highlight\r\n                        color=\"#829AE3\"\r\n                        drag\r\n                        enableY={false}\r\n\r\n                        onDragEnd={(area) => {\r\n                            if (!!area) {\r\n                                histogramState.applyZoom(area.left, area.right);\r\n                            }\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n            </XYPlot>\r\n\r\n            <DiscreteColorLegend className=\"histogram-legend\"\r\n                colors={typeNames.map(typeName => this.getColorCodeForInstanceType(typeName))}\r\n                items={typeNames}\r\n                orientation=\"horizontal\"\r\n            />\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderGanttChart(state: OrchestrationsState, ganttState: ResultsGanttDiagramTabState): JSX.Element {\r\n\r\n        if (!ganttState.rawHtml) {\r\n            return null;\r\n        }\r\n\r\n        return (<>\r\n\r\n            <div\r\n                className=\"raw-html-div\"\r\n                style={CustomTabStyle}\r\n                dangerouslySetInnerHTML={{ __html: getStyledSvg(ganttState.rawHtml) }}\r\n            />\r\n\r\n            <Toolbar variant=\"dense\">\r\n                <TextField\r\n                    label=\"mermaid diagram code (for your reference)\"\r\n                    value={ganttState.diagramCode}\r\n                    margin=\"normal\"\r\n                    InputProps={{ readOnly: true }}\r\n                    InputLabelProps={{ shrink: true }}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    multiline\r\n                    rowsMax={4}\r\n                />\r\n\r\n                <Box width={20} />\r\n\r\n                <SaveAsSvgButton\r\n                    svg={getStyledSvg(ganttState.rawHtml)}\r\n                    fileName={`gantt-chart-${state.timeFrom.format('YYYY-MM-DD-HH-mm-ss')}-${state.timeTill.format('YYYY-MM-DD-HH-mm-ss')}`}\r\n                    inProgress={state.inProgress}\r\n                    backendClient={state.backendClient}\r\n                />\r\n\r\n            </Toolbar>\r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(results: ResultsListTabState, showLastEventColumn: boolean, backendClient: IBackendClient): JSX.Element {\r\n\r\n        const visibleColumns = DurableOrchestrationStatusFields\r\n            // hiding artificial 'lastEvent' column, when not used\r\n            .filter(f => showLastEventColumn ? true : f !== 'lastEvent');\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {visibleColumns.map(col => {\r\n\r\n                            const onlyOneVisibleColumnLeft = visibleColumns.length <= results.hiddenColumns.length + 1;\r\n\r\n                            return !results.hiddenColumns.includes(col) && (\r\n                                <TableCell key={col}\r\n                                    onMouseEnter={() => results.columnUnderMouse = col}\r\n                                    onMouseLeave={() => results.columnUnderMouse = ''}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={results.orderBy === col}\r\n                                        direction={results.orderByDirection}\r\n                                        onClick={() => results.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n                                    </TableSortLabel>\r\n\r\n                                    {results.columnUnderMouse === col && !onlyOneVisibleColumnLeft && (\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size=\"small\"\r\n                                            className=\"column-hide-button\"\r\n                                            onClick={() => results.hideColumn(col)}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>                                        \r\n                                    )}\r\n\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {results.orchestrations.map(orchestration => {\r\n\r\n                        const rowStyle = RuntimeStatusToStyle(orchestration.runtimeStatus);\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                style={rowStyle}\r\n                            >\r\n                                {!results.hiddenColumns.includes('instanceId') && (\r\n                                    <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                        <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={backendClient} />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('name') && (\r\n                                    <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                        {orchestration.name}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('createdTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {orchestration.createdTime}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('lastUpdatedTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {orchestration.lastUpdatedTime}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('runtimeStatus') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.runtimeStatus}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('lastEvent') && showLastEventColumn && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.lastEvent}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('input') && (\r\n                                    <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.input)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('output') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.output)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('customStatus') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.customStatus)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    private getColorCodeForInstanceType(instanceType: string): string {\r\n\r\n        // Taking hash out of input string (reversed, to make names like 'func1', 'func2' etc. look different)\r\n        var hashCode = 0;\r\n        for (var i = instanceType.length - 1; i >= 0; i--) {\r\n            hashCode = ((hashCode << 5) - hashCode) + instanceType.charCodeAt(i);\r\n            // Convert to positive 32-bit integer\r\n            hashCode &= 0x7FFFFFFF;\r\n        }\r\n\r\n        // min 6 hex digits\r\n        hashCode |= 0x100000;\r\n\r\n        // Not too white\r\n        hashCode &= 0xFFFFEF;\r\n\r\n        return '#' + hashCode.toString(16);\r\n    }\r\n\r\n    private formatTimeTick(t: Date) {\r\n\r\n        const m = moment(t).utc();\r\n        const timeRange = this.props.state.timeTill.valueOf() - this.props.state.timeFrom.valueOf();\r\n\r\n        if (timeRange > 5 * 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD');\r\n        }\r\n\r\n        if (timeRange > 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD HH:mm');\r\n        }\r\n\r\n        if (timeRange > 10000) {\r\n\r\n            return m.second() === 0 ? m.format('HH:mm') : m.format('HH:mm:ss');\r\n        }\r\n\r\n        return (m.millisecond() === 0) ? m.format('HH:mm:ss') : m.format(':SSS');\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    private renderJson(json: any): string {\r\n\r\n        const result = JSON.stringify(json);\r\n\r\n        return result.length > MaxJsonLengthToShow ? `[${result.length} symbols long JSON]` : result;\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Send Signal\r\n            </Button>\r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Send Signal</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide signal name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Signal Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Signal Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Send\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Grid, TextField } from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId?.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId?.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    FormControlLabel, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.restartDialogOpen = true}>\r\n                Restart\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.restartDialogOpen}\r\n                onClose={() => state.restartDialogOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Restart</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to restart orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n\r\n                    <FormControlLabel control={<Checkbox\r\n                        checked={state.restartWithNewInstanceId}\r\n                        onChange={(evt) => state.restartWithNewInstanceId = evt.target.checked} />}\r\n                        label=\"Restart with new instanceId\"\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.restartDialogOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.restart()} color=\"secondary\">\r\n                        Restart\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, InputBase, Table, TableBody, TableCell, TableHead, TableRow, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { HistoryEventFields, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) {\r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 50;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadHistoryIfNeeded();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const totalItems = this.props.state.historyTotalCount;\r\n        const details = this.props.state.details;\r\n        const history = this.props.state.history;\r\n        const itemsShown = history.length;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"instanceId\"\r\n                        value={details.instanceId}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: { totalItems === itemsShown ? `${itemsShown} items` : `${itemsShown} of ${totalItems} items shown` }\r\n            </FormHelperText>\r\n\r\n            {!!history.length && this.renderTable(history)}\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderTable(events: HistoryEvent[]): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: HistoryEvent, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n\r\n                                    {!!event.SubOrchestrationId ?\r\n                                        (<OrchestrationLink\r\n                                            orchestrationId={event.SubOrchestrationId}\r\n                                            title={event.FunctionName}\r\n                                            backendClient={this.props.state.backendClient} />)\r\n                                        :\r\n                                        (event.Name ?? event.FunctionName)\r\n                                    }\r\n\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, FormControl, InputLabel, LinearProgress, MenuItem,\r\n    Select, Tabs, Tab, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\nimport { CustomTabStyle } from '../theme';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"details-top-toolbar\">\r\n\r\n                    {state.details.entityType === \"Orchestration\" && (\r\n                        <OrchestrationButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    {state.details.entityType === \"DurableEntity\" && (\r\n                        <DurableEntityButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            inputProps={{ id: 'auto-refresh-select' }}>\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress && !state.loadInProgress}\r\n                        onClick={() => state.loadInProgress ? state.cancel() : state.loadDetails()}\r\n                    >\r\n                        {state.loadInProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {!!state.tabStates.length && (<>\r\n                <AppBar color=\"inherit\" position=\"static\">\r\n                    <Tabs className=\"tab-buttons\" value={state.selectedTabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.selectedTabIndex = val}>\r\n                        \r\n                        <Tab className=\"tab-buttons\" disabled={state.inProgress} \r\n                            label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Details</Typography>}\r\n                        />\r\n                        \r\n                        {state.tabStates.map(tabState => (\r\n                            <Tab className=\"tab-buttons\" key={tabState.name} disabled={state.inProgress} \r\n                                label={<Typography color=\"textPrimary\" variant=\"subtitle2\">{tabState.name}</Typography>}\r\n                            />\r\n                        ))}\r\n\r\n                    </Tabs>\r\n                </AppBar>\r\n            </>)}\r\n\r\n            {!state.selectedTabIndex && state.details.entityType === \"Orchestration\" && (<>\r\n                <OrchestrationFields state={state} />\r\n\r\n                {state.inProgress && !!state.history.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            </>)}\r\n\r\n            {!state.selectedTabIndex && state.details.entityType === \"DurableEntity\" &&\r\n                <DurableEntityFields details={state.details} />\r\n            }\r\n\r\n            {!!state.selectedTab && !!state.selectedTab.rawHtml && (<>\r\n\r\n                <div\r\n                    className=\"raw-html-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.selectedTab.rawHtml) }}\r\n                />\r\n                \r\n                {state.selectedTab.isMermaidDiagram && (\r\n\r\n                    <Toolbar variant=\"dense\">\r\n                        <TextField\r\n                            label=\"mermaid diagram code (for your reference)\"\r\n                            value={state.selectedTab.description}\r\n                            margin=\"normal\"\r\n                            InputProps={{ readOnly: true }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            rowsMax={4}\r\n                        />\r\n\r\n                        <Box width={20} />\r\n\r\n                        <SaveAsSvgButton\r\n                            svg={getStyledSvg(state.selectedTab.rawHtml)}\r\n                            fileName={state.orchestrationId}\r\n                            inProgress={state.inProgress}\r\n                            backendClient={state.backendClient}\r\n                        />\r\n\r\n                    </Toolbar>\r\n                )}\r\n                \r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                        To clean up deleted Entities use the 'Clean Entity Storage' command instead. \r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-from-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? 'Last Updated From (UTC)' : 'From (UTC)'}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? 'Last Updated Till (UTC)' : 'Till (UTC)'}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === 'Orchestration' && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === 'DurableEntity' && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, LinearProgress, \r\n} from '@material-ui/core';\r\n\r\nimport './CleanEntityStorageDialog.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { CleanEntityStorageDialogState } from '../states/CleanEntityStorageDialogState';\r\n\r\n// Dialog with parameters for cleaning entity storage\r\n@observer\r\nexport class CleanEntityStorageDialog extends React.Component<{ state: CleanEntityStorageDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Clean Entity Storage</DialogTitle>\r\n\r\n                {!state.response && (<>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                        <DialogContentText>\r\n                            An entity is considered empty, and is removed, if it has no state, is not locked, and has been idle for more than EntityMessageReorderWindowInMinutes. Locks are considered orphaned, and are released, if the orchestration that holds them is not in state Running.\r\n                        </DialogContentText>\r\n\r\n                        <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                            <FormGroup row>\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.removeEmptyEntities}\r\n                                    onChange={(evt) => state.removeEmptyEntities = evt.target.checked} />}\r\n                                    label=\"Remove Empty Entities\"\r\n                                />\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.releaseOrphanedLocks}\r\n                                    onChange={(evt) => state.releaseOrphanedLocks = evt.target.checked} />}\r\n                                    label=\"Release Orphaned Locks\"\r\n                                />\r\n                                \r\n                            </FormGroup>\r\n                        </FormControl>\r\n\r\n                        <ErrorMessage state={state} />\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => state.clean()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                            Clean\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n                {!!state.response && (<>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfEmptyEntitiesRemoved} empty entities removed. \r\n                        </DialogContentText>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfOrphanedLocksRemoved} orphaned locks removed.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\nimport { CleanEntityStorageDialog } from './CleanEntityStorageDialog';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={`${!DfmRoutePrefix ? '' : '/'}${DfmRoutePrefix}/logo.svg`} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                Durable Functions Monitor\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={state.loginState.locationPathName}>\r\n                                    / instances\r\n                                </Link>\r\n\r\n                                {!state.orchestrationDetailsState ?\r\n                                    (\r\n                                        <Autocomplete\r\n                                            className=\"instance-id-input\"\r\n                                            freeSolo\r\n                                            options={state.isExactMatch ? [] : state.suggestions}\r\n                                            value={state.typedInstanceId}\r\n                                            onChange={(evt, newValue) => {\r\n                                                state.typedInstanceId = newValue ?? '';\r\n                                                if (!!newValue) {\r\n                                                    state.goto();\r\n                                                }\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    className={state.isExactMatch ? 'instance-id-valid' : null}\r\n                                                    size=\"small\"\r\n                                                    label=\"instanceId to go to...\"\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(evt) => state.typedInstanceId = evt.target.value as string}\r\n                                                    onKeyPress={(evt) => this.handleKeyPress(evt)}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    )\r\n                                    :\r\n                                    (<Typography color=\"inherit\">\r\n                                        {state.orchestrationDetailsState.orchestrationId}\r\n                                    </Typography>)\r\n                                }\r\n\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n                <CleanEntityStorageDialog state={state.cleanEntityStorageDialogState} />\r\n\r\n            </></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.goto();\r\n        }\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _purgeHistoryDialogState: PurgeHistoryDialogState,\r\n        private _cleanEntityStorageDialogState: CleanEntityStorageDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    showCleanEntityStorageDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this._cleanEntityStorageDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n    \r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { computed } from 'mobx';\r\n\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// Base class for all mermaid diagram tab states\r\nexport abstract class MermaidDiagramTabState extends MermaidDiagramStateBase implements ICustomTabState {\r\n\r\n    readonly name: string = \"Diagram\";\r\n    readonly isMermaidDiagram: boolean = true;\r\n\r\n    @computed\r\n    get description(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; };\r\n\r\n    constructor(protected _loadHistory: (orchestrationId: string) => Promise<HistoryEvent[]>) {\r\n        super();\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n        \r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return this._loadHistory(details.instanceId).then(history => {\r\n\r\n            if (!history.length || cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            return this.buildDiagram(details, history, cancelToken);\r\n        });\r\n    }\r\n\r\n    protected abstract buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void>;\r\n}","import mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of Sequence Diagram tab on OrchestrationDetails view\r\nexport class SequenceDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Sequence Diagram\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken) : Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.getSequenceForOrchestration(details.name, '.', history)).then(sequenceLines => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'sequenceDiagram \\n' + sequenceLines.join('');\r\n\r\n                try {\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private getSequenceForOrchestration(orchestrationName: string, parentOrchestrationName: string, historyEvents: HistoryEvent[]): Promise<string>[] {\r\n\r\n        const externalActor = '.'\r\n        const results: Promise<string>[] = [];\r\n        var nextLine: string;\r\n\r\n        var i = 0;\r\n        while (i < historyEvents.length) {\r\n            const event = historyEvents[i];\r\n\r\n            switch (event.EventType) {\r\n                case 'ExecutionStarted':\r\n\r\n                    nextLine =\r\n                        `${parentOrchestrationName}->>+${orchestrationName}:[ExecutionStarted] \\n` +\r\n                        `Note over ${parentOrchestrationName},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.getSequenceForOrchestration(subOrchestrationName, orchestrationName, history)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`${orchestrationName}-x${subOrchestrationName}:[FailedToLoad] \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    nextLine = `${orchestrationName}-x${event.FunctionName}:[SubOrchestrationInstanceFailed] \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    // Trying to aggregate multiple parallel calls\r\n                    var maxDurationInMs = event.DurationInMs;\r\n                    var j = i + 1;\r\n                    for (; j < historyEvents.length &&\r\n                        historyEvents[j].EventType === 'TaskCompleted' &&\r\n                        historyEvents[j].FunctionName === event.FunctionName &&\r\n                        historyEvents[j].ScheduledTime.substr(0, 23) === event.ScheduledTime.substr(0, 23);\r\n                        j++) {\r\n\r\n                        if (maxDurationInMs < historyEvents[j].DurationInMs) {\r\n                            maxDurationInMs = historyEvents[j].DurationInMs;\r\n                        }\r\n                    }\r\n\r\n                    if (j === i + 1) {\r\n\r\n                        const nextLine =\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n                        \r\n                    } else {\r\n\r\n                        const nextLine =\r\n                            `par ${j - i} calls \\n` +\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(maxDurationInMs)} \\n` +\r\n                            `end \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n\r\n                        i = j - 1;\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `${orchestrationName}-x${orchestrationName}:${event.FunctionName}(failed) \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'EventRaised':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:${event.Name} \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TimerFired':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[TimerFired] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionTerminated':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[ExecutionTerminated] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionCompleted':\r\n\r\n                    nextLine =\r\n                        `${orchestrationName}-->>-${parentOrchestrationName}:[ExecutionCompleted] \\n` +\r\n                        `Note over ${orchestrationName},${parentOrchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatTimestamp(timestamp: string): string {\r\n        if (timestamp.length <= 11) {\r\n            return timestamp;\r\n        }\r\n        return '(' + timestamp.substr(11, 12) + 'Z)';\r\n    }\r\n}","import mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of Gantt Diagram tab on OrchestrationDetails view\r\nexport class GanttDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Gantt Chart\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.renderOrchestration(details.instanceId, details.name, history, true)).then(sequenceLines => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title ${details.name}(${details.instanceId}) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss.SSS \\n' +\r\n                    sequenceLines.join('');\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private renderOrchestration(orchestrationId: string, orchestrationName: string, historyEvents: HistoryEvent[], isParentOrchestration: boolean): Promise<string>[] {\r\n\r\n        const results: Promise<string>[] = [];\r\n\r\n        const startedEvent = historyEvents.find(event => event.EventType === 'ExecutionStarted');\r\n        const completedEvent = historyEvents.find(event => event.EventType === 'ExecutionCompleted');\r\n\r\n        var needToAddAxisFormat = isParentOrchestration;\r\n        var nextLine: string;\r\n\r\n        if (!!startedEvent && !!completedEvent) {\r\n\r\n            if (needToAddAxisFormat) {\r\n\r\n                const longerThanADay = completedEvent.DurationInMs > 86400000;\r\n                nextLine = longerThanADay ? 'axisFormat %Y-%m-%d %H:%M \\n' : 'axisFormat %H:%M:%S \\n';\r\n                results.push(Promise.resolve(nextLine));\r\n                needToAddAxisFormat = false;\r\n            }\r\n            \r\n            nextLine = isParentOrchestration ? '' : `section ${orchestrationName}(${this.escapeTitle(orchestrationId)}) \\n`;\r\n\r\n            var lineName = this.formatDuration(completedEvent.DurationInMs);\r\n            if (!lineName) {\r\n                lineName = orchestrationName;\r\n            }\r\n\r\n            nextLine += `${lineName}: ${isParentOrchestration ? '' : 'active,'} ${this.formatDateTime(startedEvent.Timestamp)}, ${this.formatDurationInSeconds(completedEvent.DurationInMs)} \\n`;\r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        if (needToAddAxisFormat) {\r\n\r\n            nextLine = 'axisFormat %H:%M:%S \\n';\r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        for(var event of historyEvents) {\r\n        \r\n            switch (event.EventType) {\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.renderOrchestration(subOrchestrationId, subOrchestrationName, history, false)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`%% Failed to load ${subOrchestrationName}. ${err.message} \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: done, ${this.formatDateTime(event.ScheduledTime)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: crit, ${this.formatDateTime(event.ScheduledTime)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of a custom liquid markup tab on OrchestrationDetails view\r\nexport class LiquidMarkupTabState implements ICustomTabState {\r\n\r\n    name: string = \"\";\r\n    readonly description: string = \"\";\r\n    readonly isMermaidDiagram: boolean = false;\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._rawHtml; };\r\n\r\n    constructor(private _orchestrationId: string, private _backendClient: IBackendClient) {\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/custom-tab-markup('${this.name}')`;\r\n        return this._backendClient.call('POST', uri).then(response => {\r\n\r\n            if (!cancelToken.isCancelled) {\r\n               \r\n                this._rawHtml = response;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _rawHtml: string;\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { SequenceDiagramTabState } from './SequenceDiagramTabState';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { GanttDiagramTabState } from './GanttDiagramTabState';\r\nimport { LiquidMarkupTabState } from './LiquidMarkupTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get selectedTabIndex(): number { return this._selectedTabIndex; }\r\n    set selectedTabIndex(val: number) {\r\n\r\n        if (this._selectedTabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._selectedTabIndex = val;\r\n        this.loadCustomTabIfNeeded();\r\n    }\r\n\r\n    get selectedTab(): ICustomTabState {\r\n        return !this._selectedTabIndex ? null : this._tabStates[this._selectedTabIndex - 1];\r\n    }\r\n\r\n    @computed\r\n    get details(): DurableOrchestrationStatus { return this._details; }\r\n\r\n    @computed\r\n    get history(): HistoryEvent[] { return this._history; }\r\n\r\n    @computed\r\n    get historyTotalCount(): number { return this._historyTotalCount; }\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get loadInProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress || this.loadInProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        this.newCustomStatus = !!this._details.customStatus ? JSON.stringify(this._details.customStatus) : '';\r\n    }\r\n\r\n    @computed\r\n    get restartDialogOpen(): boolean { return this._restartDialogOpen; }\r\n    set restartDialogOpen(val: boolean) {\r\n        this._restartDialogOpen = val;\r\n        this.restartWithNewInstanceId = true;\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this._details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this._details.customStatus);\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n    @observable\r\n    restartWithNewInstanceId: boolean = true;\r\n\r\n    @computed\r\n    get tabStates(): ICustomTabState[] { return this._tabStates; }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this._history = [];\r\n            this._details = new DurableOrchestrationStatus();\r\n            this._tabStates = [];\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    restart() {\r\n        this.restartDialogOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/restart`;\r\n        const requestBody = { restartWithNewInstanceId: this.restartWithNewInstanceId };\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to restart: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse event data: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse custom status: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to set custom status: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) { // We might end up here, if next timer occurs while a custom tab is still loading\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n            return;\r\n        }\r\n\r\n        this._inProgress = true;\r\n        this._noMorePagesToLoad = false;\r\n\r\n        if (!this._autoRefresh && (!this.selectedTab)) {\r\n            \r\n            this._history = [];\r\n            this._historyTotalCount = 0;\r\n        }\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n        \r\n            this._details = response;\r\n\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n\r\n            var tabStateIndex = 0;\r\n\r\n            // Loading sequence diagram tab\r\n            if (this._details.entityType === \"Orchestration\") {\r\n               \r\n                if (this._tabStates.length <= tabStateIndex) {\r\n                    this._tabStates.push(new SequenceDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                    this._tabStates.push(new GanttDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                }\r\n                tabStateIndex += 2;\r\n            }\r\n\r\n            // Loading custom tabs\r\n            if (!!this._details.tabTemplateNames) {\r\n                for (var templateName of this._details.tabTemplateNames) {\r\n\r\n                    if (this._tabStates.length <= tabStateIndex) {\r\n                        this._tabStates.push(new LiquidMarkupTabState(this._orchestrationId, this._backendClient));\r\n                    }\r\n                    this._tabStates[tabStateIndex].name = templateName;\r\n                    tabStateIndex++;\r\n                }                \r\n            }\r\n\r\n            this._inProgress = false;\r\n\r\n            // Loading the history\r\n            this.loadHistoryIfNeeded(!!this._autoRefresh);\r\n\r\n            // Reloading the current custom tab as well\r\n            this.loadCustomTabIfNeeded();\r\n            \r\n        }, err => {\r\n            this._inProgress = false;\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadHistoryIfNeeded(isAutoRefresh: boolean = false): void {\r\n\r\n        if (!!this.inProgress || !!this.selectedTab || !!this._noMorePagesToLoad) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._history.length;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/history?$top=${this._pageSize}&$skip=${skip}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            this._historyTotalCount = response.totalCount;\r\n\r\n            if (isAutoRefresh) {\r\n                this._history = response.history;\r\n            } else {\r\n                this._history.push(...response.history);\r\n\r\n                if (response.history.length < this._pageSize) {\r\n\r\n                    // Stop the infinite scrolling\r\n                    this._noMorePagesToLoad = true;\r\n                }\r\n            }\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Failed to load history: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    private loadCustomTabIfNeeded(): void {\r\n\r\n        if (!!this.inProgress || !this.selectedTab) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        this.selectedTab.load(this._details, cancelToken).then(() => {}, err => { \r\n                \r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Failed to load tab: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    private setAutoRefresh(): void {\r\n\r\n        if (!this._autoRefresh) {\r\n            return;\r\n        }\r\n\r\n        if (!!this._autoRefreshToken) {\r\n            clearTimeout(this._autoRefreshToken);\r\n        }\r\n        this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n    }\r\n\r\n    private loadAllHistory(orchestrationId: string): Promise<HistoryEvent[]> {\r\n\r\n        const uri = `/orchestrations('${orchestrationId}')/history`;\r\n        return this._backendClient.call('GET', uri).then(response => response.history);\r\n    }\r\n\r\n    @observable\r\n    private _tabStates: ICustomTabState[] = [];\r\n\r\n    @observable\r\n    private _details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n    @observable\r\n    private _history: HistoryEvent[] = [];\r\n    @observable\r\n    private _selectedTabIndex: number = 0;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n    @observable\r\n    private _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _restartDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _historyTotalCount: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 200;\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { observable, computed } from 'mobx'\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Clean Entity Storage Dialog\r\nexport class CleanEntityStorageDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(isOpen: boolean) {\r\n        this._dialogOpen = isOpen;\r\n\r\n        if (isOpen) {\r\n            this._response = null;\r\n            this.removeEmptyEntities = true;\r\n            this.releaseOrphanedLocks = true;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get response(): CleanEntityStorageResponse | null { return this._response; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return true;\r\n    };\r\n\r\n    @observable\r\n    removeEmptyEntities: boolean;\r\n    @observable\r\n    releaseOrphanedLocks: boolean;\r\n    \r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    clean() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/clean-entity-storage', {\r\n            removeEmptyEntities: this.removeEmptyEntities,\r\n            releaseOrphanedLocks: this.releaseOrphanedLocks\r\n        }).then(response => {\r\n            this._response = response;\r\n        }, err => {\r\n            this.errorMessage = `Clean Entity Storage failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _response: CleanEntityStorageResponse | null = null;\r\n}\r\n\r\nexport class CleanEntityStorageResponse\r\n{\r\n    numberOfEmptyEntitiesRemoved: number;\r\n    numberOfOrphanedLocksRemoved: number;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n            } else {\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return null; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setCustomHandlers(purgeHistoryHandler: () => void, cleanEntityStorageHandler: () => void) {\r\n\r\n        this._handlers['purgeHistory'] = purgeHistoryHandler;\r\n        this._handlers['cleanEntityStorage'] = cleanEntityStorageHandler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const StateFromVsCode: {};\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n        this._state = StateFromVsCode[this._prefix];\r\n        if (!this._state) {\r\n            this._state = {};\r\n        }\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        this._state[fieldName] = value\r\n        this.save();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete this._state[item.fieldName];\r\n            } else {\r\n                this._state[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        this.save();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        return this._state[fieldName];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete this._state[fieldName];\r\n        this.save();\r\n    }\r\n\r\n    private readonly _state: any;\r\n\r\n    private save(): void {\r\n        this._vsCodeApi.postMessage({ method: 'PersistState', key: this._prefix, data: this._state });\r\n    }\r\n}\r\n","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { BackendClient } from '../services/BackendClient';\r\nimport { LoginState, OrchestrationsPathPrefix } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { ResultsListTabState } from './ResultsListTabState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n    cleanEntityStorageDialogState: CleanEntityStorageDialogState;\r\n\r\n    @computed\r\n    get typedInstanceId(): string {\r\n        return this._typedInstanceId;\r\n    }\r\n    set typedInstanceId(s: string) {\r\n        this._typedInstanceId = s;\r\n        this.reloadSuggestions();\r\n    }\r\n\r\n    @computed\r\n    get suggestions(): string[] {\r\n        return this._suggestions;\r\n    }\r\n\r\n    @computed\r\n    get isExactMatch(): boolean {\r\n        return this._suggestions.length === 1 && this._suggestions[0] === this._typedInstanceId;\r\n    }\r\n    \r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState & ResultsListTabState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setCustomHandlers(\r\n                    () => this.purgeHistoryDialogState.dialogOpen = true,\r\n                    () => this.cleanEntityStorageDialogState.dialogOpen = true\r\n                );\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(() => this.loginState.taskHubName, () => this.loginState.getAuthorizationHeaderAsync());\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState, this.cleanEntityStorageDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Opens the entered orchestrationId in a new tab\r\n    goto() {\r\n        window.open(`${this._backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this._typedInstanceId}`);\r\n        this._typedInstanceId = '';\r\n        this._suggestions = [];\r\n    }\r\n\r\n    @observable\r\n    private _suggestions: string[] = [];\r\n    @observable\r\n    private _typedInstanceId: string = '';\r\n\r\n    private readonly _backendClient: IBackendClient;\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const pos = window.location.pathname.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos < 0) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(pos + OrchestrationsPathPrefix.length);\r\n    }\r\n\r\n    // Reloads list of suggested instanceIds\r\n    private reloadSuggestions(): void {\r\n\r\n        if (!this._typedInstanceId || this._typedInstanceId.length < 2) {\r\n            this._suggestions = [];\r\n            return;\r\n        }\r\n\r\n        const uri = `/id-suggestions(prefix='${this._typedInstanceId}')`;\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response || !this._typedInstanceId) {\r\n                this._suggestions = [];\r\n            } else {\r\n                this._suggestions = response;\r\n            }\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport './index.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\n\r\nimport { Main } from './components/Main';\r\nimport { MainState } from './states/MainState';\r\nimport { Theme } from './theme';\r\n\r\ndocument.body.style.backgroundColor = Theme.palette.background.paper;\r\n\r\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\r\nconst appState = new MainState();\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={Theme} >\r\n        <Main state={appState} />\r\n    </ThemeProvider>,\r\n    document.getElementById('root') as HTMLElement\r\n);"],"sourceRoot":""}