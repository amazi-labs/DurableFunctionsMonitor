{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","components/LoginIcon.tsx","components/ErrorMessage.tsx","DfmContext.ts","components/MainMenu.tsx","states/DurableOrchestrationStatus.ts","DateTimeHelpers.ts","states/ErrorMessageState.ts","CancelToken.ts","states/results-view/ResultsListTabState.ts","services/BackendClient.ts","states/LoginState.ts","states/MermaidDiagramStateBase.ts","states/results-view/ResultsGanttDiagramTabState.ts","states/results-view/ResultsHistogramTabState.ts","states/FunctionGraphStateBase.ts","states/az-func-as-a-graph/buildFunctionDiagramCode.ts","states/results-view/ResultsFunctionGraphTabState.ts","states/results-view/OrchestrationsState.ts","states/QueryString.ts","theme.ts","components/OrchestrationLink.tsx","components/LongJsonDialog.tsx","components/results-view/OrchestrationsList.tsx","components/results-view/OrchestrationsHistogram.tsx","components/SaveAsSvgButton.tsx","components/results-view/OrchestrationsGanttChart.tsx","states/details-view/ICustomTabState.ts","components/results-view/OrchestrationsFunctionGraph.tsx","components/results-view/Orchestrations.tsx","components/details-view/DurableEntityButtons.tsx","components/details-view/DurableEntityFields.tsx","components/details-view/OrchestrationButtons.tsx","components/details-view/OrchestrationFields.tsx","states/MainState.ts","components/details-view/OrchestrationDetailsFunctionGraph.tsx","components/details-view/OrchestrationDetails.tsx","components/FunctionGraph.tsx","components/PurgeHistoryDialog.tsx","components/CleanEntityStorageDialog.tsx","components/Main.tsx","states/MainMenuState.ts","states/details-view/MermaidDiagramTabState.ts","states/details-view/SequenceDiagramTabState.ts","states/details-view/FunctionGraphTabState.ts","states/details-view/GanttDiagramTabState.ts","states/details-view/LiquidMarkupTabState.ts","states/details-view/OrchestrationDetailsState.ts","states/FunctionGraphState.ts","states/PurgeHistoryDialogState.ts","states/CleanEntityStorageDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","LoginIcon","observer","state","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","fontSize","DialogContentText","allowedTaskHubNames","DialogTitle","List","hubName","ListItem","button","key","Link","href","locationPathName","CircularProgress","React","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","aria-label","DfmContext","DfmClientConfig","showTimeAs","_showTimeAsLocal","localStorage","getItem","theme","val","setItem","t","isValid","local","utc","moment","toISOString","slice","utcString","length","dotPoint","lastIndexOf","milliseconds","substring","format","computed","observable","DfmContextType","dfmContextInstance","MainMenu","context","setWindowTitle","RadioGroup","row","value","showTimeAsLocal","toString","onChange","target","doRefresh","FormControlLabel","control","Radio","label","showConnectionParamsDialog","showPurgeHistoryDialog","showCleanEntityStorageDialog","connectionParamsDialogOpen","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","connectionString","DialogActions","saveConnectionParams","isDirty","contextType","HistoryEventFields","RuntimeStatuses","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","duration","tabTemplateNames","instance","DurableOrchestrationStatusFields","DateTimeHelpers","isAfter","MinMoment","isBefore","MaxMoment","durationInMs","isNaN","days","Math","floor","c","result","toFixed","hours","minutes","seconds","ErrorMessageState","CancelToken","ResultsListTabState","_backendClient","_localStorage","_refresh","_noMorePagesToLoad","_pageSize","orderByString","_orderBy","orderByDirectionString","_orderByDirection","hiddenColumnsString","_hiddenColumns","split","_orchestrations","resetOrderBy","push","join","removeItem","filterClause","cancelToken","isAutoRefresh","Promise","setItems","fieldName","skip","orderByClause","orderByDirection","hiddenColumnsClause","uri","call","then","response","isCancelled","RoutePrefix","DfmRoutePrefix","BackendUri","process","BackendClient","_getTaskHubName","_getAuthorizationHeaderAsync","method","url","data","includes","toLowerCase","reject","headers","axios","request","r","OrchestrationsPathPrefix","LoginState","_aadApp","defaults","maxRedirects","login","_isLoggedIn","_userName","_taskHubName","_allowedTaskHubNames","window","location","pathname","pos","endsWith","tryGetTaskHubName","origin","substr","get","loginWithEasyAuthConfig","err","replace","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","console","log","idToken","rawIdToken","Authorization","acquireTokenRedirect","config","interceptors","use","reload","initializeTaskHubNameAndConfirmLogin","Msal","authority","redirectUri","rootUri","handleRedirectCallback","authErr","accountState","errorCode","account","getAccount","loginRedirect","getAuthorizationHeaderAsync","hubNames","pathParts","filter","p","MermaidDiagramStateBase","_mermaidInitialized","mermaid","initialize","startOnLoad","sequence","noteMargin","boxMargin","boxTextMargin","flowchart","curve","useMaxWidth","htmlLabels","formatDuration","ceil","ResultsGanttDiagramTabState","_instances","_diagramSvg","_diagramCode","initMermaidWhenNeeded","instances","renderDiagram","render","svg","oneBasedInstanceIndex","isVsCode","routePrefixAndTaskHubName","prevSectionName","sectionNr","nextLine","sectionName","getFunctionName","escapeTitle","Date","getTime","formatDateTime","formatDurationInSeconds","utcDateTimeString","ResultsHistogramTabState","_filterState","_counts","_originalTimeInterval","_applyingZoom","_timeRangeInMilliseconds","_numOfIntervals","_zoomedIn","_histograms","_numOfInstancesShown","timeFrom","timeTill","timeRange","startTime","valueOf","bucketLength","loadNextBatch","left","right","cancel","from","till","reloadOrchestrations","pageNumber","instanceTypeName","emptyHistogram","i","x0","x","y","instanceStartPos","FunctionGraphStateBase","_traversalResult","functionName","backendClient","functionOrProxy","startsWith","proxies","functions","filePath","iconsSvgElement","document","getElementById","innerHTML","space","getTriggerBindingText","binding","type","authLevel","methods","route","path","databaseName","collectionName","eventHubName","queueName","topicName","subscriptionName","schedule","getBindingText","tableName","buildFunctionDiagramCode","functionsMap","proxiesMap","settings","doNotRenderFunctions","func","triggerBinding","inputBindings","outputBindings","otherBindings","nodeCode","bindings","direction","getFunctionHash","f","hash","isCalledBy","sort","f1","f2","s1","s2","calledBy","inputBinding","outputBinding","otherBinding","isSignalledBy","signalledBy","signalName","isCalledByItself","doNotRenderProxies","proxyNodesColor","nodeTitle","notAddedToCsProjFile","proxy","proxyPurifiedName","warningNotAddedToCsProjFile","matchCondition","nodeName","backendUri","nextNodeName","getRequestOverridesArrowCode","requestOverrides","getResponseOverridesArrowCode","responseOverrides","nodeColor","maxSymbolsInTitle","arrowText","JSON","stringify","FilterOperatorEnum","ResultsTabEnum","TimeRangeEnum","MetricsItem","completed","running","failed","other","ResultsFunctionGraphTabState","TotalMetricsName","_metrics","_renderFunctions","_renderProxies","clonedMetrics","parse","metrics","funcName","diagramCode","applyIcons","QueryString","_values","pairs","search","pair","decodeURIComponent","queryString","encodeURIComponent","history","replaceState","OrchestrationsState","_isFunctionGraphAvailable","momentFrom","_tabStates","_refreshToken","_delayedRefreshDelay","_oldFilterValue","_oldTimeFrom","_oldTimeTill","timeFromString","subtract","_timeFrom","timeTillString","_timeTill","timeRangeString","values","_timeRange","filteredColumnString","_filteredColumn","filterOperatorString","_filterOperator","filterValueString","_filterValue","showStatusesString","_showStatuses","autoRefreshString","_autoRefresh","Number","tabIndexString","tabIndex","_tabIndex","_cancelToken","loadOrchestrations","LastMinute","Last10Minutes","LastHour","Last24Hours","Last7Days","Last30Days","Last90Days","Custom","listState","status","checked","indexOf","splice","clearTimeout","setTimeout","isValidMoment","reset","s","encodedFilterValue","Equals","StartsWith","Contains","NotEquals","NotStartsWith","NotContains","selectedTabState","load","finally","colorTheme","REACT_APP_COLOR_THEME","Theme","createMuiTheme","palette","CustomTabStyle","backgroundColor","RuntimeStatusToStyle","hexToRGBA","error","light","success","warning","background","paper","hex","alpha","parseInt","RuntimeStatusToBadgeStyle","OrchestrationLink","onLinkClicked","orchestrationId","extraSanitizeHrefComponent","LongJsonDialog","maxWidth","jsonString","InputBase","multiline","jsonObject","dialogTitle","dialogState","rowsMax","jsonFormattedString","component","variant","OrchestrationsList","FormHelperText","orchestrations","hiddenColumns","unhide","Paper","elevation","renderTable","longJsonDialogState","visibleColumns","showLastEventColumn","Table","size","TableHead","TableRow","col","onlyOneVisibleColumnLeft","TableCell","onMouseEnter","columnUnderMouse","onMouseLeave","TableSortLabel","active","orderBy","hideColumn","TableBody","orchestration","rowStyle","cellStyle","verticalAlign","style","formatDateTimeString","renderJson","OrchestrationsHistogram","typeNames","histograms","numOfInstancesShown","zoomedIn","resetZoom","innerWidth","innerHeight","xType","stackBy","top","tickTotal","tickFormat","formatTimeTick","timeRangeInMilliseconds","typeName","stroke","getColorCodeForInstanceType","drag","enableY","onDragEnd","area","applyZoom","colors","items","counts","orientation","instanceType","hashCode","charCodeAt","m","second","millisecond","SaveAsSvgButton","fileName","URL","createObjectURL","Blob","download","getStyledSvg","CustomTabTypeEnum","OrchestrationsGanttChart","svgElement","mountClickEventToFunctionNodes","getElementsByClassName","rawHtml","dangerouslySetInnerHTML","__html","Toolbar","flex","navigator","clipboard","writeText","nodes","el","onclick","goto","cursor","OrchestrationsFunctionGraph","RunningStyle","CompletedStyle","FailedStyle","OtherStyle","addEventListener","repositionMetricHints","removeEventListener","functionsLoaded","FormGroup","Checkbox","renderFunctions","renderProxies","renderTotalMetric","renderMetrics","diagramSvg","totalMetric","Chip","metric","allMetricsHintNodes","visibility","onresize","instanceNodes","Array","concat","isHighlightedAttributeName","instanceNode","match","exec","metricsHintNode","setAttribute","instanceNodeRect","getBoundingClientRect","node","opacity","getAttribute","closuredFunctionName","gotoFunctionCode","Orchestrations","scrollingElement","scrollHeight","scrollTop","Histogram","ctrlKey","keyCode","histogramState","ganttChartState","functionGraphState","timeZone","AppBar","position","Grid","container","item","xs","timeRangeToString","ampm","autoOk","invalidDateMessage","getMoment","setMoment","onBlur","applyTimeFrom","onAccept","onKeyPress","handleKeyPress","FormControl","timeTillEnabled","applyTimeTill","placeholder","InputLabel","htmlFor","Select","filteredColumn","inputProps","filterOperator","filterValue","applyFilterValue","showStatuses","onScroll","rescheduleDelayedRefresh","isStatusChecked","setStatusChecked","autoRefresh","Tabs","ev","Tab","isFunctionGraphAvailable","Gantt","FunctionGraph","event","preventDefault","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","raiseEventDialogOpen","purge","eventName","rows","eventData","raiseEvent","DurableEntityFields","details","runtimeStatusStyle","sm","md","zeroMinWidth","OrchestrationButtons","restartDialogOpen","rewindConfirmationOpen","terminateConfirmationOpen","setCustomStatusDialogOpen","rewind","terminate","newCustomStatus","setCustomStatus","isCustomStatusDirty","restartWithNewInstanceId","restart","DfmViewModeEnum","OrchestrationFields","loadHistory","totalItems","historyTotalCount","itemsShown","Name","FunctionName","SubOrchestrationId","functionNames","events","index","Timestamp","EventType","EventId","renderEventLink","ScheduledTime","Result","Details","OrchestrationDetailsFunctionGraph","DurationStyle","totalInstances","OrchestrationDetails","loadDetails","loadInProgress","tabStates","tabState","selectedTab","tabType","MermaidDiagram","description","saveAsJson","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","CleanEntityStorageDialog","removeEmptyEntities","releaseOrphanedLocks","clean","numberOfEmptyEntitiesRemoved","numberOfOrphanedLocksRemoved","Main","utils","MomentUtils","Provider","loginState","mainMenuState","orchestrationsState","src","Breadcrumbs","taskHubName","orchestrationDetailsState","Autocomplete","freeSolo","options","isExactMatch","suggestions","typedInstanceId","newValue","renderInput","params","purgeHistoryDialogState","cleanEntityStorageDialogState","MainMenuState","_purgeHistoryDialogState","_cleanEntityStorageDialogState","_oldConnectionString","_oldHubName","_inProgress","_isReadOnly","isReadOnly","alert","accountName","version","MermaidDiagramTabState","_loadHistory","buildDiagram","SequenceDiagramTabState","all","getSequenceForOrchestration","sequenceLines","orchestrationName","parentOrchestrationName","isFailed","historyEvents","externalActor","results","maxDurationInMs","j","formatTimestamp","subOrchFailed","subOrchestrationId","subOrchestrationName","DurationInMs","timestamp","FunctionGraphTabState","traversalResult","updateMetricsForInstance","promises","subFuncName","subHistory","GanttDiagramTabState","renderOrchestration","arrayOfArrays","lines","flat","linesWithMetadata","l","injectFunctionNameAttributes","adjustIntervalsSmallerThanOneSecond","RegExp","tagName","taskIndex","oneBasedLineIndex","lineMetadata","activityWidth","activityMetadata","parentInstanceId","widthPercentage","orchIndex","findIndex","orchMatch","orchWidth","newActivityWidth","isParentOrchestration","startedEvent","find","completedEvent","needToAddAxisFormat","orchDuration","longerThanADay","lineName","formatLineName","eventTimestamp","LiquidMarkupTabState","_orchestrationId","RawHtml","_rawHtml","OrchestrationDetailsState","_autoRefreshToken","loadCustomTab","_history","_details","_historyTotalCount","_raiseEventDialogOpen","_setCustomStatusDialogOpen","_restartDialogOpen","_functionMap","requestBody","functionMapPromise","responses","setAutoRefresh","tabStateIndex","orchId","loadAllHistory","fn","templateName","totalCount","FunctionGraphState","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","statuses","has","included","add","delete","CleanEntityStorageDialogState","isOpen","_response","TypedLocalStorage","_prefix","apply","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","random","postMessage","purgeHistoryHandler","cleanEntityStorageHandler","VsCodeTypedLocalStorage","_state","StateFromVsCode","save","MainState","vsCodeApi","acquireVsCodeApi","DfmViewMode","IsFunctionGraphAvailable","setCustomHandlers","_typedInstanceId","reloadSuggestions","_suggestions","OrchestrationIdFromVsCode","body","appState","ReactDOM","ThemeProvider"],"mappings":"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","file":"static/js/main.8bf6713f.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 368,\n\t\"./locale.js\": 368\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 665;","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    List, ListItem, Link,\r\n    Menu, MenuItem, Tooltip, Typography, DialogTitle\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage ? (!state.allowedTaskHubNames ? (<>\r\n                            \r\n                            <Container className=\"login-progress\">\r\n                                <CircularProgress />\r\n                            </Container>\r\n                            <DialogContentText>Login in progress...</DialogContentText>\r\n\r\n                        </>) : (<>\r\n                                \r\n                            <DialogTitle>Select your Task Hub</DialogTitle>\r\n                            <List className=\"task-hub-list\">\r\n                                {state.allowedTaskHubNames.map(hubName => (\r\n                                    <ListItem button key={hubName}>\r\n                                        <Link href={state.locationPathName + hubName}>{hubName}</Link>\r\n                                    </ListItem>)\r\n                                )}\r\n                            </List>\r\n                            \r\n                        </>)): (<>\r\n                        \r\n                            <Container className=\"login-progress\">\r\n                                <Error color=\"secondary\" fontSize=\"large\" />\r\n                            </Container>\r\n                            <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            \r\n                        </>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\n// Config object passed as a global variable via index.html\r\ndeclare const DfmClientConfig: {\r\n    theme: string,\r\n    showTimeAs: string\r\n};\r\n\r\n// Global observable context object with global settings and other cross-cutting concerns in it\r\nexport class DfmContext {\r\n\r\n    get theme(): string { return DfmClientConfig.theme; }\r\n\r\n    @computed\r\n    get showTimeAsLocal(): boolean {\r\n        return this._showTimeAsLocal;\r\n    }\r\n    set showTimeAsLocal(val) {\r\n        localStorage?.setItem('showTimeAs', val ? 'Local' : 'UTC');\r\n        this._showTimeAsLocal = val;\r\n    }\r\n\r\n    constructor() {\r\n        if (DfmClientConfig.showTimeAs !== 'Local') {\r\n            this._showTimeAsLocal = localStorage?.getItem('showTimeAs') === 'Local';\r\n        } else {\r\n            this._showTimeAsLocal = true;\r\n        }\r\n    }\r\n\r\n    // Prepares a moment for visualizing with @material-ui/pickers\r\n    public getMoment(t: moment.Moment): moment.Moment {\r\n\r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to call either .utc() or .local() on moment value, to make it _render_ correctly.\r\n        if (!this._showTimeAsLocal) {\r\n            t.utc();\r\n        } else {\r\n            t.local();\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    // Converts a moment taken from @material-ui/pickers\r\n    public setMoment(t: moment.Moment): moment.Moment {\r\n\r\n        if (!t || !t.isValid() || !!this._showTimeAsLocal) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        return moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n    }\r\n\r\n    public formatDateTimeString(utcString: string): string {\r\n\r\n        if (!this._showTimeAsLocal || !utcString || utcString.length < 11) {\r\n            return utcString;\r\n        }\r\n\r\n        // need to handle milliseconds separately (because it might also be microseconds, and those are omitted by moment)\r\n        const dotPoint = utcString.lastIndexOf('.');\r\n        const milliseconds = (dotPoint >= 0) ? '.' + utcString.substring(dotPoint + 1, utcString.length - 1) : '';\r\n\r\n        return moment(utcString).format(`YYYY-MM-DDTHH:mm:ss`) + milliseconds;\r\n    }\r\n\r\n    @observable\r\n    private _showTimeAsLocal;\r\n}\r\n\r\nexport const DfmContextType = React.createContext<DfmContext>(new DfmContext());\r\nexport const dfmContextInstance = new DfmContext();","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControlLabel, \r\n    IconButton, LinearProgress, Menu, MenuItem, Radio, RadioGroup, TextField, Typography\r\n} from '@material-ui/core';\r\n\r\nimport './MainMenu.css';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\nimport { DfmContextType } from '../DfmContext';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState, doRefresh: () => void }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <IconButton color=\"inherit\"\r\n                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n            >\r\n                <MenuIcon/>\r\n            </IconButton>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <RadioGroup row value={this.context.showTimeAsLocal.toString()} onChange={(evt) => {\r\n                    this.context.showTimeAsLocal = (evt.target as HTMLInputElement).value === 'true';\r\n                    state.menuAnchorElement = undefined;\r\n                    this.props.doRefresh();\r\n                }}>\r\n                    <Typography className=\"show-time-as-typography\">Show time as:</Typography>\r\n                    <FormControlLabel control={<Radio color=\"primary\"/>} label=\"UTC\" value={'false'} />\r\n                    <FormControlLabel control={<Radio color=\"primary\"/>} label=\"Local\" value={'true'} />\r\n                </RadioGroup>\r\n\r\n                <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                <MenuItem onClick={() => state.showCleanEntityStorageDialog()}>Clean Entity Storage...</MenuItem>\r\n            </Menu>\r\n\r\n            <Dialog\r\n                open={state.connectionParamsDialogOpen}\r\n                onClose={() => state.connectionParamsDialogOpen = false}\r\n            >\r\n                <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                    \r\n                    <DialogContentText>\r\n                        {\r\n                            state.isReadonly ?\r\n                                \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively)\" :\r\n                                \"The below values will be saved to local.settings.json file.\"\r\n                        }\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Hub Name\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.hubName}\r\n                        onChange={(evt) => state.hubName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Azure Storage Connection String\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: state.isReadonly }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.connectionString}\r\n                        onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                    />\r\n\r\n                    <ErrorMessage state={state}/>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    {(!state.isReadonly) && (\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    )}\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    EventId: number;\r\n    Name: string;\r\n    FunctionName: string;\r\n    ScheduledTime: string;\r\n    DurationInMs: number;\r\n    SubOrchestrationId: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'EventId',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport const RuntimeStatuses = ['Completed', 'Running', 'Failed', 'Pending', 'Terminated', 'Canceled', 'ContinuedAsNew'] as const;\r\nexport type RuntimeStatus = typeof RuntimeStatuses[number];\r\n\r\nexport type EntityType = 'Orchestration' | 'DurableEntity';\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    duration: number;\r\n    tabTemplateNames?: string[];\r\n\r\n    static getFunctionName(instance: DurableOrchestrationStatus): string {\r\n        return instance.entityType === 'DurableEntity' ? instance.entityId.name : instance.name;\r\n    }\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'duration',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01');\r\n    private static MaxMoment = moment('2100-01-01');\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDuration(durationInMs: number): string {\r\n\r\n        if (isNaN(durationInMs) || (durationInMs < 0)) {\r\n            return '';\r\n        }\r\n\r\n        const days = Math.floor(durationInMs / 86400000);\r\n        var c = 0;\r\n        var result = '';\r\n\r\n        if (days > 0) {\r\n            result += days.toFixed(0) + 'd';\r\n            ++c;\r\n            durationInMs = durationInMs % 86400000;\r\n        }\r\n\r\n        const hours = Math.floor(durationInMs / 3600000);\r\n        if (hours > 0) {\r\n            result += hours.toFixed(0) + 'h';\r\n\r\n            if (++c > 1) {\r\n                return result;\r\n            }\r\n\r\n            durationInMs = durationInMs % 3600000;\r\n        }\r\n\r\n        const minutes = Math.floor(durationInMs / 60000);\r\n        if (minutes > 0) {\r\n            result += minutes.toFixed(0) + 'm';\r\n\r\n            if (++c > 1) {\r\n                return result;\r\n            }\r\n\r\n            durationInMs = durationInMs % 60000;\r\n        }\r\n\r\n        const seconds = Math.floor(durationInMs / 1000);\r\n        if (seconds > 0) {\r\n            result += seconds.toFixed(0) + 's';\r\n\r\n            if (++c > 1) {\r\n                return result;\r\n            }\r\n\r\n            durationInMs = durationInMs % 1000;\r\n        }\r\n\r\n        if (durationInMs > 0) {\r\n            result += durationInMs.toFixed(0) + 'ms';\r\n        }\r\n\r\n        if (!result) {\r\n            result = '0ms';\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import { observable } from 'mobx'\r\n\r\nexport class CancelToken {\r\n    @observable\r\n    inProgress: boolean = false;\r\n    @observable\r\n    isCancelled: boolean = false;\r\n}\r\n","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { ITypedLocalStorage } from '../ITypedLocalStorage';\r\nimport { CancelToken } from '../../CancelToken';\r\n\r\n// Represents the state of a tab in the results pane\r\nexport interface IResultsTabState {\r\n\r\n    reset(): void;\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void>;\r\n}\r\n\r\n// Resulting list of orchestrations represented as a plain table\r\nexport class ResultsListTabState implements IResultsTabState {\r\n\r\n    @observable\r\n    longJsonDialogState = {};\r\n    \r\n    @observable\r\n    columnUnderMouse: string;\r\n\r\n    @computed\r\n    get hiddenColumns(): string[] { return this._hiddenColumns; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection; }\r\n\r\n    @computed\r\n    get orderBy(): string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val) {\r\n\r\n            this._orderBy = val;\r\n            this._orderByDirection = 'asc';\r\n\r\n        } else if (this._orderByDirection === 'desc') {\r\n\r\n            this.resetOrderBy();\r\n        }\r\n        else {\r\n            this._orderByDirection = 'desc';\r\n        }\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<ResultsListTabState>, private _refresh: () => void) {\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n\r\n        const hiddenColumnsString = this._localStorage.getItem('hiddenColumns');\r\n        if (!!hiddenColumnsString) {\r\n            this._hiddenColumns = hiddenColumnsString.split('|');\r\n        }\r\n    }\r\n\r\n    hideColumn(name: string) {\r\n        this._hiddenColumns.push(name);\r\n        this._localStorage.setItem('hiddenColumns', this._hiddenColumns.join('|'));\r\n    }\r\n\r\n    unhide() {\r\n        this._hiddenColumns = [];\r\n        this._localStorage.removeItem('hiddenColumns');\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean = false): Promise<void> {\r\n\r\n        if (isAutoRefresh) { \r\n\r\n            this._noMorePagesToLoad = false;\r\n\r\n        } else {\r\n\r\n            if (!!this._noMorePagesToLoad) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            // persisting state as a batch\r\n            this._localStorage.setItems([\r\n                { fieldName: 'orderBy', value: this._orderBy },\r\n                { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n            ]);            \r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const hiddenColumnsClause = !this._hiddenColumns.length ? '' : `&hidden-columns=${this._hiddenColumns.join('|')}`;\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}${hiddenColumnsClause}`;\r\n\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n            \r\n            if (isAutoRefresh) {\r\n                this._orchestrations = response;\r\n            } else {\r\n                this._orchestrations.push(...response);\r\n            }\r\n\r\n            if (!response.length) {\r\n\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n\r\n    @observable\r\n    private _hiddenColumns: string[] = [];\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nconst RoutePrefix = !process.env.REACT_APP_BACKEND_BASE_URI ? (!DfmRoutePrefix ? '/' : `/${DfmRoutePrefix}/`) : process.env.REACT_APP_BACKEND_BASE_URI + '/';\r\nexport const BackendUri = RoutePrefix + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return RoutePrefix + this._getTaskHubName(); }\r\n\r\n    constructor(private _getTaskHubName: () => string, private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n\r\n        // Two-bugs away\r\n        if (!['get', 'post', 'put'].includes(method.toLowerCase())) {\r\n            return Promise.reject(new Error(`Method ${method} not supported`));\r\n        }\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + '/' + this._getTaskHubName() + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nexport const OrchestrationsPathPrefix = `/orchestrations/`;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @computed\r\n    get taskHubName(): string { return this._taskHubName;  }\r\n\r\n    @computed\r\n    get allowedTaskHubNames(): string[] { return this._allowedTaskHubNames; }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    // Returns window.location.pathname minus DFM's client-side routing\r\n    get locationPathName(): string {\r\n\r\n        var result = window.location.pathname;\r\n\r\n        const pos = result.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos >= 0) {\r\n            result = result.substring(0, pos);\r\n        }\r\n\r\n        if (!result.endsWith('/')) {\r\n            result += '/';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Returns the site's root URI (everything _before_ Task Hub name)\r\n    get rootUri(): string {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            const pos = window.location.href.toLowerCase().lastIndexOf('/' + hubName.toLowerCase());\r\n            if (pos >= 0) {\r\n                return window.location.href.substring(0, pos);\r\n            }\r\n        }\r\n\r\n        return window.location.origin +\r\n            (\r\n                window.location.pathname.endsWith('/') ?\r\n                    window.location.pathname.substr(0, window.location.pathname.length - 1) :\r\n                    window.location.pathname\r\n            );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Turning redirects off, as we don't ever need them anyway\r\n        axios.defaults.maxRedirects = 0;\r\n\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(response => this.loginWithEasyAuthConfig(response.data), err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        if (!this._aadApp) {\r\n\r\n            window.location.replace('/.auth/logout');\r\n\r\n        } else {\r\n            \r\n            this._aadApp.logout();\r\n        }\r\n    }\r\n\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<undefined>((resolve, reject) => resolve(undefined));\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    @observable\r\n    private _taskHubName: string;\r\n\r\n    @observable\r\n    private _allowedTaskHubNames: string[];\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    private loginWithEasyAuthConfig(config: {userName: string, clientId: string, authority: string}) {\r\n\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost or using server-directed login flow\r\n            // and proceed with no client-side auth\r\n            \r\n            this._userName = config.userName;\r\n\r\n            // Reloading the page upon cookie expiration\r\n            axios.interceptors.response.use(response => response, err => {\r\n\r\n                // Couldn't find a better way to detect this\r\n                if (err.message === 'Network Error') {\r\n                    window.location.reload(true);\r\n                }\r\n\r\n                return Promise.reject(err);\r\n            });\r\n\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority,\r\n                redirectUri: this.rootUri\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, (authErr: Msal.AuthError, accountState: string) => {\r\n\r\n            console.log(`Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`);\r\n        });\r\n\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            this._aadApp.loginRedirect();\r\n\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n        }\r\n    }\r\n\r\n    private initializeTaskHubNameAndConfirmLogin(): void {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            this._taskHubName = hubName;\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Trying to load the list of allowed Task Hubs from the backend\r\n        this.getAuthorizationHeaderAsync().then(headers => {\r\n\r\n            const uri = `${BackendUri}/task-hub-names`;\r\n            axios.get(uri, { headers }).then(response => {\r\n                \r\n                const hubNames: string[] = response.data;\r\n\r\n                if (hubNames.length === 1) {\r\n                    \r\n                    // Redirecting to that Task Hub\r\n                    window.location.pathname = this.locationPathName + hubNames[0];\r\n                } else {\r\n\r\n                    // Asking the user to choose from\r\n                    this._allowedTaskHubNames = hubNames;\r\n                }\r\n\r\n            }, err => {\r\n                this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n            });\r\n        });\r\n    }\r\n\r\n    // Extracts Task Hub name from window.location.href, still honoring client-side routing and subpaths\r\n    private tryGetTaskHubName(): string {\r\n\r\n        const locationPathName = this.locationPathName;\r\n\r\n        // If current path ends with DfmRoutePrefix, then it doesn't actually contain Task Hub name\r\n        if (locationPathName.toLowerCase().endsWith(`/${DfmRoutePrefix.toLowerCase()}/`)) {\r\n            return null;\r\n        }\r\n\r\n        const pathParts = locationPathName.split('/').filter(p => !!p);\r\n        if (pathParts.length < 1) {\r\n            return null;\r\n        }\r\n\r\n        // Consider the last path part to be the Task Hub name.\r\n        // This should work even if we're hosted under some subpath\r\n        return pathParts[pathParts.length - 1];\r\n    }\r\n}","import { observable } from 'mobx';\r\nimport mermaid from 'mermaid';\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\n\r\n// Base class for all mermaid-related states\r\nexport abstract class MermaidDiagramStateBase {\r\n\r\n    @observable\r\n    protected _diagramCode: string;\r\n    @observable\r\n    protected _diagramSvg: string;\r\n\r\n    protected initMermaidWhenNeeded() : void {\r\n\r\n        if (MermaidDiagramStateBase._mermaidInitialized) { \r\n            return;\r\n        }\r\n\r\n        mermaid.initialize({\r\n            startOnLoad: true,\r\n            \r\n            sequence: {\r\n                noteMargin: 0,\r\n                boxMargin: 5,\r\n                boxTextMargin: 5\r\n            },\r\n\r\n            flowchart: {\r\n                curve: 'Basis',\r\n                useMaxWidth: true,\r\n                htmlLabels: false\r\n            }\r\n        });\r\n\r\n        MermaidDiagramStateBase._mermaidInitialized = true;\r\n    }\r\n\r\n    protected escapeTitle(id: string) {\r\n\r\n        return id.replace(/[@:;]/g, ' ');\r\n    }\r\n\r\n    protected formatDuration(durationInMs: number): string {\r\n\r\n        const result = DateTimeHelpers.formatDuration(durationInMs);\r\n        return !result ? '' : `(${result})`;\r\n    }\r\n\r\n    protected formatDurationInSeconds(durationInMs: number): string {\r\n\r\n        return Math.ceil(durationInMs / 1000).toFixed(0) + 's';\r\n    }\r\n\r\n    private static _mermaidInitialized = false;\r\n}","import { computed } from 'mobx'\r\nimport mermaid from 'mermaid';\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { OrchestrationsPathPrefix } from '../LoginState';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { MermaidDiagramStateBase } from '../MermaidDiagramStateBase';\r\nimport { dfmContextInstance } from '../../DfmContext';\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsGanttDiagramTabState extends MermaidDiagramStateBase implements IResultsTabState {\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; }\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; }\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n        this._instances = [];\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            const uri = `/orchestrations?$top=500&$orderby=createdTime asc${filterClause}`;\r\n\r\n            this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n                this._instances = instances;\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title Gantt Chart (${instances.length} instances shown) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss \\n' +\r\n                    this.renderDiagram(instances);\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n                        resolve();\r\n                    });\r\n\r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Opens the selected orchestrationId in a new tab\r\n    goto(oneBasedInstanceIndex: number) {\r\n\r\n        if (!!oneBasedInstanceIndex && oneBasedInstanceIndex <= this._instances.length) {\r\n\r\n            const instanceId = this._instances[oneBasedInstanceIndex - 1].instanceId;\r\n\r\n            if (this._backendClient.isVsCode) {\r\n                this._backendClient.call('OpenInNewWindow', instanceId);\r\n            } else {\r\n                window.open(`${this._backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${instanceId}`);\r\n            }            \r\n        }\r\n    }\r\n\r\n    private _instances: DurableOrchestrationStatus[] = [];\r\n\r\n    private renderDiagram(instances: DurableOrchestrationStatus[]): string {\r\n\r\n        var result: string = '';\r\n\r\n        var prevSectionName = '';\r\n        var sectionNr = 0;\r\n        for (const instance of instances) {\r\n\r\n            var nextLine = '';\r\n\r\n            // Grouping instances by their type\r\n            const sectionName = DurableOrchestrationStatus.getFunctionName(instance);\r\n            if (sectionName !== prevSectionName) {\r\n                \r\n                nextLine = `section ${++sectionNr}. ${this.escapeTitle(sectionName)} \\n`;\r\n                prevSectionName = sectionName;\r\n            }\r\n\r\n            const instanceId = instance.entityType === 'DurableEntity' ? instance.entityId.key : instance.instanceId;\r\n            const durationInMs = new Date(instance.lastUpdatedTime).getTime() - new Date(instance.createdTime).getTime();\r\n\r\n            nextLine += `${this.escapeTitle(instanceId)} ${this.formatDuration(durationInMs)}: active, ${this.formatDateTime(instance.createdTime)}, ${this.formatDurationInSeconds(durationInMs)} \\n`;\r\n            \r\n            result += nextLine;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private formatDateTime(utcDateTimeString: string): string {\r\n\r\n        if (!dfmContextInstance.showTimeAsLocal) {\r\n            return utcDateTimeString.substr(0, 19);\r\n        }\r\n\r\n        return moment(utcDateTimeString).format('YYYY-MM-DDTHH:mm:ss')\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { TimeRangeEnum } from './OrchestrationsState';\r\n\r\ntype HistogramColumn = { x0: number, x: number, y: number };\r\ntype TimeInterval = { timeFrom: moment.Moment, timeTill: moment.Moment, timeRange: TimeRangeEnum };\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsHistogramTabState implements IResultsTabState {\r\n\r\n    @computed\r\n    get zoomedIn() { return this._zoomedIn; }\r\n\r\n    @computed\r\n    get histograms() { return this._histograms; }\r\n\r\n    @computed\r\n    get numOfInstancesShown() { return this._numOfInstancesShown; }\r\n\r\n    get counts() { return this._counts; }\r\n\r\n    get timeRangeInMilliseconds(): number {\r\n        return this._timeRangeInMilliseconds;\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _filterState: TimeInterval & { reloadOrchestrations: () => void, cancel: () => void })\r\n    {\r\n    }\r\n\r\n    reset() {\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        if (!this._applyingZoom && !this._zoomedIn) {\r\n\r\n            this._originalTimeInterval = {\r\n                timeFrom: this._filterState.timeFrom,\r\n                timeTill: this._filterState.timeTill,\r\n                timeRange: this._filterState.timeRange\r\n            };\r\n        }\r\n\r\n        this._numOfInstancesShown = 0;\r\n        this._histograms = {};\r\n        this._counts = {};\r\n\r\n        const startTime = this._filterState.timeFrom.valueOf();\r\n        var bucketLength = Math.ceil((this._filterState.timeTill.valueOf() - startTime) / this._numOfIntervals);\r\n        if (bucketLength <= 0) {\r\n            bucketLength = 1;\r\n        }\r\n\r\n        // Need to remember this value, for later time axis rendering\r\n        this._timeRangeInMilliseconds = this._filterState.timeTill.valueOf() - this._filterState.timeFrom.valueOf();\r\n\r\n        return this.loadNextBatch(filterClause, startTime, bucketLength, 0, cancelToken);\r\n    }\r\n\r\n    applyZoom(left: Date, right: Date) {\r\n\r\n        this._numOfInstancesShown = 0;\r\n\r\n        this._filterState.cancel();\r\n        \r\n        // rounding to next second\r\n        const from = Math.floor(left.getTime() / 1000) * 1000;\r\n        const till = Math.ceil(right.getTime() / 1000) * 1000;\r\n\r\n        this._filterState.timeFrom = moment(from);\r\n        this._filterState.timeTill = moment(till);\r\n\r\n        this._applyingZoom = true;\r\n        try {\r\n            this._filterState.reloadOrchestrations();\r\n        } finally {\r\n            this._applyingZoom = false;\r\n        }\r\n\r\n        this._zoomedIn = true;\r\n    }\r\n\r\n    resetZoom() {\r\n\r\n        if (!this._zoomedIn || !this._originalTimeInterval) {\r\n            return;\r\n        }\r\n\r\n        this._zoomedIn = false;\r\n\r\n        this._filterState.cancel();\r\n\r\n        this._filterState.timeFrom = this._originalTimeInterval.timeFrom;\r\n        this._filterState.timeTill = this._originalTimeInterval.timeTill;\r\n        this._filterState.timeRange = this._originalTimeInterval.timeRange;\r\n    }\r\n\r\n    @observable\r\n    private _histograms: { [typeName: string]: HistogramColumn[]; } = {};\r\n\r\n    private _counts: { [typeName: string]: number; } = {};\r\n\r\n    @observable\r\n    private _numOfInstancesShown: number = 0;\r\n\r\n    @observable\r\n    private _zoomedIn = false;\r\n\r\n    private _originalTimeInterval: TimeInterval = null;\r\n    private _applyingZoom = false;\r\n    private _timeRangeInMilliseconds = 0;\r\n\r\n    private readonly _numOfIntervals = 200;\r\n    private readonly _pageSize = 1000;\r\n\r\n    private loadNextBatch(filterClause: string, startTime: number, bucketLength: number, pageNumber: number, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${this._numOfInstancesShown}${filterClause}`;\r\n\r\n        return this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            for (var instance of instances) {\r\n\r\n                const instanceTypeName = DurableOrchestrationStatus.getFunctionName(instance);\r\n\r\n                if (!this._histograms[instanceTypeName]) {\r\n                    \r\n                    const emptyHistogram = [];\r\n                    for (var i = 0; i < this._numOfIntervals; i++) {\r\n                        emptyHistogram[i] = { x0: startTime + i * bucketLength, x: startTime + (i + 1) * bucketLength, y: 0 };\r\n                    }\r\n                    this._histograms[instanceTypeName] = emptyHistogram;\r\n                }\r\n\r\n                const instanceStartPos = Math.floor((new Date(instance.createdTime).getTime() - startTime) / bucketLength);\r\n                if (instanceStartPos < 0 || instanceStartPos >= this._numOfIntervals) {\r\n                    continue;\r\n                }\r\n\r\n                this._histograms[instanceTypeName][instanceStartPos].y += 1;\r\n\r\n                if (!this._counts[instanceTypeName]) {\r\n                    this._counts[instanceTypeName] = 1;\r\n                } else {\r\n                    this._counts[instanceTypeName] += 1;\r\n                }\r\n            }\r\n\r\n            this._numOfInstancesShown += instances.length;\r\n\r\n            if (instances.length === this._pageSize) {\r\n                \r\n                return this.loadNextBatch(filterClause, startTime, bucketLength, pageNumber + 1, cancelToken);\r\n            }\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\nimport { FunctionsMap, ProxiesMap } from './az-func-as-a-graph/FunctionsMap';\r\n\r\nexport type TraversalResult = {\r\n    functions: FunctionsMap;\r\n    proxies: ProxiesMap;\r\n    iconsSvg: string;\r\n};\r\n\r\n// ID of an embedded SVG element containing Azure service icons. Should be present in index.html\r\nconst AllAzureIconsSvgElementId = \"all-azure-icons-svg\";\r\n\r\n// Base class for all Function Graph states\r\nexport class FunctionGraphStateBase extends MermaidDiagramStateBase {\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get diagramSvg(): string { return this._diagramSvg; };\r\n\r\n    @computed\r\n    get functionsLoaded(): boolean { return !!this._traversalResult; };\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(protected _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    gotoFunctionCode(functionName: string): void {\r\n\r\n        if (this.backendClient.isVsCode) {\r\n            \r\n            this.backendClient.call('GotoFunctionCode', functionName).then(() => { }, err => {\r\n                console.log(`Failed to goto function code: ${err.message}`);\r\n            });\r\n\r\n        } else {\r\n\r\n            var functionOrProxy = null;\r\n\r\n            if (functionName.startsWith('proxy.')) {\r\n                \r\n                functionOrProxy = this._traversalResult.proxies[functionName.substr(6)];\r\n\r\n            } else {\r\n\r\n                functionOrProxy = this._traversalResult.functions[functionName];\r\n            }\r\n\r\n            if (!!functionOrProxy && !!functionOrProxy.filePath) {\r\n                window.open(functionOrProxy.filePath);\r\n            }\r\n        }\r\n    }\r\n\r\n    saveAsJson(): void {\r\n\r\n        this.backendClient.call('SaveFunctionGraphAsJson', '').then(() => { }, err => {\r\n            console.log(`Failed to goto function code: ${err.message}`);\r\n        });\r\n    }\r\n\r\n    @observable\r\n    protected _renderFunctions: boolean = true;\r\n    @observable\r\n    protected _renderProxies: boolean = true;\r\n    @observable\r\n    protected _traversalResult: TraversalResult;\r\n\r\n    protected applyIcons(svg: string): string {\r\n\r\n        const iconsSvgElement = document.getElementById(AllAzureIconsSvgElementId);\r\n        if (!iconsSvgElement) {\r\n            return svg;\r\n        }\r\n\r\n        // Placing icons code into a <defs> block at the top\r\n        svg = svg.replace(`><style>`, `>\\n<defs>\\n${iconsSvgElement.innerHTML}</defs>\\n<style>`);\r\n\r\n        // Adding <use> blocks referencing relevant icons\r\n        svg = svg.replace(/<g class=\"node (\\w+).*?<g class=\"label\" transform=\"translate\\([0-9,.-]+\\)\"><g transform=\"translate\\([0-9,.-]+\\)\">/g,\r\n            `$&<use href=\"#az-icon-$1\" width=\"20px\" height=\"20px\"/>`);\r\n\r\n        return svg;\r\n    }\r\n}","import { FunctionsMap, ProxiesMap } from './FunctionsMap';\r\n\r\nconst space = '#32;';\r\n\r\nfunction getTriggerBindingText(binding: any): string {\r\n\r\n    switch (binding.type) {\r\n        case 'httpTrigger':\r\n            return `${binding.authLevel === 'anonymous' ? '#127760;' : '#128274;'} http${!binding.methods ? '' : ':[' + binding.methods.join(',') + ']'}${!binding.route ? '' : ':' + binding.route}`;\r\n        case 'blobTrigger':\r\n            return `${space}blob:${binding.path ?? ''}`;\r\n        case 'cosmosDBTrigger':\r\n            return `${space}cosmosDB:${binding.databaseName ?? ''}:${binding.collectionName ?? ''}`;\r\n        case 'eventHubTrigger':\r\n            return `${space}eventHub:${binding.eventHubName ?? ''}`;\r\n        case 'serviceBusTrigger':\r\n            return `${space}serviceBus:${!binding.queueName ? (binding.topicName ?? '') : binding.queueName}${!binding.subscriptionName ? '' : ':' + binding.subscriptionName}`;\r\n        case 'queueTrigger':\r\n            return `${space}queue:${binding.queueName ?? ''}`;\r\n        case 'timerTrigger':\r\n            return `${space}timer:${binding.schedule ?? ''}`;\r\n        default:\r\n            return `${space}${binding.type}`;\r\n    }\r\n}\r\n\r\nfunction getBindingText(binding: any): string {\r\n\r\n    switch (binding.type) {\r\n        case 'table':\r\n            return `${space}table:${binding.tableName ?? ''}`;\r\n        case 'blob':\r\n            return `${space}blob:${binding.path ?? ''}`;\r\n        case 'cosmosDB':\r\n            return `${space}cosmosDB:${binding.databaseName ?? ''}:${binding.collectionName ?? ''}`;\r\n        case 'eventHub':\r\n            return `${space}eventHub:${binding.eventHubName ?? ''}`;\r\n        case 'serviceBus':\r\n            return `${space}serviceBus:${!binding.queueName ? (binding.topicName ?? '') : binding.queueName}${!binding.subscriptionName ? '' : ':' + binding.subscriptionName}`;\r\n        case 'queue':\r\n            return `${space}queue:${binding.queueName ?? ''}`;\r\n        default:\r\n            return `${space}${binding.type}`;\r\n    }\r\n}\r\n\r\nexport type GraphSettings = {\r\n    doNotRenderFunctions?: boolean,\r\n    doNotRenderProxies?: boolean,\r\n};\r\n\r\n// Translates functions and their bindings into a Mermaid Flowchart diagram code\r\nexport function buildFunctionDiagramCode(functionsMap: FunctionsMap, proxiesMap: ProxiesMap, settings: GraphSettings = {}): string {\r\n\r\n    var code = '';\r\n\r\n    if (!settings.doNotRenderFunctions) {\r\n        \r\n        const functions = [];\r\n\r\n        // Determine what kind of function this one is\r\n        for (const name in functionsMap) {\r\n            const func = functionsMap[name];\r\n    \r\n            var triggerBinding = undefined, inputBindings = [], outputBindings = [], otherBindings = [];\r\n            var nodeCode = `${name}{{\"${space}${name}\"}}:::function`;\r\n    \r\n            for (const binding of func.bindings) {\r\n    \r\n                if (binding.type === 'orchestrationTrigger') {\r\n                    nodeCode = `${name}[[\"${space}${name}\"]]:::orchestrator`;\r\n                } else if (binding.type === 'activityTrigger') {\r\n                    nodeCode = `${name}[/\"${space}${name}\"/]:::activity`;\r\n                } else if (binding.type === 'entityTrigger') {\r\n                    nodeCode = `${name}[(\"${space}${name}\")]:::entity`;\r\n                }\r\n    \r\n                if (binding.type.endsWith('Trigger')) {\r\n                    triggerBinding = binding;\r\n                } else if (binding.direction === 'in') {\r\n                    inputBindings.push(binding);\r\n                } else if (binding.direction === 'out') {\r\n                    outputBindings.push(binding);\r\n                } else {\r\n                    otherBindings.push(binding);\r\n                }\r\n            }\r\n    \r\n            functions.push({ name, nodeCode, triggerBinding, inputBindings, outputBindings, otherBindings, ...func });\r\n        }\r\n    \r\n        // Sorting by trigger type, then by name. Moving the ones that are being called to the bottom.\r\n        const getFunctionHash = (f) => {\r\n    \r\n            var hash = (!!f.isCalledBy?.length || !f.triggerBinding || !f.triggerBinding.type) ? '' : f.triggerBinding.type;\r\n            hash += '~' + f.name;\r\n            return hash;\r\n        }\r\n        functions.sort((f1, f2) => {\r\n            \r\n            var s1 = getFunctionHash(f1);\r\n            var s2 = getFunctionHash(f2);\r\n    \r\n            return (s1 > s2) ? 1 : ((s2 > s1) ? -1 : 0);\r\n        });\r\n    \r\n        // Rendering\r\n        for (const func of functions) {\r\n    \r\n            code += `${func.nodeCode}\\n`;\r\n            // Making Functions nodes a bit darker\r\n            code += `style ${func.name} fill:#D9D9FF,stroke-width:2px\\n`;\r\n    \r\n            if (!!func.isCalledBy?.length) {\r\n    \r\n                for (const calledBy of func.isCalledBy) {\r\n                    code += `${calledBy} ---> ${func.name}\\n`;\r\n                }\r\n    \r\n            } else if (!!func.triggerBinding) {\r\n    \r\n                code += `${func.name}.${func.triggerBinding.type}>\"${getTriggerBindingText(func.triggerBinding)}\"]:::${func.triggerBinding.type} --> ${func.name}\\n`;\r\n            }\r\n    \r\n            for (var i = 0; i < func.inputBindings.length; i++) {\r\n                const inputBinding = func.inputBindings[i];\r\n                code += `${func.name}.${i}.${inputBinding.type}([\"${getBindingText(inputBinding)}\"]):::${inputBinding.type} -.-> ${func.name}\\n`;\r\n            }\r\n    \r\n            for (var i = 0; i < func.outputBindings.length; i++) {\r\n                const outputBinding = func.outputBindings[i];\r\n                code += `${func.name} -.-> ${func.name}.${i}.${outputBinding.type}([\"${getBindingText(outputBinding)}\"]):::${outputBinding.type}\\n`;\r\n            }\r\n    \r\n            for (var i = 0; i < func.otherBindings.length; i++) {\r\n                const otherBinding = func.otherBindings[i];\r\n                code += `${func.name} -.- ${func.name}.${i}.${otherBinding.type}([\"${getBindingText(otherBinding)}\"]):::${otherBinding.type}\\n`;\r\n            }\r\n    \r\n            if (!!func.isSignalledBy?.length) {\r\n    \r\n                for (const signalledBy of func.isSignalledBy) {\r\n                    code += `${signalledBy.name} -- \"#9889; ${signalledBy.signalName}\" ---> ${func.name}\\n`;\r\n                }\r\n            }\r\n    \r\n            if (!!func.isCalledByItself) {\r\n    \r\n                code += `${func.name} -- \"[ContinueAsNew]\" --> ${func.name}\\n`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Also proxies\r\n    if (!settings.doNotRenderProxies && (Object.keys(proxiesMap).length > 0)) {\r\n        \r\n        const proxyNodesColor = '#FFE6C8';\r\n\r\n        var nodeTitle = ``;\r\n        var notAddedToCsProjFile = false;\r\n\r\n        for (const name in proxiesMap) {\r\n            const proxy = proxiesMap[name];\r\n            const proxyPurifiedName = name.replace(/ /g, '');\r\n\r\n            notAddedToCsProjFile = proxy.warningNotAddedToCsProjFile;\r\n\r\n            nodeTitle = '';\r\n            if (!!proxy.matchCondition) {\r\n                \r\n                if (!!proxy.matchCondition.methods && !!proxy.matchCondition.methods.length) {\r\n                    nodeTitle += (!!nodeTitle ? ':' : '') + `[${proxy.matchCondition.methods.join(',')}]`;\r\n                }\r\n\r\n                if (!!proxy.matchCondition.route) {\r\n                    nodeTitle += (!!nodeTitle ? ':' : '') + proxy.matchCondition.route;\r\n                }\r\n            }\r\n            if (!nodeTitle) {\r\n                nodeTitle = name;\r\n            }\r\n\r\n            var nodeName = `proxy.${proxyPurifiedName}`;\r\n\r\n            code += `proxies.json -. \"${name}\" .-> ${nodeName}([\"${space}${nodeTitle}\"]):::proxy\\n`;\r\n            code += `style ${nodeName} fill:${proxyNodesColor}\\n`;\r\n\r\n            if (!!proxy.backendUri) {\r\n\r\n                nodeTitle = proxy.backendUri.replace(/'response./g, `'`);\r\n\r\n                const nextNodeName = `proxy.${proxyPurifiedName}.backendUri`;\r\n\r\n                code += `${nodeName} ${getRequestOverridesArrowCode(proxy.requestOverrides)} ${nextNodeName}[\"${space}${nodeTitle}\"]:::http\\n`;\r\n                code += `style ${nextNodeName} fill:${proxyNodesColor}\\n`;\r\n\r\n                nodeName = nextNodeName;\r\n            }\r\n\r\n            const nextNodeName = `proxy.${proxyPurifiedName}.response`;\r\n\r\n            code += `${nodeName} ${getResponseOverridesArrowCode(proxy.responseOverrides)} ${nextNodeName}([\"${space}.\"]):::http\\n`;\r\n            code += `style ${nextNodeName} fill:${proxyNodesColor}\\n`;\r\n        }\r\n\r\n        nodeTitle = `proxies.json`;\r\n        var nodeColor = proxyNodesColor;\r\n        if (notAddedToCsProjFile) {\r\n            nodeTitle += ` #9888; Not added to .CSPROJ file!`;\r\n            nodeColor = `#FF8080`;\r\n        }\r\n\r\n        code += `proxies.json[\"${space}${nodeTitle}\"]\\n`;\r\n        code += `style proxies.json fill:${nodeColor}\\n`;\r\n    }\r\n\r\n    return code;\r\n}\r\n\r\nconst maxSymbolsInTitle = 150;\r\n\r\nfunction getRequestOverridesArrowCode(requestOverrides: any): string {\r\n\r\n    if (!requestOverrides) {\r\n        return `-->`\r\n    }\r\n\r\n    var arrowText = JSON.stringify(requestOverrides)\r\n        .replace(/\"/g, `'`)\r\n        .replace(/'backend.request./g, `'`);\r\n    \r\n    if (arrowText.length > maxSymbolsInTitle) {\r\n        arrowText = arrowText.substr(0, maxSymbolsInTitle) + '...';\r\n    }\r\n\r\n    return `-- \"${arrowText}${space}\" -->`;\r\n}\r\n\r\nfunction getResponseOverridesArrowCode(responseOverrides: any): string {\r\n\r\n    if (!responseOverrides) {\r\n        return `-->`\r\n    }\r\n\r\n    if (!!responseOverrides['response.body']) {\r\n        responseOverrides['response.body'] = '...';\r\n    }\r\n\r\n    var arrowText = JSON.stringify(responseOverrides)\r\n        .replace(/\"/g, `'`)\r\n        .replace(/'response./g, `'`);\r\n    \r\n    if (arrowText.length > maxSymbolsInTitle) {\r\n        arrowText = arrowText.substr(0, maxSymbolsInTitle) + '...';\r\n    }\r\n\r\n    return `-- \"${arrowText}${space}\" -->`;\r\n}","import { computed, observable } from 'mobx'\r\nimport mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { FunctionGraphStateBase } from '../FunctionGraphStateBase';\r\nimport { buildFunctionDiagramCode } from '../az-func-as-a-graph/buildFunctionDiagramCode';\r\n\r\nexport class MetricsItem {\r\n    completed: number = 0;\r\n    running: number = 0;\r\n    failed: number = 0;\r\n    other: number = 0;\r\n    duration: number = 0;\r\n}\r\n\r\nexport type MetricsMap = { [funcName: string]: MetricsItem };\r\n\r\n// Resulting list of orchestrations represented on a Functions Graph\r\nexport class ResultsFunctionGraphTabState extends FunctionGraphStateBase implements IResultsTabState {\r\n\r\n    @computed\r\n    get metrics(): MetricsMap { return this._metrics; }\r\n\r\n    @computed\r\n    get diagramSvg(): string { return this._diagramSvg; }\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; }\r\n\r\n    @computed\r\n    get renderFunctions(): boolean { return this._renderFunctions; };\r\n    set renderFunctions(val: boolean) {\r\n        this._renderFunctions = val;\r\n        this.render();\r\n    };\r\n\r\n    @computed\r\n    get renderProxies(): boolean { return this._renderProxies; };\r\n    set renderProxies(val: boolean) {\r\n        this._renderProxies = val;\r\n        this.render();\r\n    };\r\n\r\n    readonly TotalMetricsName = 'DurableFunctionsMonitor-ResultsFunctionGraphTabState-TotalNumbers';\r\n\r\n    reset() {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n        this._traversalResult = null;\r\n        this._metrics = {};\r\n        this._numOfInstancesShown = 0;\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        this.initMermaidWhenNeeded();\r\n\r\n        this._numOfInstancesShown = 0;\r\n\r\n        const clonedMetrics = !isAutoRefresh ? JSON.parse(JSON.stringify(this._metrics)) : {};\r\n\r\n        return this._backendClient.call('GET', '/function-map').then(response => {\r\n            \r\n            this._traversalResult = response;\r\n        \r\n            return this.render().then(() => {\r\n\r\n                return this.loadNextBatch(filterClause, 0, clonedMetrics, isAutoRefresh, cancelToken).then(metrics => {\r\n\r\n                    // In autorefresh mode updating this observable property at the end, otherwise updating it on-the-fly\r\n                    this._metrics = metrics;\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _metrics: MetricsMap = {};\r\n\r\n    private _numOfInstancesShown: number = 0;\r\n    private readonly _pageSize = 1000;\r\n\r\n    private loadNextBatch(filterClause: string, pageNumber: number, metrics: MetricsMap, isAutoRefresh: boolean, cancelToken: CancelToken): Promise<MetricsMap> {\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${this._numOfInstancesShown}${filterClause}`;\r\n\r\n        return this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return Promise.resolve(metrics);\r\n            }\r\n\r\n            // updating metrics\r\n            \r\n            if (!metrics[this.TotalMetricsName]) {\r\n                metrics[this.TotalMetricsName] = new MetricsItem();\r\n            }\r\n\r\n            for (var instance of instances) {\r\n\r\n                const funcName = DurableOrchestrationStatus.getFunctionName(instance);\r\n\r\n                if (!metrics[funcName]) {\r\n                    metrics[funcName] = new MetricsItem();\r\n                }\r\n\r\n                switch (instance.runtimeStatus) {\r\n                    case 'Completed':\r\n                        metrics[funcName].completed++;\r\n                        metrics[this.TotalMetricsName].completed++;\r\n                        break;\r\n                    case 'Running':\r\n                    case 'Pending':\r\n                    case 'ContinuedAsNew':\r\n                        metrics[funcName].running++;\r\n                        metrics[this.TotalMetricsName].running++;\r\n                        break;\r\n                    case 'Failed':\r\n                        metrics[funcName].failed++;\r\n                        metrics[this.TotalMetricsName].failed++;\r\n                        break;\r\n                    default:\r\n                        metrics[funcName].other++;\r\n                        metrics[this.TotalMetricsName].other++;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            this._numOfInstancesShown += instances.length;\r\n\r\n            // Making metrics look alive, when not in autorefresh mode\r\n            if (!isAutoRefresh) {\r\n                this._metrics = metrics;\r\n            }\r\n\r\n            if (instances.length === this._pageSize) {\r\n                return this.loadNextBatch(filterClause, pageNumber + 1, metrics, isAutoRefresh, cancelToken);\r\n            }\r\n\r\n            return metrics;\r\n        });\r\n    }\r\n\r\n    private render(): Promise<void> {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            try {\r\n                const diagramCode = buildFunctionDiagramCode(this._traversalResult.functions, this._traversalResult.proxies,\r\n                    {\r\n                        doNotRenderFunctions: !this._renderFunctions,\r\n                        doNotRenderProxies: !this._renderProxies\r\n                    });\r\n    \r\n                if (!diagramCode) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n    \r\n                this._diagramCode = `graph LR\\n${diagramCode}`;\r\n    \r\n                mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n    \r\n                    this._diagramSvg = this.applyIcons(svg);\r\n\r\n                    resolve();\r\n                });\r\n    \r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../../DateTimeHelpers';\r\nimport { ErrorMessageState } from '../ErrorMessageState';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { ITypedLocalStorage } from '../ITypedLocalStorage';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { IResultsTabState, ResultsListTabState } from './ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from './ResultsGanttDiagramTabState';\r\nimport { ResultsHistogramTabState } from './ResultsHistogramTabState';\r\nimport { ResultsFunctionGraphTabState } from './ResultsFunctionGraphTabState';\r\nimport { RuntimeStatus } from '../DurableOrchestrationStatus';\r\nimport { QueryString } from '../QueryString';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains,\r\n    NotEquals,\r\n    NotStartsWith,\r\n    NotContains\r\n}\r\n\r\nexport enum ResultsTabEnum {\r\n    List = 0,\r\n    Histogram,\r\n    Gantt,\r\n    FunctionGraph\r\n}\r\n\r\nexport enum TimeRangeEnum {\r\n    Custom = 0,\r\n    LastMinute,\r\n    Last10Minutes,\r\n    LastHour,\r\n    Last24Hours,\r\n    Last7Days,\r\n    Last30Days,\r\n    Last90Days\r\n}\r\n\r\nexport type RuntimeStatusOrDurableEntities = RuntimeStatus | 'DurableEntities';\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get tabIndex(): ResultsTabEnum { return this._tabIndex; }\r\n    set tabIndex(val: ResultsTabEnum) {\r\n\r\n        if (this._tabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._tabIndex = val;\r\n        this._localStorage.setItem('tabIndex', val.toString());\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    get selectedTabState(): IResultsTabState {\r\n        return this._tabStates[this._tabIndex];\r\n    }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment {\r\n\r\n        switch (this._timeRange) {\r\n            case TimeRangeEnum.LastMinute:\r\n                return moment().subtract(1, 'minutes');\r\n            case TimeRangeEnum.Last10Minutes:\r\n                return moment().subtract(10, 'minutes');\r\n            case TimeRangeEnum.LastHour:\r\n                return moment().subtract(1, 'hours');\r\n            case TimeRangeEnum.Last24Hours:\r\n                return moment().subtract(1, 'days');\r\n            case TimeRangeEnum.Last7Days:\r\n                return moment().subtract(7, 'days');\r\n            case TimeRangeEnum.Last30Days:\r\n                return moment().subtract(30, 'days');\r\n            case TimeRangeEnum.Last90Days:\r\n                return moment().subtract(90, 'days');\r\n            default:\r\n                return this._timeFrom;\r\n        }\r\n    }\r\n    set timeFrom(val: moment.Moment) {\r\n\r\n        this._timeFrom = val;\r\n        this._timeRange = TimeRangeEnum.Custom;\r\n        this.listState.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment {\r\n        return (!!this._timeRange || !this._timeTill) ? moment() : this._timeTill;\r\n    }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this._timeRange = TimeRangeEnum.Custom;\r\n        this.listState.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment() : null;\r\n\r\n        if (!val) {\r\n            this.listState.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get timeRange(): TimeRangeEnum { return this._timeRange; }\r\n    set timeRange(val: TimeRangeEnum) {\r\n\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._timeRange = val;\r\n\r\n        this.listState.resetOrderBy();\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showStatuses(): RuntimeStatusOrDurableEntities[] { return this._showStatuses; }\r\n    \r\n    isStatusChecked(status?: RuntimeStatusOrDurableEntities): boolean {\r\n\r\n        if (!status) {\r\n            return !this._showStatuses;\r\n        }\r\n\r\n        if (!this._showStatuses) {\r\n            return true;\r\n        }\r\n\r\n        return !!this._showStatuses.includes(status);\r\n    }\r\n\r\n    setStatusChecked(checked: boolean, status?: RuntimeStatusOrDurableEntities): void {\r\n\r\n        if (checked) {\r\n\r\n            if (!status) {\r\n                this._showStatuses = null;\r\n            } else {\r\n                if (!this._showStatuses) {\r\n                    this._showStatuses = [];\r\n                }\r\n                this._showStatuses.push(status);\r\n            }\r\n            \r\n        } else {\r\n\r\n            if (!status) {\r\n                this._showStatuses = [];\r\n            } else {\r\n                if (!this._showStatuses) {\r\n                    this._showStatuses = [];\r\n                }\r\n\r\n                const i = this._showStatuses.indexOf(status);\r\n                if (i >= 0) {\r\n                    this._showStatuses.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n        }\r\n        this._refreshToken = setTimeout(() => this.reloadOrchestrations(), this._delayedRefreshDelay);\r\n    }\r\n\r\n    rescheduleDelayedRefresh() {\r\n        \r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = setTimeout(() => this.reloadOrchestrations(), this._delayedRefreshDelay);\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    get isFunctionGraphAvailable(): boolean { return this._isFunctionGraphAvailable; }\r\n\r\n    constructor(private _isFunctionGraphAvailable: boolean, private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState & ResultsListTabState>) {\r\n        super();\r\n        \r\n        this._tabStates = [\r\n            new ResultsListTabState(this._backendClient, this._localStorage, () => this.reloadOrchestrations()),\r\n            new ResultsHistogramTabState(this._backendClient, this),\r\n            new ResultsGanttDiagramTabState(this._backendClient)\r\n        ];\r\n\r\n        if (!!this._isFunctionGraphAvailable) {\r\n            this._tabStates.push(new ResultsFunctionGraphTabState(this._backendClient));\r\n        }\r\n\r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const timeRangeString = this._localStorage.getItem('timeRange');\r\n        if (!!timeRangeString) {\r\n\r\n            // timeRange and [timeFrom,timeTill] are mutually exclusive.\r\n            // So when the latter comes from query string, we should not pay attention to the former.\r\n            const queryString = new QueryString();\r\n            if (!queryString.values['timeFrom'] && !queryString.values['timeTill']) {   \r\n                this._timeRange = TimeRangeEnum[timeRangeString];\r\n            }\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showStatusesString = this._localStorage.getItem('showStatuses');\r\n        if (!!showStatusesString) {\r\n            this._showStatuses = JSON.parse(showStatusesString);\r\n        }\r\n        \r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const tabIndexString = this._localStorage.getItem('tabIndex');\r\n        if (!!tabIndexString) {\r\n            const tabIndex = Number(tabIndexString);\r\n            if (tabIndex >= 0 && tabIndex < this._tabStates.length) {\r\n                this._tabIndex = tabIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n\r\n        // Canceling delayed refresh, if any\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = null;\r\n        }\r\n\r\n        for (const resultState of this._tabStates) {\r\n            resultState.reset();\r\n        }\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: !this._timeRange ? this._timeFrom.toISOString(): null },\r\n            { fieldName: 'timeTill', value: (!!this._timeTill && !this._timeRange) ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'timeRange', value: !!this._timeRange ? TimeRangeEnum[this._timeRange] : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showStatuses', value: !!this._showStatuses ? JSON.stringify(this._showStatuses) : null },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        const cancelToken = this._cancelToken;\r\n        if (!!cancelToken.inProgress) {\r\n            return;            \r\n        }\r\n        cancelToken.inProgress = true;\r\n        \r\n        var filterClause = `&$filter=createdTime ge '${this.timeFrom.toISOString()}' and createdTime le '${this.timeTill.toISOString()}'`;\r\n        \r\n        if (!!this._showStatuses) {\r\n\r\n            filterClause += ` and runtimeStatus in (${this._showStatuses.map(s => `'${s}'`).join(',')})`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            const encodedFilterValue = encodeURIComponent(this._filterValue);\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${encodedFilterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${encodedFilterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${encodedFilterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.NotEquals:\r\n                    filterClause += `${this._filteredColumn} ne '${encodedFilterValue}'`;\r\n                    break;\r\n                case FilterOperatorEnum.NotStartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${encodedFilterValue}') eq false`;\r\n                    break;\r\n                case FilterOperatorEnum.NotContains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${encodedFilterValue}') eq false`;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.selectedTabState.load(filterClause, cancelToken, isAutoRefresh).then(() => {\r\n\r\n            if (!!this._refreshToken) {\r\n                clearTimeout(this._refreshToken);\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                this._refreshToken = setTimeout(() => {\r\n\r\n                    this.loadOrchestrations(true);\r\n\r\n                }, this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n                \r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _tabIndex: ResultsTabEnum = ResultsTabEnum.List;\r\n\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n    @observable\r\n    private _timeRange: TimeRangeEnum = TimeRangeEnum.Custom;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    @observable\r\n    private _showStatuses: RuntimeStatusOrDurableEntities[] = null;\r\n\r\n    private readonly _tabStates: IResultsTabState[];\r\n\r\n    private get listState(): ResultsListTabState { return this._tabStates[0] as ResultsListTabState; }\r\n\r\n    private _refreshToken: NodeJS.Timeout;\r\n    private readonly _delayedRefreshDelay = 2500;\r\n\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n}","\r\n// Helper class for dealing with browser's query string\r\nexport class QueryString {\r\n\r\n    constructor() {\r\n\r\n        const pairs = window.location.search.substr(1).split('&');\r\n        for (var pairString of pairs) {\r\n            const pair = pairString.split('=');\r\n            if (pair.length > 1) {\r\n                this._values[pair[0]] = decodeURIComponent(pair[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    get values(): { [key: string]: string } { return this._values; }\r\n\r\n    apply(): void {\r\n\r\n        var queryString = '';\r\n\r\n        for (var key in this._values) {\r\n            if (!!queryString) {\r\n                queryString += '&';\r\n            }\r\n            queryString += key + '=' + encodeURIComponent(this._values[key]);\r\n        }\r\n\r\n        window.history.replaceState(null, null, !queryString ? '' : '?' + queryString);\r\n    }\r\n\r\n    private _values: { [key: string]: string } = {};\r\n}","import { createMuiTheme } from '@material-ui/core';\r\n\r\nimport { RuntimeStatus } from './states/DurableOrchestrationStatus';\r\nimport { dfmContextInstance } from './DfmContext';\r\n\r\nconst colorTheme = !process.env.REACT_APP_COLOR_THEME ? dfmContextInstance.theme : process.env.REACT_APP_COLOR_THEME;\r\n\r\nexport const Theme = createMuiTheme({\r\n    palette: { type: colorTheme === 'dark' ? 'dark' : 'light' }\r\n});\r\n\r\nexport const CustomTabStyle = Theme.palette.type === \"dark\" ? {\r\n    backgroundColor: '#aaa'\r\n} : {};\r\n\r\nexport function RuntimeStatusToStyle(status: RuntimeStatus): {} {\r\n\r\n    var backgroundColor: string = null;\r\n\r\n    switch (status) {\r\n        case 'Failed':\r\n            backgroundColor = hexToRGBA(Theme.palette.error.light, 0.2);\r\n            break;\r\n        case 'Completed':\r\n            backgroundColor = hexToRGBA(Theme.palette.success.light, 0.2);\r\n            break;\r\n        case 'Running':\r\n            backgroundColor = hexToRGBA(Theme.palette.warning.light, 0.2);\r\n            break;\r\n        case 'Terminated':\r\n            backgroundColor = hexToRGBA(Theme.palette.background.paper, 0.1);\r\n            break;\r\n    }\r\n\r\n    return !!backgroundColor ? { backgroundColor } : {};\r\n}\r\n\r\nexport function hexToRGBA(hex: string, alpha: number): string {\r\n\r\n    if (hex.length > 4) {\r\n        return `rgba(${parseInt(hex.slice(1, 3), 16)}, ${parseInt(hex.slice(3, 5), 16)}, ${parseInt(hex.slice(5, 7), 16)}, ${alpha.toFixed(1)})`;\r\n    } else {\r\n        return `rgba(${parseInt(hex.slice(1, 2), 16)}, ${parseInt(hex.slice(2, 3), 16)}, ${parseInt(hex.slice(3, 4), 16)}, ${alpha.toFixed(1)})`;\r\n    }\r\n}\r\n\r\nexport function RuntimeStatusToBadgeStyle(status: RuntimeStatus | 'Duration'): {} {\r\n\r\n    var backgroundColor: string = null;\r\n\r\n    if (Theme.palette.type === 'dark') {\r\n        \r\n        switch (status) {\r\n            case 'Failed':\r\n                backgroundColor = 'rgb(103,73,76)';\r\n                break;\r\n            case 'Completed':\r\n                backgroundColor = 'rgb(74,98,80)';\r\n                break;\r\n            case 'Running':\r\n                backgroundColor = 'rgb(105,93,68)';\r\n                break;\r\n            case 'Terminated':\r\n                backgroundColor = 'rgb(66,66,66)';\r\n                break;\r\n            case 'Duration':\r\n                backgroundColor = 'rgb(50,50,50)';\r\n                break;\r\n        }\r\n    } else {\r\n\r\n        switch (status) {\r\n            case 'Failed':\r\n                backgroundColor = 'rgb(250,227,227)';\r\n                break;\r\n            case 'Completed':\r\n                backgroundColor = 'rgb(230,244,230)';\r\n                break;\r\n            case 'Running':\r\n                backgroundColor = 'rgb(255,241,219)';\r\n                break;\r\n            case 'Terminated':\r\n                backgroundColor = 'rgb(231,231,231)';\r\n                break;\r\n            case 'Duration':\r\n                backgroundColor = 'rgb(255,255,255)';\r\n                break;\r\n        }\r\n    }\r\n\r\n    return !!backgroundColor ? { backgroundColor } : {};\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationsPathPrefix } from '../states/LoginState';\r\nimport { Theme } from '../theme';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, title?: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} className=\"link-with-pointer-cursor\" onClick={this.onLinkClicked} >\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href={`${this.props.backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Button, Dialog, DialogActions, DialogContent, DialogTitle, InputBase, Link\r\n} from '@material-ui/core';\r\n\r\nconst MaxJsonLengthToShow = 512;\r\nconst MaxJsonLengthToShowAsLink = 20;\r\n\r\nexport type LongJsonDialogState = { title?: string, jsonString?: string };\r\n\r\n// Dialog to display long JSON strings\r\n@observer\r\nexport class LongJsonDialog extends React.Component<{ state: LongJsonDialogState }> {\r\n    \r\n    public static renderJson(jsonObject: any, dialogTitle: string, dialogState: LongJsonDialogState): JSX.Element {\r\n\r\n        if (!jsonObject) {\r\n            return null;\r\n        }\r\n\r\n        // Converting from a string inside a string\r\n        if (typeof jsonObject === 'string') {\r\n            try {\r\n                jsonObject = JSON.parse(jsonObject);\r\n            } catch {}\r\n        }\r\n\r\n        const jsonString = (typeof jsonObject === 'string' ? jsonObject : JSON.stringify(jsonObject));\r\n \r\n        if (jsonString.length <= MaxJsonLengthToShow) {\r\n\r\n            return (<InputBase\r\n                className=\"long-text-cell-input\"\r\n                multiline fullWidth rowsMax={5} readOnly\r\n                value={jsonString}\r\n            />);\r\n        }\r\n\r\n        const jsonFormattedString = (typeof jsonObject === 'string' ? jsonObject : JSON.stringify(jsonObject, null, 3));\r\n\r\n        return (<Link\r\n            component=\"button\"\r\n            variant=\"inherit\"\r\n            onClick={() => {\r\n                dialogState.title = dialogTitle;\r\n                dialogState.jsonString = jsonFormattedString;\r\n            }}\r\n        >\r\n            {jsonString.substr(0, MaxJsonLengthToShowAsLink)}...\r\n        </Link>)\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog fullWidth={true} maxWidth=\"md\" open={!!state.jsonString} onClose={() => state.jsonString = ''}>\r\n\r\n                <DialogTitle>{state.title}</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <InputBase\r\n                        multiline fullWidth readOnly\r\n                        value={state.jsonString}\r\n                    />                    \r\n                </DialogContent>\r\n                \r\n                <DialogActions>\r\n                    <Button onClick={() => state.jsonString = ''} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n       );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, IconButton, Link, Paper, Table, TableBody, TableCell, TableHead, TableRow,\r\n    TableSortLabel, Typography\r\n} from '@material-ui/core';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { DurableOrchestrationStatusFields } from '../../states/DurableOrchestrationStatus';\r\nimport { OrchestrationLink } from '../OrchestrationLink';\r\nimport { ResultsListTabState } from '../../states/results-view/ResultsListTabState';\r\nimport { DfmContextType } from '../../DfmContext';\r\nimport { RuntimeStatusToStyle } from '../../theme';\r\nimport { DateTimeHelpers } from '../../DateTimeHelpers';\r\nimport { LongJsonDialog } from '.././LongJsonDialog';\r\n\r\n// Orchestrations list view\r\n@observer\r\nexport class OrchestrationsList extends React.Component<{ state: ResultsListTabState, showLastEventColumn: boolean, backendClient: IBackendClient }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            <FormHelperText className=\"items-count-label\">\r\n                {!!state.orchestrations.length && (<>\r\n                    \r\n                    {`${state.orchestrations.length} items shown`}\r\n\r\n                    {!!state.hiddenColumns.length && (<>\r\n\r\n                        {`, ${state.hiddenColumns.length} columns hidden `}\r\n\r\n                        (<Link className=\"unhide-button\"\r\n                            component=\"button\"\r\n                            variant=\"inherit\"\r\n                            onClick={() => state.unhide()}\r\n                        >\r\n                            unhide\r\n                        </Link>)\r\n\r\n                    </>)}\r\n\r\n                </>)}\r\n            </FormHelperText>\r\n\r\n            <Paper elevation={0}>\r\n                {this.renderTable(state)}\r\n            </Paper>\r\n\r\n            <LongJsonDialog state={state.longJsonDialogState} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderTable(state: ResultsListTabState): JSX.Element {\r\n\r\n        if (!state.orchestrations.length) {\r\n            return (\r\n                <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                    This list is empty\r\n                </Typography>\r\n            );\r\n        }\r\n\r\n        const visibleColumns = DurableOrchestrationStatusFields\r\n            // hiding artificial 'lastEvent' column, when not used\r\n            .filter(f => this.props.showLastEventColumn ? true : f !== 'lastEvent');\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {visibleColumns.map(col => {\r\n\r\n                            const onlyOneVisibleColumnLeft = visibleColumns.length <= state.hiddenColumns.length + 1;\r\n\r\n                            return !state.hiddenColumns.includes(col) && (\r\n                                <TableCell key={col}\r\n                                    onMouseEnter={() => state.columnUnderMouse = col}\r\n                                    onMouseLeave={() => state.columnUnderMouse = ''}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={state.orderBy === col}\r\n                                        direction={state.orderByDirection}\r\n                                        onClick={() => state.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n                                    </TableSortLabel>\r\n\r\n                                    {state.columnUnderMouse === col && !onlyOneVisibleColumnLeft && (\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size=\"small\"\r\n                                            className=\"column-hide-button\"\r\n                                            onClick={() => state.hideColumn(col)}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                    )}\r\n\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const rowStyle = RuntimeStatusToStyle(orchestration.runtimeStatus);\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                style={rowStyle}\r\n                            >\r\n                                {!state.hiddenColumns.includes('instanceId') && (\r\n                                    <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                        <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={this.props.backendClient} />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('name') && (\r\n                                    <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                        {orchestration.name}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('createdTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {this.context.formatDateTimeString(orchestration.createdTime)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('lastUpdatedTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {this.context.formatDateTimeString(orchestration.lastUpdatedTime)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('duration') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {DateTimeHelpers.formatDuration(orchestration.duration)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('runtimeStatus') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.runtimeStatus}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('lastEvent') && this.props.showLastEventColumn && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.lastEvent}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('input') && (\r\n                                    <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                        {LongJsonDialog.renderJson(orchestration.input, `${orchestration.instanceId} / input`, state.longJsonDialogState)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('output') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        {LongJsonDialog.renderJson(orchestration.output, `${orchestration.instanceId} / output`, state.longJsonDialogState)}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('customStatus') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        {LongJsonDialog.renderJson(orchestration.customStatus, `${orchestration.instanceId} / customStatus`, state.longJsonDialogState)}\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport moment from 'moment';\r\n\r\nimport { FormHelperText, Link } from '@material-ui/core';\r\n\r\nimport { XYPlot, XAxis, YAxis, DiscreteColorLegend, VerticalRectSeries, Highlight } from 'react-vis';\r\n\r\nimport { ResultsHistogramTabState } from '../../states/results-view/ResultsHistogramTabState';\r\nimport { DfmContextType } from '../../DfmContext';\r\n\r\n// Orchestrations histogram view\r\n@observer\r\nexport class OrchestrationsHistogram extends React.Component<{ state: ResultsHistogramTabState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n        const typeNames = Object.keys(state.histograms).sort();\r\n\r\n        return (<>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {`${state.numOfInstancesShown} items shown`}\r\n\r\n                {state.zoomedIn && (<>\r\n\r\n                    {', '}\r\n                    <Link className=\"unhide-button\"\r\n                        component=\"button\"\r\n                        variant=\"inherit\"\r\n                        onClick={() => state.resetZoom()}\r\n                    >\r\n                        reset zoom (Ctrl+Z)\r\n                        </Link>\r\n                </>)}\r\n\r\n            </FormHelperText>\r\n\r\n            <XYPlot\r\n                width={window.innerWidth - 40} height={window.innerHeight - 400}\r\n                xType=\"time\"\r\n                stackBy=\"y\"\r\n                margin={{ left: 80, right: 10, top: 20 }}\r\n            >\r\n                {!!state.numOfInstancesShown && (\r\n                    <YAxis tickTotal={7} />\r\n                )}\r\n                <XAxis tickTotal={7} tickFormat={t => this.formatTimeTick(t, state.timeRangeInMilliseconds)} />\r\n\r\n                {typeNames.map(typeName => (<VerticalRectSeries\r\n                    key={typeName}\r\n                    stroke=\"white\"\r\n                    color={this.getColorCodeForInstanceType(typeName)}\r\n                    data={state.histograms[typeName]}\r\n                />))}\r\n\r\n                {!!state.numOfInstancesShown && (\r\n\r\n                    <Highlight\r\n                        color=\"#829AE3\"\r\n                        drag\r\n                        enableY={false}\r\n\r\n                        onDragEnd={(area) => {\r\n                            if (!!area) {\r\n                                state.applyZoom(area.left, area.right);\r\n                            }\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n            </XYPlot>\r\n\r\n            <DiscreteColorLegend className=\"histogram-legend\"\r\n                colors={typeNames.map(typeName => this.getColorCodeForInstanceType(typeName))}\r\n                items={typeNames.map(typeName => `${typeName} (${state.counts[typeName]})`)}\r\n                orientation=\"horizontal\"\r\n            />\r\n\r\n        </>);\r\n    }\r\n\r\n    private getColorCodeForInstanceType(instanceType: string): string {\r\n\r\n        // Taking hash out of input string (reversed, to make names like 'func1', 'func2' etc. look different)\r\n        var hashCode = 0;\r\n        for (var i = instanceType.length - 1; i >= 0; i--) {\r\n            hashCode = ((hashCode << 5) - hashCode) + instanceType.charCodeAt(i);\r\n            // Convert to positive 32-bit integer\r\n            hashCode &= 0x7FFFFFFF;\r\n        }\r\n\r\n        // min 6 hex digits\r\n        hashCode |= 0x100000;\r\n\r\n        // Not too white\r\n        hashCode &= 0xFFFFEF;\r\n\r\n        return '#' + hashCode.toString(16);\r\n    }\r\n\r\n    private formatTimeTick(t: Date, timeRange: number) {\r\n\r\n        const m = moment(t);\r\n\r\n        if (!this.context.showTimeAsLocal) {\r\n            m.utc();\r\n        }\r\n\r\n        if (timeRange > 5 * 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD');\r\n        }\r\n\r\n        if (timeRange > 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD HH:mm');\r\n        }\r\n\r\n        if (timeRange > 10000) {\r\n\r\n            return m.second() === 0 ? m.format('HH:mm') : m.format('HH:mm:ss');\r\n        }\r\n\r\n        return (m.millisecond() === 0) ? m.format('HH:mm:ss') : m.format(':SSS');\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport { Box, Button, Typography } from '@material-ui/core';\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// A button to save something as an .SVG file\r\nexport class SaveAsSvgButton extends React.Component<{ svg: string, fileName: string, inProgress: boolean, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => this.props.backendClient.call('SaveAs', this.props.fileName + '.svg', this.props.svg)}\r\n                >\r\n                    <SaveIcon />\r\n                    <Box width={20} />\r\n                    <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                </Button>\r\n            );\r\n\r\n        } else {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    href={URL.createObjectURL(new Blob([this.props.svg], { type: 'image/svg+xml' }))}\r\n                    download={this.props.fileName + '.svg'}\r\n                >\r\n                    <SaveIcon />\r\n                    <Box width={20} />\r\n                    <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Appends some styling to SVG code, so it can also be saved as file\r\nexport function getStyledSvg(svg: string): string {\r\n\r\n    return svg.replace('</style>',\r\n        '.note { stroke: none !important; fill: none !important; } ' +\r\n        '.noteText { font-size: 9px !important; } ' +\r\n        '</style>'\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport { ResultsGanttDiagramTabState } from '../../states/results-view/ResultsGanttDiagramTabState';\r\nimport { SaveAsSvgButton, getStyledSvg } from '../SaveAsSvgButton';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\n\r\nimport { CustomTabStyle } from '../../theme';\r\n\r\n// Orchestrations Gantt chart view\r\n@observer\r\nexport class OrchestrationsGanttChart extends React.Component<{ state: ResultsGanttDiagramTabState, inProgress: boolean, fileName: string, backendClient: IBackendClient }> {\r\n\r\n    componentDidUpdate() {\r\n\r\n        // Mounting click handlers to diagram nodes\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('task'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskText'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideLeft'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideRight'));\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        if (!state.rawHtml) {\r\n            return null;\r\n        }\r\n\r\n        return (<>\r\n\r\n            <div\r\n                className=\"raw-html-div\"\r\n                style={CustomTabStyle}\r\n                dangerouslySetInnerHTML={{ __html: getStyledSvg(state.rawHtml) }}\r\n            />\r\n\r\n            <Toolbar variant=\"dense\">\r\n\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                >\r\n                    <FileCopyIcon />\r\n                    <Box width={10} />\r\n                    <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                </Button>\r\n\r\n                <Box width={20} />\r\n\r\n                <SaveAsSvgButton\r\n                    svg={getStyledSvg(state.rawHtml)}\r\n                    fileName={this.props.fileName}\r\n                    inProgress={this.props.inProgress}\r\n                    backendClient={this.props.backendClient}\r\n                />\r\n\r\n                <Box width={20} />\r\n            </Toolbar>\r\n        </>);\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n\r\n            const oneBasedInstanceIndex = parseInt(el.id.substr(4));\r\n            el.onclick = () => state.goto(oneBasedInstanceIndex);\r\n            el.style.cursor = 'pointer';\r\n        }\r\n    }\r\n}","import { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { CancelToken } from '../../CancelToken';\r\n\r\nexport enum CustomTabTypeEnum {\r\n    RawHtml = 0,\r\n    MermaidDiagram,\r\n    FunctionGraph\r\n}\r\n\r\n// Represents states of custom tabs\r\nexport interface ICustomTabState {\r\n\r\n    name: string;\r\n    description: string;\r\n    rawHtml: string;\r\n    tabType: CustomTabTypeEnum;\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void>;\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Chip, FormGroup, FormControlLabel, FormHelperText, Link, Toolbar, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport './OrchestrationsFunctionGraph.css';\r\n\r\nimport { ResultsFunctionGraphTabState } from '../../states/results-view/ResultsFunctionGraphTabState';\r\nimport { SaveAsSvgButton, getStyledSvg } from '../SaveAsSvgButton';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\n\r\nimport { CustomTabStyle, RuntimeStatusToBadgeStyle } from '../../theme';\r\n\r\n// Interactive Function Graph view\r\n@observer\r\nexport class OrchestrationsFunctionGraph extends React.Component<{ state: ResultsFunctionGraphTabState, inProgress: boolean, fileName: string, backendClient: IBackendClient }> {\r\n\r\n    componentDidMount() {\r\n\r\n        window.addEventListener('resize', this.repositionMetricHints);\r\n        this.repositionMetricHints();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        window.removeEventListener('resize', this.repositionMetricHints);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        this.repositionMetricHints();\r\n\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('function'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('orchestrator'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('activity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('entity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('proxy'));\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            <FormHelperText className=\"link-to-az-func-as-a-graph\" >\r\n                powered by <Link\r\n                    variant=\"inherit\"\r\n                    href=\"https://github.com/scale-tone/az-func-as-a-graph\"\r\n                >\r\n                    az-func-as-a-graph\r\n                </Link>\r\n            </FormHelperText>\r\n\r\n            {!!state.functionsLoaded && (\r\n                <FormGroup row className=\"settings-group\">\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={this.props.inProgress}\r\n                            checked={state.renderFunctions}\r\n                            onChange={(evt) => state.renderFunctions = evt.target.checked}\r\n                        />}\r\n                        label=\"Show Functions\"\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={this.props.inProgress}\r\n                            checked={state.renderProxies}\r\n                            onChange={(evt) => state.renderProxies = evt.target.checked}\r\n                        />}\r\n                        label=\"Show Proxies\"\r\n                    />\r\n\r\n                    {this.renderTotalMetric()}\r\n\r\n                </FormGroup>\r\n            )}\r\n\r\n            {this.renderMetrics()}\r\n\r\n            {!!state.diagramSvg && (<>\r\n                <div\r\n                    className=\"diagram-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.diagramSvg) }}\r\n                />\r\n\r\n                <Toolbar variant=\"dense\">\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        disabled={this.props.inProgress}\r\n                        onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                    >\r\n                        <FileCopyIcon />\r\n                        <Box width={10} />\r\n                        <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                    </Button>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <SaveAsSvgButton\r\n                        svg={getStyledSvg(state.diagramSvg)}\r\n                        fileName={this.props.fileName}\r\n                        inProgress={this.props.inProgress}\r\n                        backendClient={this.props.backendClient}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n                </Toolbar>\r\n            </>)}\r\n        </>);\r\n    }\r\n\r\n    private readonly RunningStyle = RuntimeStatusToBadgeStyle(\"Running\");\r\n    private readonly CompletedStyle = RuntimeStatusToBadgeStyle(\"Completed\");\r\n    private readonly FailedStyle = RuntimeStatusToBadgeStyle(\"Failed\");\r\n    private readonly OtherStyle = RuntimeStatusToBadgeStyle(\"Terminated\");\r\n\r\n    private renderTotalMetric(): JSX.Element {\r\n        \r\n        const state = this.props.state;\r\n        const totalMetric = state.metrics[state.TotalMetricsName];\r\n\r\n        return (!!totalMetric && (!!totalMetric.completed || !!totalMetric.running || !!totalMetric.failed) && (\r\n            <span className=\"total-metrics-span\">\r\n\r\n                <Typography variant=\"body1\">Total instances:</Typography>\r\n\r\n                <Box width={10}/>\r\n                \r\n                {!!totalMetric.completed && (\r\n                    <Chip className=\"metrics-chip\" style={this.CompletedStyle} variant=\"outlined\" size=\"small\" label={`${totalMetric.completed} completed`} />\r\n                )}\r\n                {!!totalMetric.running && (\r\n                    <Chip className=\"metrics-chip\" style={this.RunningStyle} variant=\"outlined\" size=\"small\" label={`${totalMetric.running} running`} />\r\n                )}\r\n                {!!totalMetric.failed && (\r\n                    <Chip className=\"metrics-chip\" style={this.FailedStyle} variant=\"outlined\" size=\"small\" label={`${totalMetric.failed} failed`} />\r\n                )}\r\n                {!!totalMetric.other && (\r\n                    <Chip className=\"metrics-chip\" style={this.OtherStyle} variant=\"outlined\" size=\"small\" label={`${totalMetric.other} other`} />\r\n                )}\r\n                \r\n            </span>)\r\n        );\r\n    }\r\n    \r\n    private renderMetrics(): JSX.Element[] {\r\n        \r\n        const state = this.props.state;\r\n\r\n        return Object.keys(state.metrics).map(functionName => {\r\n\r\n            const metric = state.metrics[functionName];\r\n\r\n            return (<span id={`metrics-hint-${functionName.toLowerCase()}`} key={`metrics-hint-${functionName}`} className=\"metrics-span\">\r\n\r\n                {!!metric.completed && (\r\n                    <Tooltip title=\"Number of completed instances\">\r\n                        <Chip className=\"metrics-chip\" style={this.CompletedStyle} variant=\"outlined\" size=\"small\" label={`${metric.completed}`} />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.running && (\r\n                    <Tooltip title=\"Number of running instances\">\r\n                        <Chip className=\"metrics-chip\" style={this.RunningStyle} variant=\"outlined\" size=\"small\" label={`${metric.running}`} />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.failed && (\r\n                    <Tooltip title=\"Number of failed instances\">\r\n                        <Chip className=\"metrics-chip\" style={this.FailedStyle} variant=\"outlined\" size=\"small\" label={`${metric.failed}`} />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.other && (\r\n                    <Tooltip title=\"Number of terminated/cancelled instances\">\r\n                        <Chip className=\"metrics-chip\" style={this.OtherStyle} variant=\"outlined\" size=\"small\" label={`${metric.other}`} />\r\n                    </Tooltip>\r\n                )}\r\n                \r\n            </span>);\r\n        });\r\n    }\r\n\r\n    private repositionMetricHints() {\r\n\r\n        const allMetricsHintNodes = document.getElementsByClassName('metrics-span');\r\n        for (var i = 0; i < allMetricsHintNodes.length; i++) {\r\n            const metricsHintNode = allMetricsHintNodes[i] as HTMLElement;\r\n            metricsHintNode.style.visibility = 'hidden';\r\n        }\r\n        \r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n        if (!svgElement) {\r\n            return;\r\n        }\r\n\r\n        svgElement.onresize = () => {\r\n            this.repositionMetricHints();\r\n        };\r\n\r\n        const instanceNodes = Array.from(svgElement.getElementsByClassName('entity'))\r\n            .concat(Array.from(svgElement.getElementsByClassName('orchestrator')));\r\n        \r\n        var isHighlightedAttributeName = '';\r\n        \r\n        for (var instanceNode of instanceNodes) {\r\n\r\n            const match = /flowchart-(.+)-/.exec(instanceNode.id);\r\n            if (!!match) {\r\n\r\n                const functionName = match[1];\r\n                const metricsHintNode = document.getElementById(`metrics-hint-${functionName.toLowerCase()}`);\r\n                if (!!metricsHintNode) {\r\n\r\n                    // Mark this graph node as highlighed\r\n                    isHighlightedAttributeName = 'data-is-highlighted';\r\n                    instanceNode.setAttribute(isHighlightedAttributeName, 'true');\r\n\r\n                    const instanceNodeRect = instanceNode.getBoundingClientRect();\r\n                    \r\n                    metricsHintNode.style.visibility = 'visible';\r\n                    metricsHintNode.style.left = `${instanceNodeRect.left + 5}px`;\r\n                    metricsHintNode.style.top = `${instanceNodeRect.top - 17}px`;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Dimming those nodes that are not highlighted\r\n        if (!!isHighlightedAttributeName) {\r\n            for (var node of Array.from(svgElement.getElementsByClassName('node'))) {\r\n\r\n                (node as HTMLElement).style.opacity = !node.getAttribute(isHighlightedAttributeName) ? '0.6' : '1';\r\n            }\r\n        }\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n\r\n            const match = /flowchart-(.+)-/.exec(el.id);\r\n            if (!!match) {\r\n\r\n                const closuredFunctionName = match[1];\r\n                el.onclick = () => state.gotoFunctionCode(closuredFunctionName);\r\n                el.style.cursor = 'pointer';\r\n            }\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, Checkbox, FormGroup, FormControl, FormControlLabel, Grid,\r\n    InputLabel, LinearProgress, Menu, MenuItem, Select, Tab, Tabs, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DurableOrchestrationStatusFields, RuntimeStatuses } from '../../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from '../ErrorMessage';\r\nimport { OrchestrationsState, ResultsTabEnum, FilterOperatorEnum, TimeRangeEnum } from '../../states/results-view/OrchestrationsState';\r\nimport { ResultsListTabState } from '../../states/results-view/ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from '../../states/results-view/ResultsGanttDiagramTabState';\r\nimport { ResultsHistogramTabState } from '../../states/results-view/ResultsHistogramTabState';\r\nimport { ResultsFunctionGraphTabState } from '../../states/results-view/ResultsFunctionGraphTabState';\r\nimport { OrchestrationsList } from './OrchestrationsList';\r\nimport { OrchestrationsHistogram } from './OrchestrationsHistogram';\r\nimport { OrchestrationsGanttChart } from './OrchestrationsGanttChart';\r\nimport { OrchestrationsFunctionGraph } from './OrchestrationsFunctionGraph';\r\nimport { DfmContextType } from '../../DfmContext';\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const state = this.props.state;\r\n\r\n            if (state.tabIndex !== ResultsTabEnum.List ) {\r\n                return;\r\n            }\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                state.loadOrchestrations();\r\n            }\r\n        });\r\n\r\n        // Doing zoom reset\r\n        document.addEventListener('keydown', (evt: any) => {\r\n\r\n            const state = this.props.state;\r\n            if (state.tabIndex === ResultsTabEnum.Histogram && !!evt.ctrlKey && evt.keyCode === 90) {\r\n\r\n                const histogramState = state.selectedTabState as ResultsHistogramTabState;\r\n                histogramState.resetZoom();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n        const listState = state.selectedTabState as ResultsListTabState;\r\n        const histogramState = state.selectedTabState as ResultsHistogramTabState;\r\n        const ganttChartState = state.selectedTabState as ResultsGanttDiagramTabState;\r\n        const functionGraphState = state.selectedTabState as ResultsFunctionGraphTabState;\r\n\r\n        const timeZone = !this.context.showTimeAsLocal ? 'UTC' : 'Local';\r\n\r\n        return (<>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.LastMinute}>Last Minute</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last10Minutes}>Last 10 Minutes</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.LastHour}>Last Hour</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last24Hours}>Last 24 Hours</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last7Days}>Last 7 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last30Days}>Last 30 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last90Days}>Last 90 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Custom}>Custom</MenuItem>\r\n            </Menu>\r\n            \r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Grid container className=\"toolbar-grid1\">\r\n                        <Grid item xs={12}>\r\n\r\n                            <Button size=\"small\" variant=\"outlined\" className=\"time-period-menu-drop-btn\"\r\n                                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                            >\r\n                                <ArrowDropDownIcon/>\r\n                            </Button>\r\n                            \r\n                            {!!state.timeRange ? (\r\n                                <TextField\r\n                                    className=\"from-input\"\r\n                                    label=\"Time Range\"\r\n                                    InputProps={{ readOnly: true }}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    type=\"text\"\r\n                                    value={this.timeRangeToString(state.timeRange)}\r\n                                />\r\n                            ) : (\r\n                                <KeyboardDateTimePicker\r\n                                    className=\"from-input\"\r\n                                    ampm={false}\r\n                                    autoOk={true}\r\n                                    label={`From (${timeZone})`}\r\n                                    invalidDateMessage=\"\"\r\n                                    format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                    disabled={state.inProgress}\r\n                                    value={this.context.getMoment(state.timeFrom)}\r\n                                    onChange={(t) => state.timeFrom = this.context.setMoment(t)}\r\n                                    onBlur={() => state.applyTimeFrom()}\r\n                                    onAccept={() => state.applyTimeFrom()}\r\n                                    onKeyPress={this.handleKeyPress}\r\n                                />\r\n                            )}\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n\r\n                            {!state.timeRange && (<>\r\n\r\n                                <FormControl>\r\n                                    <Checkbox\r\n                                        id=\"till-checkbox\"\r\n                                        className=\"till-checkbox\"\r\n                                        disabled={state.inProgress}\r\n                                        checked={state.timeTillEnabled}\r\n                                        onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                                    />\r\n                                </FormControl>\r\n\r\n                                {state.timeTillEnabled ? (\r\n                                    <KeyboardDateTimePicker\r\n                                        className=\"till-input\"\r\n                                        ampm={false}\r\n                                        autoOk={true}\r\n                                        label={`Till (${timeZone})`}\r\n                                        invalidDateMessage=\"\"\r\n                                        format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                        disabled={state.inProgress}\r\n                                        value={this.context.getMoment(state.timeTill)}\r\n                                        onChange={(t) => state.timeTill = this.context.setMoment(t)}\r\n                                        onBlur={() => state.applyTimeTill()}\r\n                                        onAccept={() => state.applyTimeTill()}\r\n                                        onKeyPress={this.handleKeyPress}\r\n                                    />\r\n                                ) : (\r\n                                    <TextField\r\n                                        className=\"till-input\"\r\n                                        label={`Till (${timeZone})`}\r\n                                        placeholder=\"[Now]\"\r\n                                        InputLabelProps={{ shrink: true }}\r\n                                        type=\"text\"\r\n                                        disabled={true}\r\n                                    />\r\n                                )}\r\n\r\n                            </>)}\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid2\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl>\r\n                                <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select filtered-column-input\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filteredColumn}\r\n                                    onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                    inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                    <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                    {DurableOrchestrationStatusFields.map(col => {\r\n                                        return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                    })}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className=\"toolbar-grid2-item1-select\">\r\n                                <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filterOperator}\r\n                                    onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                    inputProps={{ id: \"filter-operator-select\" }}>\r\n                                    <MenuItem value={FilterOperatorEnum.Equals}>Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.StartsWith}>Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.Contains}>Contains</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotEquals}>Not Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotStartsWith}>Not Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotContains}>Not Contains</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                            <TextField\r\n                                className=\"filter-value-input\"\r\n                                label=\"Filter Value\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                placeholder=\"[some text or 'null']\"\r\n                                disabled={state.filteredColumn === '0' || state.inProgress}\r\n                                value={state.filterValue}\r\n                                onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                                onBlur={() => state.applyFilterValue()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <FormGroup className=\"toolbar-runtime-status-group\">\r\n\r\n                        <InputLabel className=\"toolbar-runtime-status-group-label\" shrink={true}>Type/Status {!state.showStatuses ? '' : ` (${state.showStatuses.length} selected)`}</InputLabel>\r\n\r\n                        <FormGroup className=\"toolbar-runtime-status-checkbox-group\" onScroll={() => state.rescheduleDelayedRefresh()}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked()}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked)}\r\n                                />}\r\n                                label=\"[All]\"\r\n                            />\r\n\r\n                            {RuntimeStatuses.map(status => (<FormControlLabel key={status}\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked(status)}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked, status)}\r\n                                />}\r\n                                label={'Orchestations:' + status}\r\n                            />))}\r\n\r\n                            <FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked('DurableEntities')}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked, 'DurableEntities')}\r\n                                />}\r\n                                label=\"Durable Entities\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                    </FormGroup>\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Grid container className=\"toolbar-grid3\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl className=\"form-control-float-right\">\r\n                                <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                                <Select\r\n                                    className=\"autorefresh-select\"\r\n                                    inputProps={{ id: \"auto-refresh-select\" }}\r\n                                    value={state.autoRefresh}\r\n                                    onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                                >\r\n                                    <MenuItem value={0}>Never</MenuItem>\r\n                                    <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                    <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                    <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                            <Button\r\n                                className=\"refresh-button form-control-float-right\"\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                size=\"large\"\r\n                                onClick={() => state.inProgress ? state.cancel() : state.reloadOrchestrations()}\r\n                            >\r\n                                {state.inProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <AppBar color=\"inherit\" position=\"static\">\r\n                <Tabs className=\"tab-buttons\" value={state.tabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.tabIndex = val}>\r\n\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">List</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Time Histogram</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Gantt Chart</Typography>} />\r\n\r\n                    {!!state.isFunctionGraphAvailable && (\r\n                        <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Functions Graph</Typography>} />\r\n                    )}\r\n                    \r\n                </Tabs>\r\n            </AppBar>\r\n\r\n            {state.tabIndex === ResultsTabEnum.List && (<>\r\n\r\n                <OrchestrationsList state={listState} showLastEventColumn={state.showLastEventColumn} backendClient={state.backendClient} />\r\n\r\n                {state.inProgress && !!listState.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                \r\n            </>)}\r\n\r\n            {state.tabIndex === ResultsTabEnum.Histogram &&\r\n                (<OrchestrationsHistogram state={histogramState} />)\r\n            }\r\n            \r\n            {state.tabIndex === ResultsTabEnum.Gantt &&\r\n                (<OrchestrationsGanttChart\r\n                    state={ganttChartState}\r\n                    inProgress={state.inProgress}\r\n                    fileName={`gantt-chart-${state.timeFrom.format('YYYY-MM-DD-HH-mm-ss')}-${state.timeTill.format('YYYY-MM-DD-HH-mm-ss')}`} \r\n                    backendClient={state.backendClient} \r\n                />)\r\n            }\r\n\r\n            {state.tabIndex === ResultsTabEnum.FunctionGraph &&\r\n                (<OrchestrationsFunctionGraph\r\n                    state={functionGraphState}\r\n                    inProgress={state.inProgress}\r\n                    fileName={`function-graph-${state.timeFrom.format('YYYY-MM-DD-HH-mm-ss')}-${state.timeTill.format('YYYY-MM-DD-HH-mm-ss')}`} \r\n                    backendClient={state.backendClient} \r\n                />)\r\n            }\r\n                \r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private timeRangeToString(timeRange: TimeRangeEnum): string {\r\n        switch (timeRange) {\r\n            case TimeRangeEnum.LastMinute: return 'Last Minute';\r\n            case TimeRangeEnum.Last10Minutes: return 'Last 10 Minutes';\r\n            case TimeRangeEnum.LastHour: return 'Last Hour';\r\n            case TimeRangeEnum.Last24Hours: return 'Last 24 Hours';\r\n            case TimeRangeEnum.Last7Days: return 'Last 7 Days';\r\n            case TimeRangeEnum.Last30Days: return 'Last 30 Days';\r\n            case TimeRangeEnum.Last90Days: return 'Last 90 Days';\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../../states/details-view/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Send Signal\r\n            </Button>\r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Send Signal</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide signal name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Signal Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Signal Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Send\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Grid, TextField } from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../../states/DurableOrchestrationStatus';\r\nimport { RuntimeStatusToStyle } from '../../theme';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId?.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId?.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    FormControlLabel, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../../states/details-view/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.restartDialogOpen = true}>\r\n                Restart\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.restartDialogOpen}\r\n                onClose={() => state.restartDialogOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Restart</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to restart orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n\r\n                    <FormControlLabel control={<Checkbox\r\n                        checked={state.restartWithNewInstanceId}\r\n                        onChange={(evt) => state.restartWithNewInstanceId = evt.target.checked} />}\r\n                        label=\"Restart with new instanceId\"\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.restartDialogOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.restart()} color=\"secondary\">\r\n                        Restart\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, Link, Table, TableBody, TableCell, TableHead, TableRow, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../../states/details-view/OrchestrationDetailsState';\r\nimport { HistoryEventFields, HistoryEvent } from '../../states/DurableOrchestrationStatus';\r\nimport { OrchestrationLink } from '../OrchestrationLink';\r\nimport { DfmContextType } from '../../DfmContext';\r\nimport { RuntimeStatusToStyle } from '../../theme';\r\nimport { Theme } from '../../theme';\r\nimport { LongJsonDialog } from '../LongJsonDialog';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    componentDidMount() {\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) {\r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 50;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadHistory();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        const totalItems = state.historyTotalCount;\r\n        const details = state.details;\r\n        const history = state.history;\r\n        const itemsShown = history.length;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"instanceId\"\r\n                        value={details.instanceId}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={this.context.formatDateTimeString(details.createdTime)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={this.context.formatDateTimeString(details.lastUpdatedTime)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: { (!totalItems || totalItems === itemsShown) ? `${itemsShown} items${!totalItems ? ' shown' : ''}` : `${itemsShown} of ${totalItems} items shown` }\r\n            </FormHelperText>\r\n\r\n            {!!history.length && this.renderTable(history)}\r\n\r\n            <LongJsonDialog state={state.longJsonDialogState} />\r\n\r\n        </>);\r\n    }\r\n\r\n    private getFunctionName(event: HistoryEvent): string {\r\n\r\n        if (!!event.Name) {\r\n            return event.Name;\r\n        }\r\n\r\n        return event.FunctionName ?? '';\r\n    }\r\n\r\n    private renderEventLink(event: HistoryEvent): JSX.Element | string {\r\n\r\n        const state = this.props.state;\r\n        const functionName = this.getFunctionName(event);\r\n\r\n        if (!!event.SubOrchestrationId) {\r\n            return (<OrchestrationLink orchestrationId={event.SubOrchestrationId}\r\n                title={functionName}\r\n                backendClient={state.backendClient}\r\n            />);\r\n        }\r\n\r\n        if (!!state.functionNames[functionName]) {\r\n            \r\n            // Showing link to sources\r\n            return (<Link className=\"link-with-pointer-cursor\"\r\n                color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'}\r\n                onClick={() => { state.gotoFunctionCode(functionName) }}\r\n            >\r\n                {functionName}\r\n            </Link>);\r\n        }\r\n\r\n        return functionName;\r\n    }\r\n\r\n    private renderTable(events: HistoryEvent[]): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: HistoryEvent, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {this.context.formatDateTimeString(event.Timestamp)}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventId}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {this.renderEventLink(event)}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {this.context.formatDateTimeString(event.ScheduledTime)}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    {LongJsonDialog.renderJson(event.Result, `${event.EventType} / ${this.getFunctionName(event)} / ${HistoryEventFields[5]}`, this.props.state.longJsonDialogState)}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    {LongJsonDialog.renderJson(event.Details, `${event.EventType} / ${this.getFunctionName(event)} / ${HistoryEventFields[6]}`, this.props.state.longJsonDialogState)}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { BackendClient } from '../services/BackendClient';\r\nimport { LoginState, OrchestrationsPathPrefix } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './results-view/OrchestrationsState';\r\nimport { ResultsListTabState } from './results-view/ResultsListTabState';\r\nimport { OrchestrationDetailsState } from './details-view/OrchestrationDetailsState';\r\nimport { FunctionGraphState } from './FunctionGraphState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// Global variables declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\ndeclare const IsFunctionGraphAvailable: boolean;\r\n\r\nenum DfmViewModeEnum {\r\n    DurableFunctions = 0,\r\n    FunctionGraph\r\n}\r\ndeclare const DfmViewMode: DfmViewModeEnum;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    functionGraphState?: FunctionGraphState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n    cleanEntityStorageDialogState: CleanEntityStorageDialogState;\r\n\r\n    @computed\r\n    get typedInstanceId(): string {\r\n        return this._typedInstanceId;\r\n    }\r\n    set typedInstanceId(s: string) {\r\n        this._typedInstanceId = s;\r\n        this.reloadSuggestions();\r\n    }\r\n\r\n    @computed\r\n    get suggestions(): string[] {\r\n        return this._suggestions;\r\n    }\r\n\r\n    @computed\r\n    get isExactMatch(): boolean {\r\n        return this._suggestions.length === 1 && this._suggestions[0] === this._typedInstanceId;\r\n    }\r\n    \r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (DfmViewMode === DfmViewModeEnum.FunctionGraph) {\r\n\r\n                this.functionGraphState = new FunctionGraphState(backendClient);\r\n\r\n            } else if (!!this.instanceId) {\r\n\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.instanceId,\r\n                    IsFunctionGraphAvailable,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n                \r\n            } else {\r\n\r\n                this.orchestrationsState = new OrchestrationsState(IsFunctionGraphAvailable, backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState & ResultsListTabState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setCustomHandlers(\r\n                    () => this.purgeHistoryDialogState.dialogOpen = true,\r\n                    () => this.cleanEntityStorageDialogState.dialogOpen = true\r\n                );\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(() => this.loginState.taskHubName, () => this.loginState.getAuthorizationHeaderAsync());\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.instanceId) {\r\n\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.instanceId,\r\n                    IsFunctionGraphAvailable,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n                \r\n            } else {\r\n\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState, this.cleanEntityStorageDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(IsFunctionGraphAvailable, backendClient, new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Opens the entered orchestrationId in a new tab\r\n    goto() {\r\n        window.open(`${this._backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this._typedInstanceId}`);\r\n        this._typedInstanceId = '';\r\n        this._suggestions = [];\r\n    }\r\n\r\n    @observable\r\n    private _suggestions: string[] = [];\r\n    @observable\r\n    private _typedInstanceId: string = '';\r\n\r\n    private readonly _backendClient: IBackendClient;\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get instanceId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const pos = window.location.pathname.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos < 0) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(pos + OrchestrationsPathPrefix.length);\r\n    }\r\n\r\n    // Reloads list of suggested instanceIds\r\n    private reloadSuggestions(): void {\r\n\r\n        if (!this._typedInstanceId || this._typedInstanceId.length < 2) {\r\n            this._suggestions = [];\r\n            return;\r\n        }\r\n\r\n        const uri = `/id-suggestions(prefix='${this._typedInstanceId}')`;\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response || !this._typedInstanceId) {\r\n                this._suggestions = [];\r\n            } else {\r\n                this._suggestions = response;\r\n            }\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Chip, FormGroup, FormControlLabel, FormHelperText, Link, Toolbar, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport { FunctionGraphTabState } from '../../states/details-view/FunctionGraphTabState';\r\nimport { SaveAsSvgButton, getStyledSvg } from '../SaveAsSvgButton';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { DateTimeHelpers } from '../../DateTimeHelpers';\r\n\r\nimport { CustomTabStyle, RuntimeStatusToBadgeStyle } from '../../theme';\r\n\r\n// Interactive Function Graph view\r\n@observer\r\nexport class OrchestrationDetailsFunctionGraph extends React.Component<{ state: FunctionGraphTabState, inProgress: boolean, fileName: string, backendClient: IBackendClient }> {\r\n\r\n    componentDidMount() {\r\n\r\n        window.addEventListener('resize', this.repositionMetricHints);\r\n        this.repositionMetricHints();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        window.removeEventListener('resize', this.repositionMetricHints);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        this.repositionMetricHints();\r\n\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('function'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('orchestrator'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('activity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('entity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('proxy'));\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            <FormHelperText className=\"link-to-az-func-as-a-graph\" >\r\n                powered by <Link\r\n                    variant=\"inherit\"\r\n                    href=\"https://github.com/scale-tone/az-func-as-a-graph\"\r\n                >\r\n                    az-func-as-a-graph\r\n                </Link>\r\n            </FormHelperText>\r\n\r\n            {!!state.functionsLoaded && (\r\n                <FormGroup row className=\"settings-group\">\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={this.props.inProgress}\r\n                            checked={state.renderFunctions}\r\n                            onChange={(evt) => state.renderFunctions = evt.target.checked}\r\n                        />}\r\n                        label=\"Show Functions\"\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={this.props.inProgress}\r\n                            checked={state.renderProxies}\r\n                            onChange={(evt) => state.renderProxies = evt.target.checked}\r\n                        />}\r\n                        label=\"Show Proxies\"\r\n                    />\r\n\r\n\r\n                </FormGroup>\r\n            )}\r\n\r\n            {this.renderMetrics()}\r\n\r\n            {!!state.diagramSvg && (<>\r\n                <div\r\n                    className=\"diagram-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.diagramSvg) }}\r\n                />\r\n\r\n                <Toolbar variant=\"dense\">\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        disabled={this.props.inProgress}\r\n                        onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                    >\r\n                        <FileCopyIcon />\r\n                        <Box width={10} />\r\n                        <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                    </Button>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <SaveAsSvgButton\r\n                        svg={getStyledSvg(state.diagramSvg)}\r\n                        fileName={this.props.fileName}\r\n                        inProgress={this.props.inProgress}\r\n                        backendClient={this.props.backendClient}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n                </Toolbar>\r\n            </>)}\r\n        </>);\r\n    }\r\n\r\n    private readonly RunningStyle = RuntimeStatusToBadgeStyle('Running');\r\n    private readonly CompletedStyle = RuntimeStatusToBadgeStyle('Completed');\r\n    private readonly FailedStyle = RuntimeStatusToBadgeStyle('Failed');\r\n    private readonly OtherStyle = RuntimeStatusToBadgeStyle('Terminated');\r\n    private readonly DurationStyle = RuntimeStatusToBadgeStyle('Duration');\r\n\r\n    private renderMetrics(): JSX.Element[] {\r\n        \r\n        const state = this.props.state;\r\n\r\n        return Object.keys(state.metrics).map(functionName => {\r\n\r\n            const metric = state.metrics[functionName];\r\n            const totalInstances = (metric.completed ?? 0) + (metric.running ?? 0) + (metric.failed ?? 0) + (metric.other ?? 0);\r\n\r\n            return (<span id={`metrics-hint-${functionName.toLowerCase()}`} key={`metrics-hint-${functionName}`} className=\"metrics-span\">\r\n\r\n                {!!metric.completed && (\r\n                    <Tooltip title={totalInstances === 1 ? `runtimeStatus` : `Number of completed instances`}>\r\n                        <Chip className=\"metrics-chip\" style={this.CompletedStyle} variant=\"outlined\" size=\"small\"\r\n                            label={totalInstances === 1 ? `completed` : `${metric.completed}`}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.running && (\r\n                    <Tooltip title={totalInstances === 1 ? `runtimeStatus` : `Number of running instances`}>\r\n                        <Chip className=\"metrics-chip\" style={this.RunningStyle} variant=\"outlined\" size=\"small\"\r\n                            label={totalInstances === 1 ? `running` : `${metric.running}`}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.failed && (\r\n                    <Tooltip title={totalInstances === 1 ? `runtimeStatus` : `Number of failed instances`}>\r\n                        <Chip className=\"metrics-chip\" style={this.FailedStyle} variant=\"outlined\" size=\"small\"\r\n                            label={totalInstances === 1 ? `failed` : `${metric.failed}`}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n                {!!metric.other && (\r\n                    <Tooltip title={totalInstances === 1 ? `runtimeStatus` : `Number of terminated/cancelled instances`}>\r\n                        <Chip className=\"metrics-chip\" style={this.OtherStyle} variant=\"outlined\" size=\"small\"\r\n                            label={totalInstances === 1 ? `...` : `${metric.other}`}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n\r\n                {!!metric.duration && (\r\n                    <Tooltip title={totalInstances === 1 ? `Duration` : `Max Duration`}>\r\n                        <Chip className=\"metrics-chip\" style={this.DurationStyle} variant=\"outlined\" size=\"small\"\r\n                            label={DateTimeHelpers.formatDuration(metric.duration)}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n                \r\n            </span>);\r\n        });\r\n    }\r\n    \r\n    private repositionMetricHints() {\r\n\r\n        const allMetricsHintNodes = document.getElementsByClassName('metrics-span');\r\n        for (var i = 0; i < allMetricsHintNodes.length; i++) {\r\n            const metricsHintNode = allMetricsHintNodes[i] as HTMLElement;\r\n            metricsHintNode.style.visibility = 'hidden';\r\n        }\r\n        \r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n        if (!svgElement) {\r\n            return;\r\n        }\r\n\r\n        svgElement.onresize = () => {\r\n            this.repositionMetricHints();\r\n        };\r\n\r\n        const instanceNodes = Array.from(svgElement.getElementsByClassName('entity'))\r\n            .concat(Array.from(svgElement.getElementsByClassName('orchestrator')))\r\n            .concat(Array.from(svgElement.getElementsByClassName('activity')));\r\n        \r\n        var isHighlightedAttributeName = '';\r\n        \r\n        for (var instanceNode of instanceNodes) {\r\n\r\n            const match = /flowchart-(.+)-/.exec(instanceNode.id);\r\n            if (!!match) {\r\n\r\n                const functionName = match[1];\r\n                const metricsHintNode = document.getElementById(`metrics-hint-${functionName.toLowerCase()}`);\r\n                if (!!metricsHintNode) {\r\n\r\n                    // Mark this graph node as highlighed\r\n                    isHighlightedAttributeName = 'data-is-highlighted';\r\n                    instanceNode.setAttribute(isHighlightedAttributeName, 'true');\r\n\r\n                    const instanceNodeRect = instanceNode.getBoundingClientRect();\r\n                    \r\n                    metricsHintNode.style.visibility = 'visible';\r\n                    metricsHintNode.style.left = `${instanceNodeRect.left + 5}px`;\r\n                    metricsHintNode.style.top = `${instanceNodeRect.top - 17}px`;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Dimming those nodes that are not highlighted\r\n        if (!!isHighlightedAttributeName) {\r\n            for (var node of Array.from(svgElement.getElementsByClassName('node'))) {\r\n\r\n                (node as HTMLElement).style.opacity = !node.getAttribute(isHighlightedAttributeName) ? '0.6' : '1';\r\n            }\r\n        }\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n\r\n            const match = /flowchart-(.+)-/.exec(el.id);\r\n            if (!!match) {\r\n\r\n                const closuredFunctionName = match[1];\r\n                el.onclick = () => state.gotoFunctionCode(closuredFunctionName);\r\n                el.style.cursor = 'pointer';\r\n            }\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, FormControl, InputLabel, LinearProgress, MenuItem,\r\n    Select, Tabs, Tab, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from '../ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../../states/details-view/OrchestrationDetailsState';\r\nimport { FunctionGraphTabState } from '../../states/details-view/FunctionGraphTabState';\r\nimport { CustomTabTypeEnum } from '../../states/details-view/ICustomTabState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\nimport { CustomTabStyle } from '../../theme';\r\nimport { SaveAsSvgButton, getStyledSvg } from '../SaveAsSvgButton';\r\nimport { OrchestrationDetailsFunctionGraph } from './OrchestrationDetailsFunctionGraph';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        // Mounting click handlers to diagram nodes\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('actor'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('messageText'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('task'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskText'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideLeft'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('taskTextOutsideRight'));\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"details-top-toolbar\">\r\n\r\n                    {state.details.entityType === \"Orchestration\" && (\r\n                        <OrchestrationButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    {state.details.entityType === \"DurableEntity\" && (\r\n                        <DurableEntityButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            inputProps={{ id: 'auto-refresh-select' }}>\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress && !state.loadInProgress}\r\n                        onClick={() => state.loadInProgress ? state.cancel() : state.loadDetails()}\r\n                    >\r\n                        {state.loadInProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {!!state.tabStates.length && (<>\r\n                <AppBar color=\"inherit\" position=\"static\">\r\n                    <Tabs className=\"tab-buttons\" value={state.tabIndex}\r\n                        onChange={(ev: React.ChangeEvent<{}>, val) => {\r\n                            // Link to functions graph should not be selectable\r\n                            if (val !== 'functions-graph-link') {\r\n                                state.tabIndex = val;\r\n                            }\r\n                        }}>\r\n                        \r\n                        <Tab className=\"tab-buttons\" disabled={state.inProgress} \r\n                            label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Details</Typography>}\r\n                        />\r\n                        \r\n                        {state.tabStates.map(tabState => (\r\n                            <Tab className=\"tab-buttons\" key={tabState.name} disabled={state.inProgress} \r\n                                label={<Typography color=\"textPrimary\" variant=\"subtitle2\">{tabState.name}</Typography>}\r\n                            />\r\n                        ))}\r\n\r\n                    </Tabs>\r\n                </AppBar>\r\n            </>)}\r\n\r\n            {!state.tabIndex && state.details.entityType === \"Orchestration\" && (<>\r\n                <OrchestrationFields state={state} />\r\n\r\n                {state.inProgress && !!state.history.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            </>)}\r\n\r\n            {!state.tabIndex && state.details.entityType === \"DurableEntity\" &&\r\n                <DurableEntityFields details={state.details} />\r\n            }\r\n\r\n            {!!state.selectedTab && state.selectedTab.tabType === CustomTabTypeEnum.FunctionGraph && (\r\n\r\n                <OrchestrationDetailsFunctionGraph\r\n                    state={state.selectedTab as FunctionGraphTabState}\r\n                    inProgress={state.inProgress}\r\n                    fileName={state.orchestrationId}\r\n                    backendClient={state.backendClient}\r\n                />\r\n            )}\r\n\r\n            {!!state.selectedTab && state.selectedTab.tabType !== CustomTabTypeEnum.FunctionGraph && !!state.selectedTab.rawHtml && (<>\r\n\r\n                <div\r\n                    className=\"raw-html-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.selectedTab.rawHtml) }}\r\n                />\r\n                \r\n                {state.selectedTab.tabType === CustomTabTypeEnum.MermaidDiagram && (\r\n\r\n                    <Toolbar variant=\"dense\">\r\n                        <Typography style={{ flex: 1 }} />\r\n\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"default\"\r\n                            disabled={state.inProgress}\r\n                            onClick={() => window.navigator.clipboard.writeText(state.selectedTab.description)}\r\n                        >\r\n                            <FileCopyIcon />\r\n                            <Box width={10} />\r\n                            <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                        </Button>\r\n\r\n                        <Box width={20} />\r\n\r\n                        <SaveAsSvgButton\r\n                            svg={getStyledSvg(state.selectedTab.rawHtml)}\r\n                            fileName={state.orchestrationId}\r\n                            inProgress={state.inProgress}\r\n                            backendClient={state.backendClient}\r\n                        />\r\n\r\n                        <Box width={20} />\r\n                    </Toolbar>\r\n                )}\r\n                \r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n            \r\n            var functionName = el.getAttribute('data-function-name');\r\n            if (!functionName) {\r\n                \r\n                functionName = el.innerHTML;\r\n                const match = />(.+)</.exec(functionName);\r\n                if (!!match) {\r\n                    functionName = match[1];\r\n                }\r\n            }\r\n\r\n            if (!!state.functionNames[functionName]) {\r\n\r\n                const closuredFunctionName = functionName;\r\n                el.onclick = () => state.gotoFunctionCode(closuredFunctionName);\r\n                el.style.cursor = 'pointer';\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Box, Button, Checkbox, FormControlLabel, FormHelperText, LinearProgress, Link, Toolbar, Typography } from '@material-ui/core';\r\n\r\nimport './FunctionGraph.css';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { FunctionGraphState } from '../states/FunctionGraphState';\r\nimport { CustomTabStyle } from '../theme';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\n\r\n// Function Graph view\r\n@observer\r\nexport class FunctionGraph extends React.Component<{ state: FunctionGraphState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.load();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        // Mounting click handlers to diagram nodes. Built-in mermaid feature for this doesn't work inside vsCode (no idea why)\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n\r\n        if (!!svgElement) {\r\n\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('function'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('orchestrator'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('activity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('entity'));\r\n            this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('proxy'));\r\n        }\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\">\r\n                    <Box width={20} />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={state.inProgress}\r\n                            checked={state.renderFunctions}\r\n                            onChange={(evt) => state.renderFunctions = evt.target.checked}\r\n                        />}\r\n                        label=\"Show Functions\"\r\n                    />\r\n                    <Box width={20} />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            color=\"default\"\r\n                            disabled={state.inProgress}\r\n                            checked={state.renderProxies}\r\n                            onChange={(evt) => state.renderProxies = evt.target.checked}\r\n                        />}\r\n                        label=\"Show Proxies\"\r\n                    />\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => state.load()}\r\n                    >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <FormHelperText className=\"link-to-az-func-as-a-graph\" >\r\n                powered by <Link\r\n                    variant=\"inherit\"\r\n                    href=\"https://github.com/scale-tone/az-func-as-a-graph\"\r\n                >\r\n                    az-func-as-a-graph\r\n                </Link>\r\n            </FormHelperText>\r\n\r\n            {!!state.diagramSvg && (<>\r\n\r\n                <div\r\n                    className=\"diagram-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.diagramSvg) }}\r\n                />\r\n\r\n                <Toolbar variant=\"dense\">\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                    >\r\n                        <FileCopyIcon />\r\n                        <Box width={10} />\r\n                        <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                    </Button>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <SaveAsSvgButton\r\n                        svg={getStyledSvg(state.diagramSvg)}\r\n                        fileName=\"functions.svg\"\r\n                        inProgress={state.inProgress}\r\n                        backendClient={state.backendClient}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => state.saveAsJson()}\r\n                    >\r\n                        <SaveAltIcon />\r\n                        <Box width={10} />\r\n                        <Typography color=\"inherit\">Save as JSON</Typography>\r\n                    </Button>\r\n                    \r\n                </Toolbar>\r\n\r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        const state = this.props.state;\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const el = nodes[i] as HTMLElement;\r\n\r\n            const match = /flowchart-(.+)-/.exec(el.id);\r\n            if (!!match) {\r\n\r\n                const closuredFunctionName = match[1];\r\n                el.onclick = () => state.gotoFunctionCode(closuredFunctionName);\r\n                el.style.cursor = 'pointer';\r\n            }\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\nimport { DfmContextType } from '../DfmContext';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    static contextType = DfmContextType;\r\n    context!: React.ContextType<typeof DfmContextType>;\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        const timeZone = !this.context.showTimeAsLocal ? 'UTC' : 'Local';\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                        To clean up deleted Entities use the 'Clean Entity Storage' command instead. \r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-from-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? `Last Updated From (${timeZone})` : `From (${timeZone})`}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={this.context.getMoment(state.timeFrom)}\r\n                                onChange={(t) => state.timeFrom = this.context.setMoment(t)}\r\n                            />\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? `Last Updated Till (${timeZone})` : `Till (${timeZone})`}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={this.context.getMoment(state.timeTill)}\r\n                                onChange={(t) => state.timeTill = this.context.setMoment(t)}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === 'Orchestration' && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === 'DurableEntity' && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, LinearProgress, \r\n} from '@material-ui/core';\r\n\r\nimport './CleanEntityStorageDialog.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { CleanEntityStorageDialogState } from '../states/CleanEntityStorageDialogState';\r\n\r\n// Dialog with parameters for cleaning entity storage\r\n@observer\r\nexport class CleanEntityStorageDialog extends React.Component<{ state: CleanEntityStorageDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Clean Entity Storage</DialogTitle>\r\n\r\n                {!state.response && (<>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                        <DialogContentText>\r\n                            An entity is considered empty, and is removed, if it has no state, is not locked, and has been idle for more than EntityMessageReorderWindowInMinutes. Locks are considered orphaned, and are released, if the orchestration that holds them is not in state Running.\r\n                        </DialogContentText>\r\n\r\n                        <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                            <FormGroup row>\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.removeEmptyEntities}\r\n                                    onChange={(evt) => state.removeEmptyEntities = evt.target.checked} />}\r\n                                    label=\"Remove Empty Entities\"\r\n                                />\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.releaseOrphanedLocks}\r\n                                    onChange={(evt) => state.releaseOrphanedLocks = evt.target.checked} />}\r\n                                    label=\"Release Orphaned Locks\"\r\n                                />\r\n                                \r\n                            </FormGroup>\r\n                        </FormControl>\r\n\r\n                        <ErrorMessage state={state} />\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => state.clean()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                            Clean\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n                {!!state.response && (<>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfEmptyEntitiesRemoved} empty entities removed. \r\n                        </DialogContentText>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfOrphanedLocksRemoved} orphaned locks removed.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './results-view/Orchestrations';\r\nimport { OrchestrationDetails } from './details-view/OrchestrationDetails';\r\nimport { FunctionGraph } from './FunctionGraph';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\nimport { CleanEntityStorageDialog } from './CleanEntityStorageDialog';\r\n\r\nimport { DfmContextType, dfmContextInstance } from '../DfmContext';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><DfmContextType.Provider value={dfmContextInstance}>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} doRefresh={() => state.orchestrationsState.reloadOrchestrations()} />\r\n                            )}\r\n\r\n                            <img src={`${!DfmRoutePrefix ? '' : '/'}${DfmRoutePrefix}/logo.svg`} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                <Link color=\"inherit\" href={state.loginState.rootUri}>\r\n                                    Durable Functions Monitor\r\n                                </Link>\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={state.loginState.locationPathName}>\r\n                                    / {state.loginState.taskHubName}\r\n                                </Link>\r\n\r\n                                {!state.orchestrationDetailsState ?\r\n                                    (\r\n                                        <Autocomplete\r\n                                            className=\"instance-id-input\"\r\n                                            freeSolo\r\n                                            options={state.isExactMatch ? [] : state.suggestions}\r\n                                            value={state.typedInstanceId}\r\n                                            onChange={(evt, newValue) => {\r\n                                                state.typedInstanceId = newValue ?? '';\r\n                                                if (!!newValue) {\r\n                                                    state.goto();\r\n                                                }\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    className={state.isExactMatch ? 'instance-id-valid' : null}\r\n                                                    size=\"small\"\r\n                                                    label=\"instanceId to go to...\"\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(evt) => state.typedInstanceId = evt.target.value as string}\r\n                                                    onKeyPress={(evt) => this.handleKeyPress(evt)}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    )\r\n                                    :\r\n                                    (<Typography color=\"inherit\">\r\n                                        <Link color=\"inherit\" href={window.location.pathname}>\r\n                                            {state.orchestrationDetailsState.orchestrationId}\r\n                                        </Link>\r\n                                    </Typography>)\r\n                                }\r\n\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                {!!state.functionGraphState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <FunctionGraph state={state.functionGraphState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n                <CleanEntityStorageDialog state={state.cleanEntityStorageDialogState} />\r\n\r\n            </DfmContextType.Provider></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.goto();\r\n        }\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _purgeHistoryDialogState: PurgeHistoryDialogState,\r\n        private _cleanEntityStorageDialogState: CleanEntityStorageDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    showCleanEntityStorageDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this._cleanEntityStorageDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n\r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { computed } from 'mobx';\r\n\r\nimport { ICustomTabState, CustomTabTypeEnum } from './ICustomTabState';\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../DurableOrchestrationStatus';\r\nimport { MermaidDiagramStateBase } from '../MermaidDiagramStateBase';\r\nimport { CancelToken } from '../../CancelToken';\r\n\r\n// Base class for all mermaid diagram tab states\r\nexport abstract class MermaidDiagramTabState extends MermaidDiagramStateBase implements ICustomTabState {\r\n\r\n    readonly name: string = \"Diagram\";\r\n    readonly tabType = CustomTabTypeEnum.MermaidDiagram;\r\n\r\n    @computed\r\n    get description(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; };\r\n\r\n    constructor(protected _loadHistory: (orchestrationId: string) => Promise<HistoryEvent[]>) {\r\n        super();\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n        \r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return this._loadHistory(details.instanceId).then(history => {\r\n\r\n            if (!history.length || cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            return this.buildDiagram(details, history, cancelToken);\r\n        });\r\n    }\r\n\r\n    protected abstract buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void>;\r\n}","import mermaid from 'mermaid';\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { dfmContextInstance } from '../../DfmContext';\r\n\r\n// State of Sequence Diagram tab on OrchestrationDetails view\r\nexport class SequenceDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Sequence Diagram\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken) : Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.getSequenceForOrchestration(details.name, '.', details.runtimeStatus === 'Failed', history)).then(sequenceLines => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'sequenceDiagram \\n' + sequenceLines.join('');\r\n\r\n                try {\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private getSequenceForOrchestration(orchestrationName: string, parentOrchestrationName: string, isFailed: boolean, historyEvents: HistoryEvent[]): Promise<string>[] {\r\n\r\n        const externalActor = '.'\r\n        const results: Promise<string>[] = [];\r\n        var nextLine: string;\r\n\r\n        var i = 0;\r\n        while (i < historyEvents.length) {\r\n            const event = historyEvents[i];\r\n\r\n            switch (event.EventType) {\r\n                case 'ExecutionStarted':\r\n\r\n                    nextLine =\r\n                        `${parentOrchestrationName}->>+${orchestrationName}:[ExecutionStarted] \\n` +\r\n                        `Note over ${parentOrchestrationName},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                                        \r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    const subOrchFailed = event.EventType === 'SubOrchestrationInstanceFailed';\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.getSequenceForOrchestration(subOrchestrationName, orchestrationName, subOrchFailed, history)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`${orchestrationName}-x${subOrchestrationName}:[FailedToLoad] \\n`);\r\n                            });\r\n                        }));\r\n\r\n                    } else if (!!subOrchFailed) {\r\n\r\n                        nextLine = `rect rgba(255,0,0,0.4) \\n` +\r\n                        `${orchestrationName}-x${event.FunctionName}:[SubOrchestrationInstanceFailed] \\n` +\r\n                        'end \\n';\r\n\r\n                        results.push(Promise.resolve(nextLine));\r\n                        \r\n                    } else {\r\n\r\n                        nextLine = `${orchestrationName}->>+${event.FunctionName}:[SubOrchestrationInstanceStarted] \\n`;\r\n\r\n                        results.push(Promise.resolve(nextLine));                        \r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    // Trying to aggregate multiple parallel calls\r\n                    var maxDurationInMs = event.DurationInMs;\r\n                    var j = i + 1;\r\n                    for (; j < historyEvents.length &&\r\n                        historyEvents[j].EventType === 'TaskCompleted' &&\r\n                        historyEvents[j].FunctionName === event.FunctionName &&\r\n                        historyEvents[j].ScheduledTime.substr(0, 23) === event.ScheduledTime.substr(0, 23);\r\n                        j++) {\r\n\r\n                        if (maxDurationInMs < historyEvents[j].DurationInMs) {\r\n                            maxDurationInMs = historyEvents[j].DurationInMs;\r\n                        }\r\n                    }\r\n\r\n                    if (j === i + 1) {\r\n\r\n                        const nextLine =\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n                        \r\n                    } else {\r\n\r\n                        const nextLine =\r\n                            `par ${j - i} calls \\n` +\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(maxDurationInMs)} \\n` +\r\n                            `end \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n\r\n                        i = j - 1;\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `rect rgba(255,0,0,0.4) \\n` +\r\n                        `${orchestrationName}-x${orchestrationName}:${event.FunctionName} \\n` + \r\n                        'end \\n';\r\n                    \r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'EventRaised':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:${event.Name} \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TimerFired':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[TimerFired] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionTerminated':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[ExecutionTerminated] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionCompleted':\r\n\r\n                    nextLine =\r\n                        `${orchestrationName}-->>-${parentOrchestrationName}:[${!!isFailed ? 'ExecutionFailed' : 'ExecutionCompleted'}] \\n` +\r\n                        `Note over ${orchestrationName},${parentOrchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n\r\n                    if (!!isFailed) {\r\n                    \r\n                        nextLine = `rect rgba(255,0,0,0.4) \\n` + nextLine + 'end \\n';\r\n                    }\r\n                        \r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatTimestamp(timestamp: string): string {\r\n\r\n        if (timestamp.length <= 11) {\r\n            return timestamp;\r\n        }\r\n\r\n        if (!!dfmContextInstance.showTimeAsLocal) {\r\n            return moment(timestamp).format('(HH:mm:ss.SSS)')\r\n        }\r\n\r\n        return '(' + timestamp.substr(11, 12) + 'Z)';\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { DurableOrchestrationStatus, HistoryEvent, RuntimeStatus } from '../DurableOrchestrationStatus';\r\nimport { ICustomTabState, CustomTabTypeEnum } from './ICustomTabState';\r\nimport { FunctionGraphStateBase, TraversalResult } from '../FunctionGraphStateBase';\r\nimport { buildFunctionDiagramCode } from '../az-func-as-a-graph/buildFunctionDiagramCode';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { MetricsMap, MetricsItem } from '../results-view/ResultsFunctionGraphTabState';\r\n\r\n// State of Functions Graph tab on OrchestrationDetails view\r\nexport class FunctionGraphTabState extends FunctionGraphStateBase implements ICustomTabState {\r\n\r\n    readonly name = \"Functions Graph\";\r\n    readonly tabType = CustomTabTypeEnum.FunctionGraph;\r\n\r\n    @computed\r\n    get description(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; };\r\n\r\n    @computed\r\n    get renderFunctions(): boolean { return this._renderFunctions; };\r\n    set renderFunctions(val: boolean) {\r\n        this._renderFunctions = val;\r\n        this.render();\r\n    };\r\n\r\n    @computed\r\n    get renderProxies(): boolean { return this._renderProxies; };\r\n    set renderProxies(val: boolean) {\r\n        this._renderProxies = val;\r\n        this.render();\r\n    };\r\n\r\n    @computed\r\n    get metrics(): MetricsMap { return this._metrics; }\r\n\r\n    constructor(backendClient: IBackendClient, traversalResult: TraversalResult, private _loadHistory: (orchestrationId: string) => Promise<HistoryEvent[]>) {\r\n        super(backendClient);\r\n        this._traversalResult = traversalResult;\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n\r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        const metrics: MetricsMap = {};\r\n\r\n        return this.render().then(() => {\r\n\r\n            return this._loadHistory(details.instanceId).then(history => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    return;\r\n                }\r\n\r\n                return this.updateMetricsForInstance(metrics, DurableOrchestrationStatus.getFunctionName(details),\r\n                        details.runtimeStatus, new Date(details.lastUpdatedTime).getTime() - new Date(details.createdTime).getTime(),\r\n                        history, cancelToken)\r\n                    .then(() => {\r\n\r\n                        this._metrics = metrics;\r\n                    });\r\n            });\r\n        })\r\n    }\r\n\r\n    @observable\r\n    private _metrics: MetricsMap = {};\r\n\r\n    private updateMetricsForInstance(metrics: MetricsMap,\r\n        funcName: string,\r\n        runtimeStatus: RuntimeStatus,\r\n        durationInMs: number,\r\n        history: HistoryEvent[],\r\n        cancelToken: CancelToken): Promise<void> {\r\n        \r\n        if (!metrics[funcName]) {\r\n            metrics[funcName] = new MetricsItem();\r\n        }\r\n\r\n        switch (runtimeStatus) {\r\n            case 'Completed':\r\n                metrics[funcName].completed++;\r\n                break;\r\n            case 'Running':\r\n            case 'Pending':\r\n            case 'ContinuedAsNew':\r\n                metrics[funcName].running++;\r\n                break;\r\n            case 'Failed':\r\n                metrics[funcName].failed++;\r\n                break;\r\n            default:\r\n                metrics[funcName].other++;\r\n                break;\r\n        }\r\n\r\n        if (metrics[funcName].duration < durationInMs) {\r\n            metrics[funcName].duration = durationInMs;\r\n        }\r\n\r\n        const promises: Promise<void>[] = [];\r\n\r\n        for (var event of history) {\r\n\r\n            const subFuncName = event.FunctionName ?? event.Name;\r\n\r\n            switch (event.EventType) {\r\n                case 'SubOrchestrationInstanceCreated':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        promises.push(this._loadHistory(event.SubOrchestrationId).then(subHistory => {\r\n\r\n                            if (!cancelToken.isCancelled) {\r\n                                return this.updateMetricsForInstance(metrics, subFuncName, \"Running\", 0, subHistory, cancelToken);\r\n                            }\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const durationInMs = new Date(event.Timestamp).getTime() - new Date(event.ScheduledTime).getTime();\r\n\r\n                        promises.push(this._loadHistory(event.SubOrchestrationId).then(subHistory => {\r\n\r\n                            if (!cancelToken.isCancelled) {\r\n                                return this.updateMetricsForInstance(metrics, subFuncName, \"Completed\", durationInMs, subHistory, cancelToken);\r\n                            }\r\n                        }));\r\n                    }\r\n                    \r\n                    break;\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const durationInMs = new Date(event.Timestamp).getTime() - new Date(event.ScheduledTime).getTime();\r\n\r\n                        promises.push(this._loadHistory(event.SubOrchestrationId).then(subHistory => {\r\n\r\n                            if (!cancelToken.isCancelled) {\r\n                                return this.updateMetricsForInstance(metrics, subFuncName, \"Failed\", durationInMs, subHistory, cancelToken);\r\n                            }\r\n                        }));\r\n                    }\r\n                \r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    if (!metrics[subFuncName]) {\r\n                        metrics[subFuncName] = new MetricsItem();\r\n                    }\r\n\r\n                    metrics[subFuncName].completed++;\r\n\r\n                    if (metrics[subFuncName].duration < event.DurationInMs) {\r\n                        metrics[event.FunctionName].duration = event.DurationInMs;\r\n                    }\r\n                    \r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    if (!metrics[subFuncName]) {\r\n                        metrics[subFuncName] = new MetricsItem();\r\n                    }\r\n\r\n                    metrics[subFuncName].failed++;\r\n\r\n                    if (metrics[subFuncName].duration < event.DurationInMs) {\r\n                        metrics[subFuncName].duration = event.DurationInMs;\r\n                    }\r\n                    \r\n                    break;\r\n                case 'TaskScheduled':\r\n\r\n                    if (!metrics[subFuncName]) {\r\n                        metrics[subFuncName] = new MetricsItem();\r\n                    }\r\n\r\n                    metrics[subFuncName].running++;\r\n                    \r\n                    break;\r\n            }                   \r\n        }\r\n\r\n        return Promise.all(promises) as any;\r\n    }\r\n    \r\n    private render(): Promise<void> {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            try {\r\n                const diagramCode = buildFunctionDiagramCode(this._traversalResult.functions, this._traversalResult.proxies,\r\n                    {\r\n                        doNotRenderFunctions: !this._renderFunctions,\r\n                        doNotRenderProxies: !this._renderProxies\r\n                    });\r\n    \r\n                if (!diagramCode) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n    \r\n                this._diagramCode = `graph LR\\n${diagramCode}`;\r\n    \r\n                mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n    \r\n                    this._diagramSvg = this.applyIcons(svg);\r\n\r\n                    resolve();\r\n                });\r\n    \r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n}","import mermaid from 'mermaid';\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { dfmContextInstance } from '../../DfmContext';\r\n\r\ntype LineTextAndMetadata = { nextLine: string, functionName?: string, instanceId?: string, parentInstanceId?: string, duration?: number, widthPercentage?: number };\r\n\r\n// State of Gantt Diagram tab on OrchestrationDetails view\r\nexport class GanttDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Gantt Chart\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.renderOrchestration(details.instanceId, details.name, history, true)).then(arrayOfArrays => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                const lines = arrayOfArrays.flat();\r\n                const linesWithMetadata = lines.filter(l => !!l.functionName);\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title ${details.name}(${details.instanceId}) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss.SSS \\n' +\r\n                    lines.map(item => item.nextLine).join('');\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n\r\n                        svg = this.injectFunctionNameAttributes(svg, linesWithMetadata);\r\n                        svg = this.adjustIntervalsSmallerThanOneSecond(svg, linesWithMetadata);\r\n\r\n                        this._diagramSvg = svg;\r\n\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Adds data-function-name attributes to diagram lines, so that Function names can be further used by rendering\r\n    private injectFunctionNameAttributes(svg: string, linesWithMetadata: LineTextAndMetadata[]): string {\r\n        \r\n        return svg.replace(new RegExp(`<(rect|text) id=\"task([0-9]+)(-text)?\"`, 'gi'), (match, tagName, taskIndex) => {\r\n\r\n            const oneBasedLineIndex = parseInt(taskIndex);\r\n\r\n            if (oneBasedLineIndex <= 0 || oneBasedLineIndex > linesWithMetadata.length) {\r\n                return match;\r\n            }\r\n\r\n            const lineMetadata = linesWithMetadata[oneBasedLineIndex - 1];\r\n            if (!lineMetadata.functionName) {\r\n                return match;\r\n            }\r\n\r\n            return match + ` data-function-name=\"${lineMetadata.functionName}\"`;\r\n        });\r\n    }\r\n\r\n    // Workaround for mermaid being unable to render intervals shorter than 1 second\r\n    private adjustIntervalsSmallerThanOneSecond(svg: string, linesWithMetadata: LineTextAndMetadata[]): string {\r\n\r\n        return svg.replace(new RegExp(`<rect id=\"task([0-9]+)\" [^>]+ width=\"([0-9]+)\"`, 'gi'), (match, taskIndex, activityWidth) => {\r\n\r\n            const oneBasedLineIndex = parseInt(taskIndex);\r\n\r\n            if (oneBasedLineIndex <= 0 || oneBasedLineIndex > linesWithMetadata.length) {\r\n                return match;\r\n            }\r\n\r\n            const activityMetadata = linesWithMetadata[oneBasedLineIndex - 1];\r\n            if (!activityMetadata.parentInstanceId || !activityMetadata.widthPercentage || (activityMetadata.duration > 10000)) {\r\n                return match;\r\n            }\r\n\r\n            // now we need to figure out the width (in pixels) of parent orchestration line\r\n            const orchIndex = linesWithMetadata.findIndex(l => l.instanceId === activityMetadata.parentInstanceId);\r\n            if (orchIndex < 0) {\r\n                return match;\r\n            }\r\n\r\n            const orchMatch = new RegExp(`<rect id=\"task${orchIndex + 1}\" [^>]+ width=\"([0-9]+)\"`, 'i').exec(svg);\r\n            if (!orchMatch) {\r\n                return match;\r\n            }\r\n\r\n            const orchWidth = parseInt(orchMatch[1]);\r\n            const newActivityWidth = activityMetadata.widthPercentage > 1 ? orchWidth : Math.ceil(orchWidth * activityMetadata.widthPercentage);\r\n\r\n            return match.replace(`width=\"${activityWidth}\"`, `width=\"${newActivityWidth.toFixed(0)}\"`)\r\n        });\r\n    }\r\n\r\n    private renderOrchestration(orchestrationId: string, orchestrationName: string, historyEvents: HistoryEvent[], isParentOrchestration: boolean):\r\n        Promise<LineTextAndMetadata[]>[] {\r\n\r\n        const results: Promise<LineTextAndMetadata[]>[] = [];\r\n\r\n        const startedEvent = historyEvents.find(event => event.EventType === 'ExecutionStarted');\r\n        const completedEvent = historyEvents.find(event => event.EventType === 'ExecutionCompleted');\r\n\r\n        var needToAddAxisFormat = isParentOrchestration;\r\n        var nextLine: string;\r\n        var orchDuration = 0;\r\n\r\n        if (!!startedEvent && !!completedEvent) {\r\n\r\n            if (needToAddAxisFormat) {\r\n\r\n                const longerThanADay = completedEvent.DurationInMs > 86400000;\r\n                nextLine = longerThanADay ? 'axisFormat %Y-%m-%d %H:%M \\n' : 'axisFormat %H:%M:%S \\n';\r\n                results.push(Promise.resolve([{ nextLine }]));\r\n                needToAddAxisFormat = false;\r\n            }\r\n            \r\n            nextLine = isParentOrchestration ? '' : `section ${orchestrationName}(${this.escapeTitle(orchestrationId)}) \\n`;\r\n\r\n            var lineName = this.formatDuration(completedEvent.DurationInMs);\r\n            if (!lineName) {\r\n                lineName = this.formatLineName(orchestrationName);\r\n            }\r\n\r\n            nextLine += `${lineName}: ${isParentOrchestration ? '' : 'active,'} ${this.formatDateTime(startedEvent.Timestamp)}, ${this.formatDurationInSeconds(completedEvent.DurationInMs)} \\n`;\r\n            results.push(Promise.resolve([{ nextLine, functionName: orchestrationName, instanceId: orchestrationId }]));\r\n            \r\n            orchDuration = completedEvent.DurationInMs;\r\n        }\r\n\r\n        if (needToAddAxisFormat) {\r\n\r\n            nextLine = 'axisFormat %H:%M:%S \\n';\r\n            results.push(Promise.resolve([{ nextLine }]));\r\n        }\r\n\r\n        for (var event of historyEvents) {\r\n\r\n            var eventTimestamp = event.ScheduledTime;\r\n\r\n            // Sometimes activity timestamp might appear to be earlier than orchestration start (due to machine time difference, I assume),\r\n            // and that breaks the diagram\r\n            if (!!startedEvent && (Date.parse(eventTimestamp) < Date.parse(startedEvent.Timestamp))) {\r\n                eventTimestamp = startedEvent.Timestamp;\r\n            }\r\n        \r\n            switch (event.EventType) {\r\n                case 'SubOrchestrationInstanceCompleted':\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n                        \r\n                        results.push(new Promise<LineTextAndMetadata[]>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.renderOrchestration(subOrchestrationId, subOrchestrationName, history, false)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.flat());\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve([{ nextLine: `%% Failed to load ${this.formatLineName(subOrchestrationName)}. ${err.message} \\n` }]);\r\n                            });\r\n                        }));\r\n\r\n                        nextLine = `section ${orchestrationName}(${this.escapeTitle(orchestrationId)}) \\n`;\r\n                        results.push(Promise.resolve([{ nextLine }]));\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    nextLine = `${this.formatLineName(event.FunctionName)} ${this.formatDuration(event.DurationInMs)}: done, ${this.formatDateTime(eventTimestamp)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve([{\r\n                        nextLine,\r\n                        functionName: event.FunctionName,\r\n                        parentInstanceId: orchestrationId,\r\n                        duration: event.DurationInMs,\r\n                        widthPercentage: orchDuration ? event.DurationInMs / orchDuration : 0\r\n                    }]));\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `${this.formatLineName(event.FunctionName)} ${this.formatDuration(event.DurationInMs)}: crit, ${this.formatDateTime(eventTimestamp)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve([{\r\n                        nextLine,\r\n                        functionName: event.FunctionName,\r\n                        parentInstanceId: orchestrationId,\r\n                        duration: event.DurationInMs,\r\n                        widthPercentage: orchDuration ? event.DurationInMs / orchDuration : 0\r\n                    }]));\r\n\r\n                    break;\r\n                    case 'TimerFired':\r\n\r\n                        nextLine = `[TimerFired]: done, ${this.formatDateTime(event.Timestamp)}, 1s \\n`;\r\n                        results.push(Promise.resolve([{\r\n                            nextLine,\r\n                            functionName: orchestrationName,\r\n                            parentInstanceId: orchestrationId,\r\n                            duration: 1,\r\n                            widthPercentage: 0.0001\r\n                        }]));\r\n    \r\n                        break;\r\n                }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatDateTime(utcDateTimeString: string): string {\r\n\r\n        if (!dfmContextInstance.showTimeAsLocal) {\r\n            return utcDateTimeString.substr(0, 23);\r\n        }\r\n\r\n        return moment(utcDateTimeString).format('YYYY-MM-DDTHH:mm:ss.SSS')\r\n    }\r\n\r\n    private formatLineName(name: string): string {\r\n\r\n        return name.replace(/:/g, '-');\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { DurableOrchestrationStatus } from '../DurableOrchestrationStatus';\r\nimport { ICustomTabState, CustomTabTypeEnum } from './ICustomTabState';\r\nimport { CancelToken } from '../../CancelToken';\r\n\r\n// State of a custom liquid markup tab on OrchestrationDetails view\r\nexport class LiquidMarkupTabState implements ICustomTabState {\r\n\r\n    name: string = \"\";\r\n    readonly description = \"\";\r\n    readonly tabType = CustomTabTypeEnum.RawHtml;\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._rawHtml; };\r\n\r\n    constructor(private _orchestrationId: string, private _backendClient: IBackendClient) {\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/custom-tab-markup('${this.name}')`;\r\n        return this._backendClient.call('POST', uri).then(response => {\r\n\r\n            if (!cancelToken.isCancelled) {\r\n               \r\n                this._rawHtml = response;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _rawHtml: string;\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from '../ErrorMessageState';\r\nimport { IBackendClient } from '../../services/IBackendClient';\r\nimport { ITypedLocalStorage } from '../ITypedLocalStorage';\r\nimport { SequenceDiagramTabState } from './SequenceDiagramTabState';\r\nimport { FunctionGraphTabState } from './FunctionGraphTabState';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { GanttDiagramTabState } from './GanttDiagramTabState';\r\nimport { LiquidMarkupTabState } from './LiquidMarkupTabState';\r\nimport { CancelToken } from '../../CancelToken';\r\nimport { FunctionsMap } from '../az-func-as-a-graph/FunctionsMap';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get tabIndex(): number { return this._tabIndex; }\r\n    set tabIndex(val: number) {\r\n\r\n        if (this._tabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._tabIndex = val;\r\n        this._localStorage.setItem('tabIndex', val.toString());\r\n\r\n        if (!!this.selectedTab) {\r\n\r\n            this.loadCustomTab();\r\n\r\n        } else if (!this._history.length) {\r\n\r\n            this.loadHistory();\r\n        }\r\n    }\r\n\r\n    get selectedTab(): ICustomTabState {\r\n        return !this._tabIndex ? null : this._tabStates[this._tabIndex - 1];\r\n    }\r\n\r\n    @computed\r\n    get details(): DurableOrchestrationStatus { return this._details; }\r\n\r\n    @computed\r\n    get history(): HistoryEvent[] { return this._history; }\r\n\r\n    @computed\r\n    get historyTotalCount(): number { return this._historyTotalCount; }\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get loadInProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress || this.loadInProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        this.newCustomStatus = !!this._details.customStatus ? JSON.stringify(this._details.customStatus) : '';\r\n    }\r\n\r\n    @computed\r\n    get restartDialogOpen(): boolean { return this._restartDialogOpen; }\r\n    set restartDialogOpen(val: boolean) {\r\n        this._restartDialogOpen = val;\r\n        this.restartWithNewInstanceId = true;\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this._details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this._details.customStatus);\r\n    }\r\n\r\n    @computed\r\n    get functionNames(): { [name: string]: any } { return this._functionMap; };\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n    @observable\r\n    restartWithNewInstanceId: boolean = true;\r\n\r\n    @observable\r\n    longJsonDialogState = {};\r\n\r\n    @computed\r\n    get tabStates(): ICustomTabState[] { return this._tabStates; }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _isFunctionGraphAvailable: boolean,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const tabIndexString = this._localStorage.getItem('tabIndex');\r\n        if (!!tabIndexString) {\r\n            this._tabIndex = Number(tabIndexString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this._history = [];\r\n            this._details = new DurableOrchestrationStatus();\r\n            this._tabStates = [];\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    restart() {\r\n        this.restartDialogOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/restart`;\r\n        const requestBody = { restartWithNewInstanceId: this.restartWithNewInstanceId };\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to restart: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse event data: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse custom status: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to set custom status: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) { // We might end up here, if next timer occurs while a custom tab is still loading\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n            return;\r\n        }\r\n\r\n        this._inProgress = true;\r\n        this._noMorePagesToLoad = false;\r\n\r\n        if (!this._autoRefresh && (!this.selectedTab)) {\r\n            \r\n            this._history = [];\r\n            this._historyTotalCount = 0;\r\n        }\r\n\r\n        const functionMapPromise = !!this._isFunctionGraphAvailable ? this._backendClient.call('GET', `/function-map`) : Promise.resolve(null);\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n        return Promise.all([this._backendClient.call('GET', uri), functionMapPromise]).then(responses => {\r\n        \r\n            this._details = responses[0];\r\n            const traversalResult = responses[1];\r\n\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n\r\n            var tabStateIndex = 0;\r\n\r\n            // Loading sequence diagram tab\r\n            if (this._details.entityType === \"Orchestration\") {\r\n               \r\n                if (this._tabStates.length <= tabStateIndex) {\r\n                    this._tabStates.push(new SequenceDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                    this._tabStates.push(new GanttDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                }\r\n                tabStateIndex += 2;\r\n            }\r\n\r\n            // Functions Graph tab\r\n            if (!!traversalResult) {\r\n\r\n                this._functionMap = traversalResult.functions;\r\n\r\n                const functionName = DurableOrchestrationStatus.getFunctionName(this._details);\r\n        \r\n                // Entities have their names lowered, so we need to do a case-insensitive match\r\n                const shownFunctionNames = Object.keys(traversalResult.functions).map(fn => fn.toLowerCase());\r\n                \r\n                // Only showing Functions Graph, if currently opened instance is shown on it\r\n                if (shownFunctionNames.includes(functionName.toLowerCase())) {\r\n                    \r\n                    if (this._tabStates.length <= tabStateIndex) {\r\n                        this._tabStates.push(new FunctionGraphTabState(this._backendClient, traversalResult, (orchId) => this.loadAllHistory(orchId)));\r\n                    }\r\n                    tabStateIndex++;\r\n                }\r\n            }\r\n\r\n            // Loading custom tabs\r\n            if (!!this._details.tabTemplateNames) {\r\n                for (var templateName of this._details.tabTemplateNames) {\r\n\r\n                    if (this._tabStates.length <= tabStateIndex) {\r\n                        this._tabStates.push(new LiquidMarkupTabState(this._orchestrationId, this._backendClient));\r\n                    }\r\n                    this._tabStates[tabStateIndex].name = templateName;\r\n                    tabStateIndex++;\r\n                }                \r\n            }\r\n\r\n            // Ensuring tab index does not go out of sync\r\n            if (this._tabIndex < 0 || this._tabIndex > this._tabStates.length) {\r\n                this._tabIndex = 0;\r\n            }\r\n\r\n            this._inProgress = false;\r\n\r\n            if (!this.selectedTab) {\r\n                \r\n                this.loadHistory(!!this._autoRefresh);\r\n\r\n            } else {\r\n\r\n                this.loadCustomTab();\r\n            }\r\n            \r\n        }, err => {\r\n            this._inProgress = false;\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadHistory(isAutoRefresh: boolean = false): void {\r\n\r\n        if (!!this.inProgress || !!this.selectedTab || !!this._noMorePagesToLoad) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._history.length;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/history?$top=${this._pageSize}&$skip=${skip}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            this._historyTotalCount = response.totalCount;\r\n\r\n            if (isAutoRefresh) {\r\n                this._history = response.history;\r\n            } else {\r\n                this._history.push(...response.history);\r\n\r\n                if (response.history.length < this._pageSize) {\r\n\r\n                    // Stop the infinite scrolling\r\n                    this._noMorePagesToLoad = true;\r\n                }\r\n            }\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Failed to load history: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    gotoFunctionCode(functionName: string): void {\r\n\r\n        if (this.backendClient.isVsCode) {\r\n            \r\n            this.backendClient.call('GotoFunctionCode', functionName).then(() => {}, err => {\r\n                console.log(`Failed to goto function code: ${err.message}`);\r\n            });\r\n    \r\n        } else {\r\n\r\n            var func = this._functionMap[functionName];\r\n\r\n            if (!!func && !!func.filePath) {\r\n                window.open(func.filePath);\r\n            }\r\n        }\r\n    }\r\n\r\n    showFunctionsGraph(): void {\r\n\r\n        this.backendClient.call('VisualizeFunctionsAsAGraph', '').then(() => {}, err => {\r\n            console.log(`Failed to goto functions graph: ${err.message}`);\r\n        });\r\n    }\r\n\r\n    private loadCustomTab(): void {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        this.selectedTab.load(this._details, cancelToken).then(() => {}, err => { \r\n                \r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Failed to load tab: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    private setAutoRefresh(): void {\r\n\r\n        if (!this._autoRefresh) {\r\n            return;\r\n        }\r\n\r\n        if (!!this._autoRefreshToken) {\r\n            clearTimeout(this._autoRefreshToken);\r\n        }\r\n        this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n    }\r\n\r\n    private loadAllHistory(orchestrationId: string): Promise<HistoryEvent[]> {\r\n\r\n        const uri = `/orchestrations('${orchestrationId}')/history`;\r\n        return this._backendClient.call('GET', uri).then(response => response.history);\r\n    }\r\n\r\n    @observable\r\n    private _tabStates: ICustomTabState[] = [];\r\n\r\n    @observable\r\n    private _details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n    @observable\r\n    private _history: HistoryEvent[] = [];\r\n    @observable\r\n    private _tabIndex: number = 0;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n    @observable\r\n    private _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _restartDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _historyTotalCount: number = 0;\r\n    @observable\r\n    private _functionMap: FunctionsMap = {};\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 200;\r\n}","import { observable, computed } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\nimport { buildFunctionDiagramCode } from './az-func-as-a-graph/buildFunctionDiagramCode';\r\nimport { FunctionGraphStateBase } from './FunctionGraphStateBase';\r\n\r\n// State of FunctionGraph view\r\nexport class FunctionGraphState extends FunctionGraphStateBase {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get functionsLoaded(): boolean { return !!this._traversalResult; };\r\n\r\n    @computed\r\n    get renderFunctions(): boolean { return this._renderFunctions; };\r\n    set renderFunctions(val: boolean) {\r\n        this._renderFunctions = val;\r\n        this.render();\r\n    };\r\n\r\n    @computed\r\n    get renderProxies(): boolean { return this._renderProxies; };\r\n    set renderProxies(val: boolean) {\r\n        this._renderProxies = val;\r\n        this.render();\r\n    };\r\n    \r\n    render() {\r\n        \r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n        this.errorMessage = '';\r\n\r\n        if (!this._traversalResult) {\r\n            return;\r\n        }\r\n\r\n        this._inProgress = true;\r\n        try {\r\n            const diagramCode = buildFunctionDiagramCode(this._traversalResult.functions, this._traversalResult.proxies,\r\n                {\r\n                    doNotRenderFunctions: !this._renderFunctions,\r\n                    doNotRenderProxies: !this._renderProxies\r\n                });\r\n\r\n            if (!diagramCode) {\r\n                this._inProgress = false;\r\n                return;\r\n            }\r\n\r\n            this._diagramCode = `graph LR\\n${diagramCode}`;\r\n\r\n            mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n\r\n                this._diagramSvg = this.applyIcons(svg);\r\n\r\n                this._inProgress = false;\r\n            });\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to render: ${err.message}`;\r\n            this._inProgress = false;\r\n        }\r\n    }\r\n\r\n    load() {\r\n\r\n        if (this._inProgress) {\r\n            return;\r\n        }\r\n\r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        this._inProgress = true;\r\n        this.errorMessage = '';\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n        this._traversalResult = null;\r\n\r\n        this._backendClient.call('GET', '/function-map').then(response => {\r\n\r\n            this._traversalResult = response;\r\n            this.render();\r\n\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to traverse: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { observable, computed } from 'mobx'\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Clean Entity Storage Dialog\r\nexport class CleanEntityStorageDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(isOpen: boolean) {\r\n        this._dialogOpen = isOpen;\r\n\r\n        if (isOpen) {\r\n            this._response = null;\r\n            this.removeEmptyEntities = true;\r\n            this.releaseOrphanedLocks = true;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get response(): CleanEntityStorageResponse | null { return this._response; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return true;\r\n    };\r\n\r\n    @observable\r\n    removeEmptyEntities: boolean;\r\n    @observable\r\n    releaseOrphanedLocks: boolean;\r\n    \r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    clean() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/clean-entity-storage', {\r\n            removeEmptyEntities: this.removeEmptyEntities,\r\n            releaseOrphanedLocks: this.releaseOrphanedLocks\r\n        }).then(response => {\r\n            this._response = response;\r\n        }, err => {\r\n            this.errorMessage = `Clean Entity Storage failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _response: CleanEntityStorageResponse | null = null;\r\n}\r\n\r\nexport class CleanEntityStorageResponse\r\n{\r\n    numberOfEmptyEntitiesRemoved: number;\r\n    numberOfOrphanedLocksRemoved: number;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { QueryString } from './QueryString';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n\r\n        // Also placing into query string\r\n        const queryString = new QueryString();\r\n        queryString.values[fieldName] = value;\r\n        queryString.apply();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        // Also placing into query string\r\n        const queryString = new QueryString();\r\n\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n\r\n                delete queryString.values[item.fieldName];\r\n\r\n            } else {\r\n\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n\r\n                queryString.values[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        queryString.apply();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        // Query string should take precedence\r\n        const queryString = new QueryString();\r\n        if (!!queryString.values[fieldName]) {\r\n            return queryString.values[fieldName];\r\n        }\r\n\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n\r\n        // Also dropping from query string\r\n        const queryString = new QueryString();\r\n        delete queryString.values[fieldName];\r\n        queryString.apply();\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return null; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setCustomHandlers(purgeHistoryHandler: () => void, cleanEntityStorageHandler: () => void) {\r\n\r\n        this._handlers['purgeHistory'] = purgeHistoryHandler;\r\n        this._handlers['cleanEntityStorage'] = cleanEntityStorageHandler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const StateFromVsCode: {};\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n        this._state = StateFromVsCode[this._prefix];\r\n        if (!this._state) {\r\n            this._state = {};\r\n        }\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        this._state[fieldName] = value\r\n        this.save();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete this._state[item.fieldName];\r\n            } else {\r\n                this._state[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        this.save();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        return this._state[fieldName];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete this._state[fieldName];\r\n        this.save();\r\n    }\r\n\r\n    private readonly _state: any;\r\n\r\n    private save(): void {\r\n        this._vsCodeApi.postMessage({ method: 'PersistState', key: this._prefix, data: this._state });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport './index.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\n\r\nimport { Main } from './components/Main';\r\nimport { MainState } from './states/MainState';\r\nimport { Theme } from './theme';\r\n\r\ndocument.body.style.backgroundColor = Theme.palette.background.paper;\r\n\r\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\r\nconst appState = new MainState();\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={Theme} >\r\n        <Main state={appState} />\r\n    </ThemeProvider>,\r\n    document.getElementById('root') as HTMLElement\r\n);"],"sourceRoot":""}