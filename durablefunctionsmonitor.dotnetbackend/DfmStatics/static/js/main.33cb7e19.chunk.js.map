{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/DurableOrchestrationStatus.ts","states/ErrorMessageState.ts","services/BackendClient.ts","states/LoginState.ts","theme.ts","components/OrchestrationLink.tsx","CancelToken.ts","states/ResultsListTabState.ts","states/MermaidDiagramStateBase.ts","states/ResultsGanttDiagramTabState.ts","states/ResultsHistogramTabState.ts","states/OrchestrationsState.ts","components/SaveAsSvgButton.tsx","components/shared.ts","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/FunctionGraph.tsx","components/PurgeHistoryDialog.tsx","components/CleanEntityStorageDialog.tsx","components/Main.tsx","states/MainMenuState.ts","states/MermaidDiagramTabState.ts","states/SequenceDiagramTabState.ts","states/GanttDiagramTabState.ts","states/LiquidMarkupTabState.ts","states/OrchestrationDetailsState.ts","states/buildFunctionDiagramCode.ts","states/FunctionGraphState.ts","states/PurgeHistoryDialogState.ts","states/CleanEntityStorageDialogState.ts","states/QueryString.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","states/MainState.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","LoginIcon","observer","React","render","state","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","fontSize","DialogContentText","allowedTaskHubNames","DialogTitle","List","hubName","ListItem","button","Link","href","locationPathName","CircularProgress","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","key","aria-label","MainMenu","componentDidMount","setWindowTitle","showConnectionParamsDialog","showPurgeHistoryDialog","showCleanEntityStorageDialog","connectionParamsDialogOpen","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","label","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","value","onChange","target","connectionString","DialogActions","saveConnectionParams","isDirty","DateTimeHelpers","t","isValid","result","moment","toISOString","slice","utc","isAfter","MinMoment","isBefore","MaxMoment","dt","HistoryEventFields","RuntimeStatuses","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","tabTemplateNames","DurableOrchestrationStatusFields","ErrorMessageState","observable","RoutePrefix","DfmRoutePrefix","BackendUri","process","BackendClient","_getTaskHubName","constructor","_getAuthorizationHeaderAsync","call","method","url","data","Promise","reject","then","headers","axios","request","r","OrchestrationsPathPrefix","LoginState","_isLoggedIn","_userName","_taskHubName","_allowedTaskHubNames","window","location","pathname","pos","lastIndexOf","substring","endsWith","tryGetTaskHubName","toLowerCase","origin","substr","length","super","_aadApp","defaults","maxRedirects","login","uri","get","response","loginWithEasyAuthConfig","err","replace","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","console","log","idToken","rawIdToken","Authorization","acquireTokenRedirect","config","interceptors","use","reload","initializeTaskHubNameAndConfirmLogin","Msal","authority","redirectUri","rootUri","handleRedirectCallback","authErr","accountState","errorCode","account","getAccount","loginRedirect","hubNames","pathParts","split","filter","p","computed","colorTheme","REACT_APP_COLOR_THEME","DfmClientConfig","theme","Theme","createMuiTheme","palette","type","CustomTabStyle","backgroundColor","RuntimeStatusToStyle","status","hexToRGBA","error","light","success","warning","background","paper","hex","alpha","parseInt","toFixed","OrchestrationLink","backendClient","isVsCode","onLinkClicked","orchestrationId","routePrefixAndTaskHubName","extraSanitizeHrefComponent","s","CancelToken","ResultsListTabState","_hiddenColumns","_orchestrations","_orderByDirection","_orderBy","val","resetOrderBy","_refresh","_backendClient","_localStorage","_noMorePagesToLoad","_pageSize","orderByString","getItem","orderByDirectionString","hiddenColumnsString","hideColumn","push","setItem","join","unhide","removeItem","reset","load","filterClause","cancelToken","isAutoRefresh","setItems","fieldName","skip","orderByClause","orderByDirection","hiddenColumnsClause","isCancelled","MermaidDiagramStateBase","initMermaidWhenNeeded","_mermaidInitialized","mermaid","initialize","startOnLoad","securityLevel","sequence","noteMargin","boxMargin","boxTextMargin","flowchart","curve","useMaxWidth","htmlLabels","escapeTitle","formatDuration","durationInMs","isNaN","days","Math","floor","c","hours","minutes","seconds","formatDateTime","timestamp","formatDurationInSeconds","round","ResultsGanttDiagramTabState","_diagramSvg","_diagramCode","instances","all","renderDiagram","sequenceLines","svg","results","prevSectionName","sectionNr","instance","nextLine","sectionName","Date","getTime","ResultsHistogramTabState","_zoomedIn","_histograms","_numOfInstancesShown","_counts","_filterState","_originalTimeInterval","_applyingZoom","_numOfIntervals","timeFrom","timeTill","timeRange","startTime","valueOf","bucketLength","ceil","loadNextBatch","applyZoom","left","right","cancel","from","till","reloadOrchestrations","resetZoom","pageNumber","instanceTypeName","emptyHistogram","i","x0","x","y","instanceStartPos","FilterOperatorEnum","ResultsTabEnum","TimeRangeEnum","OrchestrationsState","_tabIndex","toString","_tabStates","_cancelToken","_autoRefresh","loadOrchestrations","_timeRange","LastMinute","subtract","Last10Minutes","LastHour","Last24Hours","Last7Days","Last30Days","Last90Days","_timeFrom","Custom","listState","_timeTill","_filterValue","_filterOperator","_filteredColumn","_showStatuses","isStatusChecked","includes","setStatusChecked","checked","indexOf","splice","_refreshToken","clearTimeout","setTimeout","_delayedRefreshDelay","rescheduleDelayedRefresh","_oldFilterValue","momentFrom","_oldTimeFrom","_oldTimeTill","timeFromString","timeTillString","timeRangeString","filteredColumnString","filterOperatorString","filterValueString","showStatusesString","JSON","parse","autoRefreshString","Number","tabIndexString","tabIndex","applyTimeFrom","isValidMoment","applyTimeTill","applyFilterValue","stringify","encodedFilterValue","encodeURIComponent","Equals","StartsWith","Contains","NotEquals","NotStartsWith","NotContains","selectedTabState","finally","SaveAsSvgButton","variant","fileName","URL","createObjectURL","Blob","download","getStyledSvg","renderJson","json","Orchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Histogram","ctrlKey","keyCode","AppBar","position","Toolbar","Grid","container","item","xs","size","timeRangeToString","ampm","autoOk","invalidDateMessage","format","momentAsUtc","onBlur","onAccept","onKeyPress","handleKeyPress","FormControl","Checkbox","timeTillEnabled","placeholder","InputLabel","htmlFor","Select","filteredColumn","inputProps","col","filterOperator","filterValue","FormGroup","showStatuses","onScroll","FormControlLabel","control","style","flex","autoRefresh","Tabs","ev","Tab","FormHelperText","orchestrations","hiddenColumns","component","Paper","elevation","renderTable","showLastEventColumn","renderEmptyTable","renderHistogram","Gantt","renderGanttChart","histogramState","typeNames","histograms","sort","numOfInstancesShown","zoomedIn","innerWidth","xType","stackBy","top","tickTotal","tickFormat","formatTimeTick","typeName","stroke","getColorCodeForInstanceType","drag","enableY","onDragEnd","area","colors","items","counts","orientation","ganttState","rawHtml","dangerouslySetInnerHTML","__html","navigator","clipboard","writeText","diagramCode","visibleColumns","f","Table","TableHead","TableRow","onlyOneVisibleColumnLeft","TableCell","onMouseEnter","columnUnderMouse","onMouseLeave","TableSortLabel","active","orderBy","direction","TableBody","orchestration","rowStyle","cellStyle","verticalAlign","InputBase","multiline","rowsMax","instanceType","hashCode","charCodeAt","m","second","millisecond","event","preventDefault","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","raiseEventDialogOpen","purge","eventName","rows","eventData","raiseEvent","DurableEntityFields","details","runtimeStatusStyle","sm","md","zeroMinWidth","OrchestrationButtons","restartDialogOpen","rewindConfirmationOpen","terminateConfirmationOpen","setCustomStatusDialogOpen","rewind","terminate","newCustomStatus","setCustomStatus","isCustomStatusDirty","restartWithNewInstanceId","restart","OrchestrationFields","loadHistory","totalItems","historyTotalCount","history","itemsShown","events","index","Timestamp","EventType","SubOrchestrationId","FunctionName","Name","ScheduledTime","Result","Details","OrchestrationDetails","loadDetails","loadInProgress","tabStates","tabState","selectedTab","isMermaidDiagram","description","FunctionGraph","componentDidUpdate","svgElement","getElementById","mountClickEventToFunctionNodes","getElementsByClassName","projectPath","diagramSvg","el","match","exec","nodes","node","removeEventListener","onFunctionNodeClicked","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","RadioGroup","row","Radio","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","CleanEntityStorageDialog","removeEmptyEntities","releaseOrphanedLocks","clean","numberOfEmptyEntitiesRemoved","numberOfOrphanedLocksRemoved","Main","utils","MomentUtils","loginState","mainMenuState","src","Breadcrumbs","taskHubName","orchestrationDetailsState","Autocomplete","freeSolo","options","isExactMatch","suggestions","typedInstanceId","newValue","goto","renderInput","params","orchestrationsState","functionGraphState","purgeHistoryDialogState","cleanEntityStorageDialogState","MainMenuState","_inProgress","_isReadOnly","_oldConnectionString","_oldHubName","_purgeHistoryDialogState","_cleanEntityStorageDialogState","isReadOnly","alert","accountName","version","MermaidDiagramTabState","_loadHistory","buildDiagram","SequenceDiagramTabState","getSequenceForOrchestration","orchestrationName","parentOrchestrationName","historyEvents","externalActor","formatTimestamp","subOrchestrationId","subOrchestrationName","maxDurationInMs","DurationInMs","j","GanttDiagramTabState","renderOrchestration","isParentOrchestration","startedEvent","find","completedEvent","needToAddAxisFormat","lineName","LiquidMarkupTabState","_rawHtml","_orchestrationId","OrchestrationDetailsState","loadCustomTab","_history","_details","_historyTotalCount","_raiseEventDialogOpen","_setCustomStatusDialogOpen","_restartDialogOpen","_autoRefreshToken","requestBody","setAutoRefresh","tabStateIndex","orchId","loadAllHistory","templateName","totalCount","space","getTriggerBindingText","binding","methods","route","path","databaseName","collectionName","eventHubName","queueName","topicName","subscriptionName","schedule","getBindingText","FunctionGraphState","_projectPath","funcs","functions","func","triggerBinding","inputBindings","outputBindings","nodeCode","bindings","f1","f2","s1","isCalledBy","s2","calledBy","inputBinding","outputBinding","isSignalledBy","signalledBy","signalName","isCalledByItself","buildFunctionDiagramCode","applyIcons","pathToIcons","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","statuses","Array","values","has","included","add","delete","CleanEntityStorageDialogState","isOpen","_response","QueryString","_values","pairs","search","pair","decodeURIComponent","apply","queryString","replaceState","TypedLocalStorage","_prefix","localStorage","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","random","postMessage","setCustomHandlers","purgeHistoryHandler","cleanEntityStorageHandler","VsCodeTypedLocalStorage","_state","StateFromVsCode","save","MainState","_typedInstanceId","reloadSuggestions","_suggestions","vsCodeApi","acquireVsCodeApi","functionProjectPath","DfmFunctionProjectPath","OrchestrationIdFromVsCode","body","appState","ReactDOM","ThemeProvider"],"mappings":"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","file":"static/js/main.33cb7e19.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 367,\n\t\"./locale.js\": 367\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 675;","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    List, ListItem, Link,\r\n    Menu, MenuItem, Tooltip, Typography, DialogTitle\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage ? (!state.allowedTaskHubNames ? (<>\r\n                            \r\n                            <Container className=\"login-progress\">\r\n                                <CircularProgress />\r\n                            </Container>\r\n                            <DialogContentText>Login in progress...</DialogContentText>\r\n\r\n                        </>) : (<>\r\n                                \r\n                            <DialogTitle>Select your Task Hub</DialogTitle>\r\n                            <List className=\"task-hub-list\">\r\n                                {state.allowedTaskHubNames.map(hubName => (\r\n                                    <ListItem button>\r\n                                        <Link href={state.locationPathName + hubName}>{hubName}</Link>\r\n                                    </ListItem>)\r\n                                )}\r\n                            </List>\r\n                            \r\n                        </>)): (<>\r\n                        \r\n                            <Container className=\"login-progress\">\r\n                                <Error color=\"secondary\" fontSize=\"large\" />\r\n                            </Container>\r\n                            <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            \r\n                        </>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <IconButton color=\"inherit\"\r\n                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n            >\r\n                <MenuIcon/>\r\n            </IconButton>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                <MenuItem onClick={() => state.showCleanEntityStorageDialog()}>Clean Entity Storage...</MenuItem>\r\n            </Menu>\r\n\r\n            <Dialog\r\n                open={state.connectionParamsDialogOpen}\r\n                onClose={() => state.connectionParamsDialogOpen = false}\r\n            >\r\n                <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                    \r\n                    <DialogContentText>\r\n                        {\r\n                            state.isReadonly ?\r\n                                \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively)\" :\r\n                                \"The below values will be saved to local.settings.json file.\"\r\n                        }\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Hub Name\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.hubName}\r\n                        onChange={(evt) => state.hubName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Azure Storage Connection String\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: state.isReadonly }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.connectionString}\r\n                        onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                    />\r\n\r\n                    <ErrorMessage state={state}/>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    {(!state.isReadonly) && (\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    )}\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    public static momentAsUtc(t: moment.Moment): moment.Moment {\r\n        \r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        const result = moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n        result.utc();\r\n        return result;\r\n    }\r\n\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01').utc();\r\n    private static MaxMoment = moment('2100-01-01').utc();\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    FunctionName: string;\r\n    ScheduledTime: string;\r\n    DurationInMs: number;\r\n    SubOrchestrationId: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport const RuntimeStatuses = ['Completed', 'Running', 'Failed', 'Pending', 'Terminated', 'Canceled', 'ContinuedAsNew'] as const;\r\nexport type RuntimeStatus = typeof RuntimeStatuses[number];\r\n\r\nexport type EntityType = 'Orchestration' | 'DurableEntity';\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    tabTemplateNames?: string[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nconst RoutePrefix = !process.env.REACT_APP_BACKEND_BASE_URI ? (!DfmRoutePrefix ? '/' : `/${DfmRoutePrefix}/`) : process.env.REACT_APP_BACKEND_BASE_URI + '/';\r\nexport const BackendUri = RoutePrefix + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return RoutePrefix + this._getTaskHubName(); }\r\n\r\n    constructor(private _getTaskHubName: () => string, private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + '/' + this._getTaskHubName() + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\nexport const OrchestrationsPathPrefix = `/orchestrations/`;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @computed\r\n    get taskHubName(): string { return this._taskHubName;  }\r\n\r\n    @computed\r\n    get allowedTaskHubNames(): string[] { return this._allowedTaskHubNames; }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    // Returns window.location.pathname minus DFM's client-side routing\r\n    get locationPathName(): string {\r\n\r\n        var result = window.location.pathname;\r\n\r\n        const pos = result.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos >= 0) {\r\n            result = result.substring(0, pos);\r\n        }\r\n\r\n        if (!result.endsWith('/')) {\r\n            result += '/';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Returns the site's root URI (everything _before_ Task Hub name)\r\n    get rootUri(): string {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            const pos = window.location.href.toLowerCase().lastIndexOf('/' + hubName.toLowerCase());\r\n            if (pos >= 0) {\r\n                return window.location.href.substring(0, pos);\r\n            }\r\n        }\r\n\r\n        return window.location.origin +\r\n            (\r\n                window.location.pathname.endsWith('/') ?\r\n                    window.location.pathname.substr(0, window.location.pathname.length - 1) :\r\n                    window.location.pathname\r\n            );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Turning redirects off, as we don't ever need them anyway\r\n        axios.defaults.maxRedirects = 0;\r\n\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(response => this.loginWithEasyAuthConfig(response.data), err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        if (!this._aadApp) {\r\n\r\n            window.location.replace('/.auth/logout');\r\n\r\n        } else {\r\n            \r\n            this._aadApp.logout();\r\n        }\r\n    }\r\n\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<undefined>((resolve, reject) => resolve(undefined));\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    @observable\r\n    private _taskHubName: string;\r\n\r\n    @observable\r\n    private _allowedTaskHubNames: string[];\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    private loginWithEasyAuthConfig(config: {userName: string, clientId: string, authority: string}) {\r\n\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost or using server-directed login flow\r\n            // and proceed with no client-side auth\r\n            \r\n            this._userName = config.userName;\r\n\r\n            // Reloading the page upon cookie expiration\r\n            axios.interceptors.response.use(response => response, err => {\r\n\r\n                // Couldn't find a better way to detect this\r\n                if (err.message === 'Network Error') {\r\n                    window.location.reload(true);\r\n                }\r\n\r\n                return Promise.reject(err);\r\n            });\r\n\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority,\r\n                redirectUri: this.rootUri\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, (authErr: Msal.AuthError, accountState: string) => {\r\n\r\n            console.log(`Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`);\r\n        });\r\n\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            this._aadApp.loginRedirect();\r\n\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n        }\r\n    }\r\n\r\n    private initializeTaskHubNameAndConfirmLogin(): void {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            this._taskHubName = hubName;\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Trying to load the list of allowed Task Hubs from the backend\r\n        this.getAuthorizationHeaderAsync().then(headers => {\r\n\r\n            const uri = `${BackendUri}/task-hub-names`;\r\n            axios.get(uri, { headers }).then(response => {\r\n                \r\n                const hubNames: string[] = response.data;\r\n\r\n                if (hubNames.length === 1) {\r\n                    \r\n                    // Redirecting to that Task Hub\r\n                    window.location.pathname = this.locationPathName + hubNames[0];\r\n                } else {\r\n\r\n                    // Asking the user to choose from\r\n                    this._allowedTaskHubNames = hubNames;\r\n                }\r\n\r\n            }, err => {\r\n                this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n            });\r\n        });\r\n    }\r\n\r\n    // Extracts Task Hub name from window.location.href, still honoring client-side routing and subpaths\r\n    private tryGetTaskHubName(): string {\r\n\r\n        const locationPathName = this.locationPathName;\r\n\r\n        // If current path ends with DfmRoutePrefix, then it doesn't actually contain Task Hub name\r\n        if (locationPathName.toLowerCase().endsWith(`/${DfmRoutePrefix.toLowerCase()}/`)) {\r\n            return null;\r\n        }\r\n\r\n        const pathParts = locationPathName.split('/').filter(p => !!p);\r\n        if (pathParts.length < 1) {\r\n            return null;\r\n        }\r\n\r\n        // Consider the last path part to be the Task Hub name.\r\n        // This should work even if we're hosted under some subpath\r\n        return pathParts[pathParts.length - 1];\r\n    }\r\n}","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nimport { RuntimeStatus } from './states/DurableOrchestrationStatus';\r\n\r\n// Config object passed as a global variable\r\ndeclare const DfmClientConfig: { theme: string };\r\n\r\nconst colorTheme = !process.env.REACT_APP_COLOR_THEME ? DfmClientConfig.theme : process.env.REACT_APP_COLOR_THEME;\r\n\r\nexport const Theme = createMuiTheme({\r\n    palette: { type: colorTheme === 'dark' ? 'dark' : 'light' }\r\n});\r\n\r\nexport const CustomTabStyle = Theme.palette.type === \"dark\" ? {\r\n    backgroundColor: '#aaa'\r\n} : {};\r\n\r\nexport function RuntimeStatusToStyle(status: RuntimeStatus): {} {\r\n\r\n    var backgroundColor: string = null;\r\n\r\n    switch (status) {\r\n        case \"Failed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.error.light, 0.2);\r\n            break;\r\n        case \"Completed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.success.light, 0.2);\r\n            break;\r\n        case \"Running\":\r\n            backgroundColor = hexToRGBA(Theme.palette.warning.light, 0.2);\r\n            break;\r\n        case \"Terminated\":\r\n            backgroundColor = hexToRGBA(Theme.palette.background.paper, 0.1);\r\n            break;\r\n    }\r\n\r\n    return !!backgroundColor ? { backgroundColor } : {};\r\n}\r\n\r\nexport function hexToRGBA(hex: string, alpha: number): string {\r\n\r\n    if (hex.length > 4) {\r\n        return `rgba(${parseInt(hex.slice(1, 3), 16)}, ${parseInt(hex.slice(3, 5), 16)}, ${parseInt(hex.slice(5, 7), 16)}, ${alpha.toFixed(1)})`;\r\n    } else {\r\n        return `rgba(${parseInt(hex.slice(1, 2), 16)}, ${parseInt(hex.slice(2, 3), 16)}, ${parseInt(hex.slice(3, 4), 16)}, ${alpha.toFixed(1)})`;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationsPathPrefix } from '../states/LoginState';\r\nimport { Theme } from '../theme';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, title?: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href=\"/\" onClick={this.onLinkClicked} >\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link color={Theme.palette.type === 'dark' ? 'inherit' : 'primary'} href={`${this.props.backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\nexport class CancelToken {\r\n    @observable\r\n    inProgress: boolean = false;\r\n    @observable\r\n    isCancelled: boolean = false;\r\n}\r\n","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// Represents the state of a tab in the results pane\r\nexport interface IResultsTabState {\r\n\r\n    reset(): void;\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void>;\r\n}\r\n\r\n// Resulting list of orchestrations represented as a plain table\r\nexport class ResultsListTabState implements IResultsTabState {\r\n\r\n    @observable\r\n    columnUnderMouse: string;\r\n\r\n    @computed\r\n    get hiddenColumns(): string[] { return this._hiddenColumns; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection; }\r\n\r\n    @computed\r\n    get orderBy(): string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val) {\r\n\r\n            this._orderBy = val;\r\n            this._orderByDirection = 'asc';\r\n\r\n        } else if (this._orderByDirection === 'desc') {\r\n\r\n            this.resetOrderBy();\r\n        }\r\n        else {\r\n            this._orderByDirection = 'desc';\r\n        }\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<ResultsListTabState>, private _refresh: () => void) {\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n\r\n        const hiddenColumnsString = this._localStorage.getItem('hiddenColumns');\r\n        if (!!hiddenColumnsString) {\r\n            this._hiddenColumns = hiddenColumnsString.split('|');\r\n        }\r\n    }\r\n\r\n    hideColumn(name: string) {\r\n        this._hiddenColumns.push(name);\r\n        this._localStorage.setItem('hiddenColumns', this._hiddenColumns.join('|'));\r\n    }\r\n\r\n    unhide() {\r\n        this._hiddenColumns = [];\r\n        this._localStorage.removeItem('hiddenColumns');\r\n\r\n        this._refresh();\r\n    }\r\n\r\n    resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean = false): Promise<void> {\r\n\r\n        if (isAutoRefresh) { \r\n\r\n            this._noMorePagesToLoad = false;\r\n\r\n        } else {\r\n\r\n            if (!!this._noMorePagesToLoad) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            // persisting state as a batch\r\n            this._localStorage.setItems([\r\n                { fieldName: 'orderBy', value: this._orderBy },\r\n                { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n            ]);            \r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const hiddenColumnsClause = !this._hiddenColumns.length ? '' : `&hidden-columns=${this._hiddenColumns.join('|')}`;\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}${hiddenColumnsClause}`;\r\n\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n            \r\n            if (isAutoRefresh) {\r\n                this._orchestrations = response;\r\n            } else {\r\n                this._orchestrations.push(...response);\r\n            }\r\n\r\n            if (!response.length) {\r\n\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n\r\n    @observable\r\n    private _hiddenColumns: string[] = [];\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n}","import { observable } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\n// Base class for all mermaid-related states\r\nexport abstract class MermaidDiagramStateBase {\r\n\r\n    @observable\r\n    protected _diagramCode: string;\r\n    @observable\r\n    protected _diagramSvg: string;\r\n\r\n    protected initMermaidWhenNeeded() : void {\r\n\r\n        if (MermaidDiagramStateBase._mermaidInitialized) { \r\n            return;\r\n        }\r\n\r\n        mermaid.initialize({\r\n            startOnLoad: true,\r\n            securityLevel: 'loose',\r\n            \r\n            sequence: {\r\n                noteMargin: 0,\r\n                boxMargin: 5,\r\n                boxTextMargin: 5\r\n            },\r\n\r\n            flowchart: {\r\n                curve: 'Basis',\r\n                useMaxWidth: true,\r\n                htmlLabels: false\r\n            }\r\n        });\r\n\r\n        MermaidDiagramStateBase._mermaidInitialized = true;\r\n    }\r\n\r\n    protected escapeTitle(id: string) {\r\n\r\n        return id.replace(/[@:;]/g, ' ');\r\n    }\r\n\r\n    protected formatDuration(durationInMs: number): string {\r\n\r\n        var result = '';\r\n        if (isNaN(durationInMs) || (durationInMs < 0)) {\r\n            return result;\r\n        }\r\n\r\n        const days = Math.floor(durationInMs / 86400000);\r\n        if (days > 30) {\r\n            // something went wrong...\r\n            return result;\r\n        }\r\n\r\n        var c = 0;\r\n\r\n        if (days > 0) {\r\n            result += days.toFixed(0) + 'd';\r\n            ++c;\r\n            durationInMs = durationInMs % 86400000;\r\n        }\r\n\r\n        const hours = Math.floor(durationInMs / 3600000);\r\n        if (hours > 0) {\r\n            result += hours.toFixed(0) + 'h';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 3600000;\r\n        }\r\n\r\n        const minutes = Math.floor(durationInMs / 60000);\r\n        if (minutes > 0) {\r\n            result += minutes.toFixed(0) + 'm';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 60000;\r\n        }\r\n\r\n        const seconds = Math.floor(durationInMs / 1000);\r\n        if (seconds > 0) {\r\n            result += seconds.toFixed(0) + 's';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 1000;\r\n        }\r\n\r\n        if (durationInMs > 0) {\r\n            result += durationInMs.toFixed(0) + 'ms';\r\n        }\r\n\r\n        if (!result) {\r\n            result = '0ms';\r\n        }\r\n\r\n        return `(${result})`;\r\n    }\r\n\r\n    protected formatDateTime(timestamp: string): string {\r\n\r\n        return timestamp.substr(0, 23);\r\n    }\r\n\r\n    protected formatDurationInSeconds(durationInMs: number): string {\r\n\r\n        return Math.round(durationInMs / 1000).toFixed(0) + 's';\r\n    }\r\n\r\n    private static _mermaidInitialized = false;\r\n}","import { computed } from 'mobx'\r\nimport mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsGanttDiagramTabState extends MermaidDiagramStateBase implements IResultsTabState {\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; }\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; }\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    reset() {\r\n\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            const uri = `/orchestrations?$top=500&$orderby=createdTime asc${filterClause}`;\r\n\r\n            this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                Promise.all(this.renderDiagram(instances)).then(sequenceLines => {\r\n\r\n                    this._diagramCode = 'gantt \\n' +\r\n                        `title Gantt Chart (${instances.length} instances shown) \\n` +\r\n                        'dateFormat YYYY-MM-DDTHH:mm:ssZ \\n' +\r\n                        sequenceLines.join('');\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    try {\r\n\r\n                        mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                            this._diagramSvg = svg;\r\n                            resolve();\r\n                        });\r\n\r\n                    } catch (err) {\r\n                        reject(err);\r\n                    }\r\n\r\n                }, reject);\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private renderDiagram(instances: DurableOrchestrationStatus[]): Promise<string>[] {\r\n\r\n        const results: Promise<string>[] = [];\r\n\r\n        var prevSectionName = '';\r\n        var sectionNr = 0;\r\n        for (const instance of instances) {\r\n\r\n            var nextLine = '';\r\n\r\n            // Grouping instances by their type\r\n            const sectionName = instance.entityType === 'DurableEntity' ? instance.entityId.name : instance.name;\r\n            if (sectionName !== prevSectionName) {\r\n                \r\n                nextLine = `section ${++sectionNr}. ${this.escapeTitle(sectionName)} \\n`;\r\n                prevSectionName = sectionName;\r\n            }\r\n\r\n            const instanceId = instance.entityType === 'DurableEntity' ? instance.entityId.key : instance.instanceId;\r\n            const durationInMs = new Date(instance.lastUpdatedTime).getTime() - new Date(instance.createdTime).getTime();\r\n\r\n            nextLine += `${this.escapeTitle(instanceId)} ${this.formatDuration(durationInMs)}: active, ${this.formatDateTime(instance.createdTime)}, ${this.formatDurationInSeconds(durationInMs < 1000 ? 1000 : durationInMs)} \\n`;\r\n            \r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        return results;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DurableOrchestrationStatus } from './DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState } from './ResultsListTabState';\r\nimport { TimeRangeEnum } from './OrchestrationsState';\r\n\r\ntype HistogramColumn = { x0: number, x: number, y: number };\r\ntype TimeInterval = { timeFrom: moment.Moment, timeTill: moment.Moment, timeRange: TimeRangeEnum };\r\n\r\n// Resulting list of orchestrations represented as a Gantt chart\r\nexport class ResultsHistogramTabState implements IResultsTabState {\r\n\r\n    @computed\r\n    get zoomedIn() { return this._zoomedIn; }\r\n\r\n    @computed\r\n    get histograms() { return this._histograms; }\r\n\r\n    @computed\r\n    get numOfInstancesShown() { return this._numOfInstancesShown; }\r\n\r\n    get counts() { return this._counts; }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _filterState: TimeInterval & { reloadOrchestrations: () => void, cancel: () => void })\r\n    {\r\n    }\r\n\r\n    reset() {\r\n    }\r\n\r\n    load(filterClause: string, cancelToken: CancelToken, isAutoRefresh: boolean): Promise<void> {\r\n\r\n        if (!this._applyingZoom && !this._zoomedIn) {\r\n\r\n            this._originalTimeInterval = {\r\n                timeFrom: this._filterState.timeFrom,\r\n                timeTill: this._filterState.timeTill,\r\n                timeRange: this._filterState.timeRange\r\n            };\r\n        }\r\n\r\n        this._numOfInstancesShown = 0;\r\n        this._histograms = {};\r\n        this._counts = {};\r\n\r\n        const startTime = this._filterState.timeFrom.valueOf();\r\n        var bucketLength = Math.ceil((this._filterState.timeTill.valueOf() - startTime) / this._numOfIntervals);\r\n        if (bucketLength <= 0) {\r\n            bucketLength = 1;\r\n        }\r\n\r\n        return this.loadNextBatch(filterClause, startTime, bucketLength, 0, cancelToken);\r\n    }\r\n\r\n    applyZoom(left: Date, right: Date) {\r\n\r\n        this._numOfInstancesShown = 0;\r\n\r\n        this._filterState.cancel();\r\n        \r\n        // rounding to next second\r\n        const from = Math.floor(left.getTime() / 1000) * 1000;\r\n        const till = Math.ceil(right.getTime() / 1000) * 1000;\r\n\r\n        this._filterState.timeFrom = moment(from).utc();\r\n        this._filterState.timeTill = moment(till).utc();\r\n\r\n        this._applyingZoom = true;\r\n        try {\r\n            this._filterState.reloadOrchestrations();\r\n        } finally {\r\n            this._applyingZoom = false;\r\n        }\r\n\r\n        this._zoomedIn = true;\r\n    }\r\n\r\n    resetZoom() {\r\n\r\n        if (!this._zoomedIn || !this._originalTimeInterval) {\r\n            return;\r\n        }\r\n\r\n        this._zoomedIn = false;\r\n\r\n        this._filterState.cancel();\r\n\r\n        this._filterState.timeFrom = this._originalTimeInterval.timeFrom;\r\n        this._filterState.timeTill = this._originalTimeInterval.timeTill;\r\n        this._filterState.timeRange = this._originalTimeInterval.timeRange;\r\n        this._originalTimeInterval = null;\r\n    }\r\n\r\n    @observable\r\n    private _histograms: { [typeName: string]: HistogramColumn[]; } = {};\r\n\r\n    private _counts: { [typeName: string]: number; } = {};\r\n\r\n    @observable\r\n    private _numOfInstancesShown: number = 0;\r\n\r\n    @observable\r\n    private _zoomedIn = false;\r\n\r\n    private _originalTimeInterval: TimeInterval = null;\r\n    private _applyingZoom = false;\r\n\r\n    private readonly _numOfIntervals = 200;\r\n    private readonly _pageSize = 1000;\r\n\r\n    private loadNextBatch(filterClause: string, startTime: number, bucketLength: number, pageNumber: number, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${this._numOfInstancesShown}${filterClause}`;\r\n\r\n        const promise = this._backendClient.call('GET', uri).then((instances: DurableOrchestrationStatus[]) => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            for (var instance of instances) {\r\n\r\n                const instanceTypeName = instance.entityType === 'DurableEntity' ? instance.entityId.name : instance.name;\r\n\r\n                if (!this._histograms[instanceTypeName]) {\r\n                    \r\n                    const emptyHistogram = [];\r\n                    for (var i = 0; i < this._numOfIntervals; i++) {\r\n                        emptyHistogram[i] = { x0: startTime + i * bucketLength, x: startTime + (i + 1) * bucketLength, y: 0 };\r\n                    }\r\n                    this._histograms[instanceTypeName] = emptyHistogram;\r\n                }\r\n\r\n                const instanceStartPos = Math.floor((new Date(instance.createdTime).getTime() - startTime) / bucketLength);\r\n                if (instanceStartPos < 0 || instanceStartPos >= this._numOfIntervals) {\r\n                    continue;\r\n                }\r\n\r\n                this._histograms[instanceTypeName][instanceStartPos].y += 1;\r\n\r\n                if (!this._counts[instanceTypeName]) {\r\n                    this._counts[instanceTypeName] = 1;\r\n                } else {\r\n                    this._counts[instanceTypeName] += 1;\r\n                }\r\n            }\r\n\r\n            this._numOfInstancesShown += instances.length;\r\n\r\n            if (instances.length === this._pageSize) {\r\n                \r\n                return this.loadNextBatch(filterClause, startTime, bucketLength, pageNumber + 1, cancelToken);\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { CancelToken } from '../CancelToken';\r\nimport { IResultsTabState, ResultsListTabState } from './ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from './ResultsGanttDiagramTabState';\r\nimport { ResultsHistogramTabState } from './ResultsHistogramTabState';\r\nimport { RuntimeStatus } from './DurableOrchestrationStatus';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains,\r\n    NotEquals,\r\n    NotStartsWith,\r\n    NotContains\r\n}\r\n\r\nexport enum ResultsTabEnum {\r\n    List = 0,\r\n    Histogram,\r\n    Gantt\r\n}\r\n\r\nexport enum TimeRangeEnum {\r\n    Custom = 0,\r\n    LastMinute,\r\n    Last10Minutes,\r\n    LastHour,\r\n    Last24Hours,\r\n    Last7Days,\r\n    Last30Days,\r\n    Last90Days\r\n}\r\n\r\nexport type RuntimeStatusOrDurableEntities = RuntimeStatus | 'DurableEntities';\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get tabIndex(): ResultsTabEnum { return this._tabIndex; }\r\n    set tabIndex(val: ResultsTabEnum) {\r\n\r\n        if (this._tabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._tabIndex = val;\r\n        this._localStorage.setItem('tabIndex', val.toString());\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    get selectedTabState(): IResultsTabState {\r\n        return this._tabStates[this._tabIndex];\r\n    }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment {\r\n        \r\n        switch (this._timeRange) {\r\n            case TimeRangeEnum.LastMinute:\r\n                return moment().subtract(1, 'minutes').utc();\r\n            case TimeRangeEnum.Last10Minutes:\r\n                return moment().subtract(10, 'minutes').utc();\r\n            case TimeRangeEnum.LastHour:\r\n                return moment().subtract(1, 'hours').utc();\r\n            case TimeRangeEnum.Last24Hours:\r\n                return moment().subtract(1, 'days').utc();\r\n            case TimeRangeEnum.Last7Days:\r\n                return moment().subtract(7, 'days').utc();\r\n            case TimeRangeEnum.Last30Days:\r\n                return moment().subtract(30, 'days').utc();\r\n            case TimeRangeEnum.Last90Days:\r\n                return moment().subtract(90, 'days').utc();\r\n            default:\r\n                return this._timeFrom;\r\n        }\r\n    }\r\n    set timeFrom(val: moment.Moment) {\r\n        this._timeFrom = val;\r\n        this._timeRange = TimeRangeEnum.Custom;\r\n        this.listState.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment {\r\n        return (!!this._timeRange || !this._timeTill) ? moment().utc() : this._timeTill;\r\n    }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this._timeRange = TimeRangeEnum.Custom;\r\n        this.listState.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment().utc() : null;\r\n\r\n        if (!val) {\r\n            this.listState.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get timeRange(): TimeRangeEnum { return this._timeRange; }\r\n    set timeRange(val: TimeRangeEnum) {\r\n\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._timeRange = val;\r\n\r\n        this.listState.resetOrderBy();\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showStatuses(): RuntimeStatusOrDurableEntities[] { return this._showStatuses; }\r\n    \r\n    isStatusChecked(status?: RuntimeStatusOrDurableEntities): boolean {\r\n\r\n        if (!status) {\r\n            return !this._showStatuses;\r\n        }\r\n\r\n        if (!this._showStatuses) {\r\n            return true;\r\n        }\r\n\r\n        return !!this._showStatuses.includes(status);\r\n    }\r\n\r\n    setStatusChecked(checked: boolean, status?: RuntimeStatusOrDurableEntities): void {\r\n\r\n        if (checked) {\r\n\r\n            if (!status) {\r\n                this._showStatuses = null;\r\n            } else {\r\n                if (!this._showStatuses) {\r\n                    this._showStatuses = [];\r\n                }\r\n                this._showStatuses.push(status);\r\n            }\r\n            \r\n        } else {\r\n\r\n            if (!status) {\r\n                this._showStatuses = [];\r\n            } else {\r\n                if (!this._showStatuses) {\r\n                    this._showStatuses = [];\r\n                }\r\n\r\n                const i = this._showStatuses.indexOf(status);\r\n                if (i >= 0) {\r\n                    this._showStatuses.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n        }\r\n        this._refreshToken = setTimeout(() => this.reloadOrchestrations(), this._delayedRefreshDelay);\r\n    }\r\n\r\n    rescheduleDelayedRefresh() {\r\n        \r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = setTimeout(() => this.reloadOrchestrations(), this._delayedRefreshDelay);\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState & ResultsListTabState>) {\r\n        super();\r\n        \r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n        momentFrom.utc();\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._timeTill.utc();\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const timeRangeString = this._localStorage.getItem('timeRange');\r\n        if (!!timeRangeString) {\r\n            this._timeRange = TimeRangeEnum[timeRangeString];\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showStatusesString = this._localStorage.getItem('showStatuses');\r\n        if (!!showStatusesString) {\r\n            this._showStatuses = JSON.parse(showStatusesString);\r\n        }\r\n        \r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const tabIndexString = this._localStorage.getItem('tabIndex');\r\n        if (!!tabIndexString) {\r\n            const tabIndex = Number(tabIndexString);\r\n            if (tabIndex >= 0 && tabIndex < this._tabStates.length) {\r\n                this._tabIndex = tabIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n\r\n        // Canceling delayed refresh, if any\r\n        if (!!this._refreshToken) {\r\n            clearTimeout(this._refreshToken);\r\n            this._refreshToken = null;\r\n        }\r\n\r\n        for (const resultState of this._tabStates) {\r\n            resultState.reset();\r\n        }\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: !this._timeRange ? this._timeFrom.toISOString(): null },\r\n            { fieldName: 'timeTill', value: (!!this._timeTill && !this._timeRange) ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'timeRange', value: !!this._timeRange ? TimeRangeEnum[this._timeRange] : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showStatuses', value: !!this._showStatuses ? JSON.stringify(this._showStatuses) : null },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        const cancelToken = this._cancelToken;\r\n        if (!!cancelToken.inProgress) {\r\n            return;            \r\n        }\r\n        cancelToken.inProgress = true;\r\n        \r\n        var filterClause = `&$filter=createdTime ge '${this.timeFrom.toISOString()}' and createdTime le '${this.timeTill.toISOString()}'`;\r\n        \r\n        if (!!this._showStatuses) {\r\n\r\n            filterClause += ` and runtimeStatus in (${this._showStatuses.map(s => `'${s}'`).join(',')})`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            const encodedFilterValue = encodeURIComponent(this._filterValue);\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${encodedFilterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${encodedFilterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${encodedFilterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.NotEquals:\r\n                    filterClause += `${this._filteredColumn} ne '${encodedFilterValue}'`;\r\n                    break;\r\n                case FilterOperatorEnum.NotStartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${encodedFilterValue}') eq false`;\r\n                    break;\r\n                case FilterOperatorEnum.NotContains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${encodedFilterValue}') eq false`;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.selectedTabState.load(filterClause, cancelToken, isAutoRefresh).then(() => {\r\n\r\n            if (!!this._refreshToken) {\r\n                clearTimeout(this._refreshToken);\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                this._refreshToken = setTimeout(() => {\r\n\r\n                    this.loadOrchestrations(true);\r\n\r\n                }, this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n                \r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _tabIndex: ResultsTabEnum = ResultsTabEnum.List;\r\n\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n    @observable\r\n    private _timeRange: TimeRangeEnum = TimeRangeEnum.Custom;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    @observable\r\n    private _showStatuses: RuntimeStatusOrDurableEntities[] = null;\r\n\r\n    private readonly _tabStates: IResultsTabState[] = [\r\n        new ResultsListTabState(this._backendClient, this._localStorage, () => this.reloadOrchestrations()),\r\n        new ResultsHistogramTabState(this._backendClient, this),\r\n        new ResultsGanttDiagramTabState(this._backendClient)\r\n    ];\r\n\r\n    private get listState(): ResultsListTabState { return this._tabStates[0] as ResultsListTabState; }\r\n\r\n    private _refreshToken: NodeJS.Timeout;\r\n    private readonly _delayedRefreshDelay = 2500;\r\n\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n}","import * as React from 'react';\r\n\r\nimport { Box, Button, Typography } from '@material-ui/core';\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// A button to save something as an .SVG file\r\nexport class SaveAsSvgButton extends React.Component<{ svg: string, fileName: string, inProgress: boolean, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => this.props.backendClient.call('SaveAs', this.props.fileName + '.svg', this.props.svg)}\r\n                >\r\n                    <SaveIcon />\r\n                    <Box width={20} />\r\n                    <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                </Button>\r\n            );\r\n\r\n        } else {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={this.props.inProgress}\r\n                    href={URL.createObjectURL(new Blob([this.props.svg], { type: 'image/svg+xml' }))}\r\n                    download={this.props.fileName + '.svg'}\r\n                >\r\n                    <SaveIcon />\r\n                    <Box width={20} />\r\n                    <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Appends some styling to SVG code, so it can also be saved as file\r\nexport function getStyledSvg(svg: string): string {\r\n\r\n    return svg.replace('</style>',\r\n        '.note { stroke: none !important; fill: none !important; } ' +\r\n        '.noteText { font-size: 9px !important; } ' +\r\n        '</style>'\r\n    );\r\n}\r\n","\r\nconst MaxJsonLengthToShow = 1024;\r\n\r\nexport function renderJson(json: any): string {\r\n\r\n    if (!json) {\r\n        return '';\r\n    }\r\n\r\n    const result = JSON.stringify(json);\r\n    return result.length > MaxJsonLengthToShow ? `[${result.length} symbols long JSON]` : result;\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n    AppBar, Box, Button, Checkbox, FormGroup, FormControl, FormControlLabel, FormHelperText, Grid, IconButton, InputBase,\r\n    InputLabel, Link, LinearProgress, Menu, MenuItem, Paper, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, Tab, Tabs, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\nimport { XYPlot, XAxis, YAxis, DiscreteColorLegend, VerticalRectSeries, Highlight } from 'react-vis';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields, RuntimeStatuses } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState, ResultsTabEnum, FilterOperatorEnum, TimeRangeEnum } from '../states/OrchestrationsState';\r\nimport { ResultsListTabState } from '../states/ResultsListTabState';\r\nimport { ResultsGanttDiagramTabState } from '../states/ResultsGanttDiagramTabState';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\n\r\nimport { CustomTabStyle, RuntimeStatusToStyle } from '../theme';\r\nimport { ResultsHistogramTabState } from 'src/states/ResultsHistogramTabState';\r\nimport { renderJson } from './shared';\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const state = this.props.state;\r\n\r\n            if (state.tabIndex !== ResultsTabEnum.List ) {\r\n                return;\r\n            }\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                state.loadOrchestrations();\r\n            }\r\n        });\r\n\r\n        // Doing zoom reset\r\n        document.addEventListener('keydown', (evt: any) => {\r\n\r\n            const state = this.props.state;\r\n            if (state.tabIndex === ResultsTabEnum.Histogram && !!evt.ctrlKey && evt.keyCode === 90) {\r\n\r\n                const histogramState = state.selectedTabState as ResultsHistogramTabState;\r\n                histogramState.resetZoom();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const listState = state.selectedTabState as ResultsListTabState;\r\n\r\n        return (<>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.LastMinute}>Last Minute</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last10Minutes}>Last 10 Minutes</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.LastHour}>Last Hour</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last24Hours}>Last 24 Hours</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last7Days}>Last 7 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last30Days}>Last 30 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Last90Days}>Last 90 Days</MenuItem>\r\n                <MenuItem onClick={() => state.timeRange = TimeRangeEnum.Custom}>Custom</MenuItem>\r\n            </Menu>\r\n            \r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Grid container className=\"toolbar-grid1\">\r\n                        <Grid item xs={12}>\r\n\r\n                            <Button size=\"small\" variant=\"outlined\" className=\"time-period-menu-drop-btn\"\r\n                                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                            >\r\n                                <ArrowDropDownIcon/>\r\n                            </Button>\r\n                            \r\n                            {!!state.timeRange ? (\r\n                                <TextField\r\n                                    className=\"from-input\"\r\n                                    label=\"Time Range (UTC)\"\r\n                                    InputProps={{ readOnly: true }}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    type=\"text\"\r\n                                    value={this.timeRangeToString(state.timeRange)}\r\n                                />\r\n                            ) : (\r\n                                <KeyboardDateTimePicker\r\n                                    className=\"from-input\"\r\n                                    ampm={false}\r\n                                    autoOk={true}\r\n                                    label=\"From (UTC)\"\r\n                                    invalidDateMessage=\"\"\r\n                                    format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                    disabled={state.inProgress}\r\n                                    value={state.timeFrom}\r\n                                    onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                                    onBlur={() => state.applyTimeFrom()}\r\n                                    onAccept={() => state.applyTimeFrom()}\r\n                                    onKeyPress={this.handleKeyPress}\r\n                                />\r\n                            )}\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n\r\n                            {!state.timeRange && (<>\r\n\r\n                                <FormControl>\r\n                                    <Checkbox\r\n                                        id=\"till-checkbox\"\r\n                                        className=\"till-checkbox\"\r\n                                        disabled={state.inProgress}\r\n                                        checked={state.timeTillEnabled}\r\n                                        onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                                    />\r\n                                </FormControl>\r\n\r\n                                {state.timeTillEnabled ? (\r\n                                    <KeyboardDateTimePicker\r\n                                        className=\"till-input\"\r\n                                        ampm={false}\r\n                                        autoOk={true}\r\n                                        label=\"Till (UTC)\"\r\n                                        invalidDateMessage=\"\"\r\n                                        format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                        disabled={state.inProgress}\r\n                                        value={state.timeTill}\r\n                                        onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                                        onBlur={() => state.applyTimeTill()}\r\n                                        onAccept={() => state.applyTimeTill()}\r\n                                        onKeyPress={this.handleKeyPress}\r\n                                    />\r\n                                ) : (\r\n                                    <TextField\r\n                                        className=\"till-input\"\r\n                                        label=\"Till (UTC)\"\r\n                                        placeholder=\"[Now]\"\r\n                                        InputLabelProps={{ shrink: true }}\r\n                                        type=\"text\"\r\n                                        disabled={true}\r\n                                    />\r\n                                )}\r\n\r\n                            </>)}\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid2\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl>\r\n                                <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select filtered-column-input\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filteredColumn}\r\n                                    onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                    inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                    <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                    {DurableOrchestrationStatusFields.map(col => {\r\n                                        return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                    })}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className=\"toolbar-grid2-item1-select\">\r\n                                <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filterOperator}\r\n                                    onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                    inputProps={{ id: \"filter-operator-select\" }}>\r\n                                    <MenuItem value={FilterOperatorEnum.Equals}>Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.StartsWith}>Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.Contains}>Contains</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotEquals}>Not Equals</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotStartsWith}>Not Starts With</MenuItem>\r\n                                    <MenuItem value={FilterOperatorEnum.NotContains}>Not Contains</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                            <TextField\r\n                                className=\"filter-value-input\"\r\n                                label=\"Filter Value\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                placeholder=\"[some text or 'null']\"\r\n                                disabled={state.filteredColumn === '0' || state.inProgress}\r\n                                value={state.filterValue}\r\n                                onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                                onBlur={() => state.applyFilterValue()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <FormGroup className=\"toolbar-runtime-status-group\">\r\n\r\n                        <InputLabel className=\"toolbar-runtime-status-group-label\" shrink={true}>Type/Status {!state.showStatuses ? '' : ` (${state.showStatuses.length} selected)`}</InputLabel>\r\n\r\n                        <FormGroup className=\"toolbar-runtime-status-checkbox-group\" onScroll={() => state.rescheduleDelayedRefresh()}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked()}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked)}\r\n                                />}\r\n                                label=\"[All]\"\r\n                            />\r\n\r\n                            {RuntimeStatuses.map(status => (<FormControlLabel key={status}\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked(status)}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked, status)}\r\n                                />}\r\n                                label={'Orchestations:' + status}\r\n                            />))}\r\n\r\n                            <FormControlLabel\r\n                                control={<Checkbox className=\"status-checkbox\" disabled={state.inProgress} checked={state.isStatusChecked('DurableEntities')}\r\n                                    onChange={(evt) => state.setStatusChecked(evt.target.checked, 'DurableEntities')}\r\n                                />}\r\n                                label=\"Durable Entities\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                    </FormGroup>\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Grid container className=\"toolbar-grid3\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl className=\"form-control-float-right\">\r\n                                <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                                <Select\r\n                                    className=\"autorefresh-select\"\r\n                                    inputProps={{ id: \"auto-refresh-select\" }}\r\n                                    value={state.autoRefresh}\r\n                                    onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                                >\r\n                                    <MenuItem value={0}>Never</MenuItem>\r\n                                    <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                    <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                    <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                            <Button\r\n                                className=\"refresh-button form-control-float-right\"\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                size=\"large\"\r\n                                onClick={() => state.inProgress ? state.cancel() : state.reloadOrchestrations()}\r\n                            >\r\n                                {state.inProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <AppBar color=\"inherit\" position=\"static\">\r\n                <Tabs className=\"tab-buttons\" value={state.tabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.tabIndex = val}>\r\n\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">List</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Time Histogram</Typography>} />\r\n                    <Tab className=\"tab-buttons\" disabled={state.inProgress} label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Gantt Chart</Typography>} />\r\n\r\n                </Tabs>\r\n            </AppBar>\r\n\r\n            {state.tabIndex === ResultsTabEnum.List && (<>\r\n\r\n                <FormHelperText className=\"items-count-label\">\r\n                    {!!listState.orchestrations.length && (<>\r\n                        {`${listState.orchestrations.length} items shown`}\r\n                        {!!listState.hiddenColumns.length && (<>\r\n\r\n                            {`, ${listState.hiddenColumns.length} columns hidden `}\r\n\r\n                            (<Link className=\"unhide-button\"\r\n                                component=\"button\"\r\n                                variant=\"inherit\"\r\n                                onClick={() => listState.unhide()}\r\n                            >\r\n                                unhide\r\n                            </Link>)\r\n                        </>)}\r\n                    </>)}\r\n                </FormHelperText>\r\n\r\n                <Paper elevation={0} >\r\n                    {!!listState.orchestrations.length ? this.renderTable(listState, state.showLastEventColumn, state.backendClient) : this.renderEmptyTable()}\r\n                </Paper>\r\n\r\n                {state.inProgress && !!listState.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                \r\n            </>)}\r\n\r\n            {state.tabIndex === ResultsTabEnum.Histogram && this.renderHistogram(state.selectedTabState as ResultsHistogramTabState) }\r\n            \r\n            {state.tabIndex === ResultsTabEnum.Gantt && this.renderGanttChart(state, state.selectedTabState as ResultsGanttDiagramTabState)}\r\n                \r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private timeRangeToString(timeRange: TimeRangeEnum): string {\r\n        switch (timeRange) {\r\n            case TimeRangeEnum.LastMinute: return 'Last Minute';\r\n            case TimeRangeEnum.Last10Minutes: return 'Last 10 Minutes';\r\n            case TimeRangeEnum.LastHour: return 'Last Hour';\r\n            case TimeRangeEnum.Last24Hours: return 'Last 24 Hours';\r\n            case TimeRangeEnum.Last7Days: return 'Last 7 Days';\r\n            case TimeRangeEnum.Last30Days: return 'Last 30 Days';\r\n            case TimeRangeEnum.Last90Days: return 'Last 90 Days';\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n    private renderHistogram(histogramState: ResultsHistogramTabState): JSX.Element {\r\n\r\n        const typeNames = Object.keys(histogramState.histograms).sort();\r\n\r\n        return (<>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {`${histogramState.numOfInstancesShown} items shown`}\r\n\r\n                {histogramState.zoomedIn && (<>\r\n\r\n                    {', '}\r\n                    <Link className=\"unhide-button\"\r\n                        component=\"button\"\r\n                        variant=\"inherit\"\r\n                        onClick={() => histogramState.resetZoom()}\r\n                    >\r\n                        reset zoom (Ctrl+Z)\r\n                        </Link>\r\n                </>)}\r\n\r\n            </FormHelperText>\r\n\r\n            <XYPlot\r\n                width={window.innerWidth - 40} height={window.innerHeight - 400}\r\n                xType=\"time\"\r\n                stackBy=\"y\"\r\n                margin={{ left: 80, right: 10, top: 20 }}\r\n            >\r\n                {!!histogramState.numOfInstancesShown && (\r\n                    <YAxis tickTotal={7} />\r\n                )}\r\n                <XAxis tickTotal={7} tickFormat={t => this.formatTimeTick(t)} />\r\n\r\n                {typeNames.map(typeName => (<VerticalRectSeries\r\n                    key={typeName}\r\n                    stroke=\"white\"\r\n                    color={this.getColorCodeForInstanceType(typeName)}\r\n                    data={histogramState.histograms[typeName]}\r\n                />))}\r\n\r\n                {!!histogramState.numOfInstancesShown && (\r\n\r\n                    <Highlight\r\n                        color=\"#829AE3\"\r\n                        drag\r\n                        enableY={false}\r\n\r\n                        onDragEnd={(area) => {\r\n                            if (!!area) {\r\n                                histogramState.applyZoom(area.left, area.right);\r\n                            }\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n            </XYPlot>\r\n            \r\n            <DiscreteColorLegend className=\"histogram-legend\"\r\n                colors={typeNames.map(typeName => this.getColorCodeForInstanceType(typeName))}\r\n                items={typeNames.map(typeName => `${typeName} (${histogramState.counts[typeName]})`)}\r\n                orientation=\"horizontal\"\r\n            />\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderGanttChart(state: OrchestrationsState, ganttState: ResultsGanttDiagramTabState): JSX.Element {\r\n\r\n        if (!ganttState.rawHtml) {\r\n            return null;\r\n        }\r\n\r\n        return (<>\r\n\r\n            <div\r\n                className=\"raw-html-div\"\r\n                style={CustomTabStyle}\r\n                dangerouslySetInnerHTML={{ __html: getStyledSvg(ganttState.rawHtml) }}\r\n            />\r\n\r\n            <Toolbar variant=\"dense\">\r\n\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    disabled={state.inProgress}\r\n                    onClick={() => window.navigator.clipboard.writeText(ganttState.diagramCode)}\r\n                >\r\n                    <FileCopyIcon />\r\n                    <Box width={10} />\r\n                    <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                </Button>\r\n\r\n                <Box width={20} />\r\n\r\n                <SaveAsSvgButton\r\n                    svg={getStyledSvg(ganttState.rawHtml)}\r\n                    fileName={`gantt-chart-${state.timeFrom.format('YYYY-MM-DD-HH-mm-ss')}-${state.timeTill.format('YYYY-MM-DD-HH-mm-ss')}`}\r\n                    inProgress={state.inProgress}\r\n                    backendClient={state.backendClient}\r\n                />\r\n\r\n                <Box width={20} />\r\n            </Toolbar>\r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(results: ResultsListTabState, showLastEventColumn: boolean, backendClient: IBackendClient): JSX.Element {\r\n\r\n        const visibleColumns = DurableOrchestrationStatusFields\r\n            // hiding artificial 'lastEvent' column, when not used\r\n            .filter(f => showLastEventColumn ? true : f !== 'lastEvent');\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {visibleColumns.map(col => {\r\n\r\n                            const onlyOneVisibleColumnLeft = visibleColumns.length <= results.hiddenColumns.length + 1;\r\n\r\n                            return !results.hiddenColumns.includes(col) && (\r\n                                <TableCell key={col}\r\n                                    onMouseEnter={() => results.columnUnderMouse = col}\r\n                                    onMouseLeave={() => results.columnUnderMouse = ''}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={results.orderBy === col}\r\n                                        direction={results.orderByDirection}\r\n                                        onClick={() => results.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n                                    </TableSortLabel>\r\n\r\n                                    {results.columnUnderMouse === col && !onlyOneVisibleColumnLeft && (\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size=\"small\"\r\n                                            className=\"column-hide-button\"\r\n                                            onClick={() => results.hideColumn(col)}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>                                        \r\n                                    )}\r\n\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {results.orchestrations.map(orchestration => {\r\n\r\n                        const rowStyle = RuntimeStatusToStyle(orchestration.runtimeStatus);\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                style={rowStyle}\r\n                            >\r\n                                {!results.hiddenColumns.includes('instanceId') && (\r\n                                    <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                        <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={backendClient} />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('name') && (\r\n                                    <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                        {orchestration.name}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('createdTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {orchestration.createdTime}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('lastUpdatedTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {orchestration.lastUpdatedTime}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('runtimeStatus') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.runtimeStatus}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('lastEvent') && showLastEventColumn && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.lastEvent}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('input') && (\r\n                                    <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={renderJson(orchestration.input)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('output') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={renderJson(orchestration.output)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!results.hiddenColumns.includes('customStatus') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={renderJson(orchestration.customStatus)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    private getColorCodeForInstanceType(instanceType: string): string {\r\n\r\n        // Taking hash out of input string (reversed, to make names like 'func1', 'func2' etc. look different)\r\n        var hashCode = 0;\r\n        for (var i = instanceType.length - 1; i >= 0; i--) {\r\n            hashCode = ((hashCode << 5) - hashCode) + instanceType.charCodeAt(i);\r\n            // Convert to positive 32-bit integer\r\n            hashCode &= 0x7FFFFFFF;\r\n        }\r\n\r\n        // min 6 hex digits\r\n        hashCode |= 0x100000;\r\n\r\n        // Not too white\r\n        hashCode &= 0xFFFFEF;\r\n\r\n        return '#' + hashCode.toString(16);\r\n    }\r\n\r\n    private formatTimeTick(t: Date) {\r\n\r\n        const m = moment(t).utc();\r\n        const timeRange = this.props.state.timeTill.valueOf() - this.props.state.timeFrom.valueOf();\r\n\r\n        if (timeRange > 5 * 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD');\r\n        }\r\n\r\n        if (timeRange > 86400 * 1000) {\r\n            return m.format('YYYY-MM-DD HH:mm');\r\n        }\r\n\r\n        if (timeRange > 10000) {\r\n\r\n            return m.second() === 0 ? m.format('HH:mm') : m.format('HH:mm:ss');\r\n        }\r\n\r\n        return (m.millisecond() === 0) ? m.format('HH:mm:ss') : m.format(':SSS');\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Send Signal\r\n            </Button>\r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Send Signal</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide signal name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Signal Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Signal Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Send\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Grid, TextField } from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId?.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId?.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    FormControlLabel, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.restartDialogOpen = true}>\r\n                Restart\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.restartDialogOpen}\r\n                onClose={() => state.restartDialogOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Restart</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to restart orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n\r\n                    <FormControlLabel control={<Checkbox\r\n                        checked={state.restartWithNewInstanceId}\r\n                        onChange={(evt) => state.restartWithNewInstanceId = evt.target.checked} />}\r\n                        label=\"Restart with new instanceId\"\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.restartDialogOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.restart()} color=\"secondary\">\r\n                        Restart\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, InputBase, Table, TableBody, TableCell, TableHead, TableRow, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { HistoryEventFields, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\nimport { renderJson } from './shared';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) {\r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 50;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadHistory();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const totalItems = this.props.state.historyTotalCount;\r\n        const details = this.props.state.details;\r\n        const history = this.props.state.history;\r\n        const itemsShown = history.length;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"instanceId\"\r\n                        value={details.instanceId}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: { totalItems === itemsShown ? `${itemsShown} items` : `${itemsShown} of ${totalItems} items shown` }\r\n            </FormHelperText>\r\n\r\n            {!!history.length && this.renderTable(history)}\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderTable(events: HistoryEvent[]): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: HistoryEvent, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n\r\n                                    {!!event.SubOrchestrationId ?\r\n                                        (<OrchestrationLink\r\n                                            orchestrationId={event.SubOrchestrationId}\r\n                                            title={event.FunctionName}\r\n                                            backendClient={this.props.state.backendClient} />)\r\n                                        :\r\n                                        (event.Name ?? event.FunctionName)\r\n                                    }\r\n\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={renderJson(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={renderJson(event.Details)}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, FormControl, InputLabel, LinearProgress, MenuItem,\r\n    Select, Tabs, Tab, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\nimport { CustomTabStyle } from '../theme';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"details-top-toolbar\">\r\n\r\n                    {state.details.entityType === \"Orchestration\" && (\r\n                        <OrchestrationButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    {state.details.entityType === \"DurableEntity\" && (\r\n                        <DurableEntityButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            inputProps={{ id: 'auto-refresh-select' }}>\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress && !state.loadInProgress}\r\n                        onClick={() => state.loadInProgress ? state.cancel() : state.loadDetails()}\r\n                    >\r\n                        {state.loadInProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {!!state.tabStates.length && (<>\r\n                <AppBar color=\"inherit\" position=\"static\">\r\n                    <Tabs className=\"tab-buttons\" value={state.tabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.tabIndex = val}>\r\n                        \r\n                        <Tab className=\"tab-buttons\" disabled={state.inProgress} \r\n                            label={<Typography color=\"textPrimary\" variant=\"subtitle2\">Details</Typography>}\r\n                        />\r\n                        \r\n                        {state.tabStates.map(tabState => (\r\n                            <Tab className=\"tab-buttons\" key={tabState.name} disabled={state.inProgress} \r\n                                label={<Typography color=\"textPrimary\" variant=\"subtitle2\">{tabState.name}</Typography>}\r\n                            />\r\n                        ))}\r\n\r\n                    </Tabs>\r\n                </AppBar>\r\n            </>)}\r\n\r\n            {!state.tabIndex && state.details.entityType === \"Orchestration\" && (<>\r\n                <OrchestrationFields state={state} />\r\n\r\n                {state.inProgress && !!state.history.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            </>)}\r\n\r\n            {!state.tabIndex && state.details.entityType === \"DurableEntity\" &&\r\n                <DurableEntityFields details={state.details} />\r\n            }\r\n\r\n            {!!state.selectedTab && !!state.selectedTab.rawHtml && (<>\r\n\r\n                <div\r\n                    className=\"raw-html-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.selectedTab.rawHtml) }}\r\n                />\r\n                \r\n                {state.selectedTab.isMermaidDiagram && (\r\n\r\n                    <Toolbar variant=\"dense\">\r\n                        <Typography style={{ flex: 1 }} />\r\n\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"default\"\r\n                            disabled={state.inProgress}\r\n                            onClick={() => window.navigator.clipboard.writeText(state.selectedTab.description)}\r\n                        >\r\n                            <FileCopyIcon />\r\n                            <Box width={10} />\r\n                            <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                        </Button>\r\n\r\n                        <Box width={20} />\r\n\r\n                        <SaveAsSvgButton\r\n                            svg={getStyledSvg(state.selectedTab.rawHtml)}\r\n                            fileName={state.orchestrationId}\r\n                            inProgress={state.inProgress}\r\n                            backendClient={state.backendClient}\r\n                        />\r\n\r\n                        <Box width={20} />\r\n                    </Toolbar>\r\n                )}\r\n                \r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Box, Button, LinearProgress, TextField, Toolbar, Typography } from '@material-ui/core';\r\n\r\nimport './FunctionGraph.css';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { FunctionGraphState } from '../states/FunctionGraphState';\r\nimport { CustomTabStyle } from '../theme';\r\nimport { SaveAsSvgButton, getStyledSvg } from './SaveAsSvgButton';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// Function Graph view\r\n@observer\r\nexport class FunctionGraph extends React.Component<{ state: FunctionGraphState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.load();\r\n\r\n        // The only way found so far to pass backendClient to node click handlers\r\n        FunctionGraph.backendClient = this.props.state.backendClient;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        const svgElement = document.getElementById('mermaidSvgId');\r\n\r\n        console.log(`svgElement is ${svgElement}`);\r\n\r\n        if (!svgElement) {\r\n            return;\r\n        }\r\n\r\n        this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('function'));\r\n        this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('orchestrator'));\r\n        this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('activity'));\r\n        this.mountClickEventToFunctionNodes(svgElement.getElementsByClassName('entity'));\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"details-top-toolbar\">\r\n                    <Box width={20} />\r\n\r\n                    <TextField\r\n                        fullWidth\r\n                        label=\"Function Project Path\"\r\n                        disabled={true}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        type=\"text\"\r\n                        value={state.projectPath}\r\n                    />\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => state.load()}\r\n                    >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {!!state.diagramSvg && (<>\r\n\r\n                <div\r\n                    className=\"diagram-div\"\r\n                    style={CustomTabStyle}\r\n                    dangerouslySetInnerHTML={{ __html: getStyledSvg(state.diagramSvg) }}\r\n                />\r\n\r\n                <Toolbar variant=\"dense\">\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => window.navigator.clipboard.writeText(state.diagramCode)}\r\n                    >\r\n                        <FileCopyIcon />\r\n                        <Box width={10} />\r\n                        <Typography color=\"inherit\">Copy diagram code to Clipboard</Typography>\r\n                    </Button>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <SaveAsSvgButton\r\n                        svg={getStyledSvg(state.diagramSvg)}\r\n                        fileName=\"functions.svg\"\r\n                        inProgress={state.inProgress}\r\n                        backendClient={state.backendClient}\r\n                    />\r\n\r\n                </Toolbar>\r\n\r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n\r\n    private static backendClient: IBackendClient;\r\n\r\n    private static onFunctionNodeClicked(evt: Event): void {\r\n\r\n        const el = evt.currentTarget as Element;\r\n\r\n        const match = /flowchart-(\\w+)-/.exec(el.id);\r\n        if (!!match) {\r\n            FunctionGraph.backendClient.call('GotoFunctionCode', match[1]);\r\n        }\r\n    }\r\n\r\n    private mountClickEventToFunctionNodes(nodes: HTMLCollection): void {\r\n\r\n        console.log(`Found ${nodes.length} functions`)\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i] as Node;\r\n\r\n            node.removeEventListener('click', FunctionGraph.onFunctionNodeClicked);\r\n            node.addEventListener('click', FunctionGraph.onFunctionNodeClicked);\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                        To clean up deleted Entities use the 'Clean Entity Storage' command instead. \r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-from-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? 'Last Updated From (UTC)' : 'From (UTC)'}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? 'Last Updated Till (UTC)' : 'Till (UTC)'}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === 'Orchestration' && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === 'DurableEntity' && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, LinearProgress, \r\n} from '@material-ui/core';\r\n\r\nimport './CleanEntityStorageDialog.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { CleanEntityStorageDialogState } from '../states/CleanEntityStorageDialogState';\r\n\r\n// Dialog with parameters for cleaning entity storage\r\n@observer\r\nexport class CleanEntityStorageDialog extends React.Component<{ state: CleanEntityStorageDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Clean Entity Storage</DialogTitle>\r\n\r\n                {!state.response && (<>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                        <DialogContentText>\r\n                            An entity is considered empty, and is removed, if it has no state, is not locked, and has been idle for more than EntityMessageReorderWindowInMinutes. Locks are considered orphaned, and are released, if the orchestration that holds them is not in state Running.\r\n                        </DialogContentText>\r\n\r\n                        <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                            <FormGroup row>\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.removeEmptyEntities}\r\n                                    onChange={(evt) => state.removeEmptyEntities = evt.target.checked} />}\r\n                                    label=\"Remove Empty Entities\"\r\n                                />\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.releaseOrphanedLocks}\r\n                                    onChange={(evt) => state.releaseOrphanedLocks = evt.target.checked} />}\r\n                                    label=\"Release Orphaned Locks\"\r\n                                />\r\n                                \r\n                            </FormGroup>\r\n                        </FormControl>\r\n\r\n                        <ErrorMessage state={state} />\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => state.clean()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                            Clean\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n                {!!state.response && (<>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfEmptyEntitiesRemoved} empty entities removed. \r\n                        </DialogContentText>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfOrphanedLocksRemoved} orphaned locks removed.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { FunctionGraph } from './FunctionGraph';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\nimport { CleanEntityStorageDialog } from './CleanEntityStorageDialog';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmRoutePrefix: string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={`${!DfmRoutePrefix ? '' : '/'}${DfmRoutePrefix}/logo.svg`} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                <Link color=\"inherit\" href={state.loginState.rootUri}>\r\n                                    Durable Functions Monitor\r\n                                </Link>\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={state.loginState.locationPathName}>\r\n                                    / {state.loginState.taskHubName}\r\n                                </Link>\r\n\r\n                                {!state.orchestrationDetailsState ?\r\n                                    (\r\n                                        <Autocomplete\r\n                                            className=\"instance-id-input\"\r\n                                            freeSolo\r\n                                            options={state.isExactMatch ? [] : state.suggestions}\r\n                                            value={state.typedInstanceId}\r\n                                            onChange={(evt, newValue) => {\r\n                                                state.typedInstanceId = newValue ?? '';\r\n                                                if (!!newValue) {\r\n                                                    state.goto();\r\n                                                }\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    className={state.isExactMatch ? 'instance-id-valid' : null}\r\n                                                    size=\"small\"\r\n                                                    label=\"instanceId to go to...\"\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(evt) => state.typedInstanceId = evt.target.value as string}\r\n                                                    onKeyPress={(evt) => this.handleKeyPress(evt)}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    )\r\n                                    :\r\n                                    (<Typography color=\"inherit\">\r\n                                        <Link color=\"inherit\" href={window.location.pathname}>\r\n                                            {state.orchestrationDetailsState.orchestrationId}\r\n                                        </Link>\r\n                                    </Typography>)\r\n                                }\r\n\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                {!!state.functionGraphState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <FunctionGraph state={state.functionGraphState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n                <CleanEntityStorageDialog state={state.cleanEntityStorageDialogState} />\r\n\r\n            </></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.goto();\r\n        }\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _purgeHistoryDialogState: PurgeHistoryDialogState,\r\n        private _cleanEntityStorageDialogState: CleanEntityStorageDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    showCleanEntityStorageDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this._cleanEntityStorageDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n    \r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { computed } from 'mobx';\r\n\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// Base class for all mermaid diagram tab states\r\nexport abstract class MermaidDiagramTabState extends MermaidDiagramStateBase implements ICustomTabState {\r\n\r\n    readonly name: string = \"Diagram\";\r\n    readonly isMermaidDiagram: boolean = true;\r\n\r\n    @computed\r\n    get description(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; };\r\n\r\n    constructor(protected _loadHistory: (orchestrationId: string) => Promise<HistoryEvent[]>) {\r\n        super();\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n        \r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        return this._loadHistory(details.instanceId).then(history => {\r\n\r\n            if (!history.length || cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            return this.buildDiagram(details, history, cancelToken);\r\n        });\r\n    }\r\n\r\n    protected abstract buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void>;\r\n}","import mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of Sequence Diagram tab on OrchestrationDetails view\r\nexport class SequenceDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Sequence Diagram\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken) : Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.getSequenceForOrchestration(details.name, '.', history)).then(sequenceLines => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'sequenceDiagram \\n' + sequenceLines.join('');\r\n\r\n                try {\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private getSequenceForOrchestration(orchestrationName: string, parentOrchestrationName: string, historyEvents: HistoryEvent[]): Promise<string>[] {\r\n\r\n        const externalActor = '.'\r\n        const results: Promise<string>[] = [];\r\n        var nextLine: string;\r\n\r\n        var i = 0;\r\n        while (i < historyEvents.length) {\r\n            const event = historyEvents[i];\r\n\r\n            switch (event.EventType) {\r\n                case 'ExecutionStarted':\r\n\r\n                    nextLine =\r\n                        `${parentOrchestrationName}->>+${orchestrationName}:[ExecutionStarted] \\n` +\r\n                        `Note over ${parentOrchestrationName},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.getSequenceForOrchestration(subOrchestrationName, orchestrationName, history)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`${orchestrationName}-x${subOrchestrationName}:[FailedToLoad] \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    nextLine = `${orchestrationName}-x${event.FunctionName}:[SubOrchestrationInstanceFailed] \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    // Trying to aggregate multiple parallel calls\r\n                    var maxDurationInMs = event.DurationInMs;\r\n                    var j = i + 1;\r\n                    for (; j < historyEvents.length &&\r\n                        historyEvents[j].EventType === 'TaskCompleted' &&\r\n                        historyEvents[j].FunctionName === event.FunctionName &&\r\n                        historyEvents[j].ScheduledTime.substr(0, 23) === event.ScheduledTime.substr(0, 23);\r\n                        j++) {\r\n\r\n                        if (maxDurationInMs < historyEvents[j].DurationInMs) {\r\n                            maxDurationInMs = historyEvents[j].DurationInMs;\r\n                        }\r\n                    }\r\n\r\n                    if (j === i + 1) {\r\n\r\n                        const nextLine =\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n                        \r\n                    } else {\r\n\r\n                        const nextLine =\r\n                            `par ${j - i} calls \\n` +\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(maxDurationInMs)} \\n` +\r\n                            `end \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n\r\n                        i = j - 1;\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `${orchestrationName}-x${orchestrationName}:${event.FunctionName}(failed) \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'EventRaised':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:${event.Name} \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TimerFired':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[TimerFired] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionTerminated':\r\n\r\n                    nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[ExecutionTerminated] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatTimestamp(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionCompleted':\r\n\r\n                    nextLine =\r\n                        `${orchestrationName}-->>-${parentOrchestrationName}:[ExecutionCompleted] \\n` +\r\n                        `Note over ${orchestrationName},${parentOrchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatTimestamp(timestamp: string): string {\r\n        if (timestamp.length <= 11) {\r\n            return timestamp;\r\n        }\r\n        return '(' + timestamp.substr(11, 12) + 'Z)';\r\n    }\r\n}","import mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of Gantt Diagram tab on OrchestrationDetails view\r\nexport class GanttDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Gantt Chart\";\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus, history: HistoryEvent[], cancelToken: CancelToken): Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.renderOrchestration(details.instanceId, details.name, history, true)).then(sequenceLines => {\r\n\r\n                if (cancelToken.isCancelled) {\r\n\r\n                    resolve();\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title ${details.name}(${details.instanceId}) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss.SSS \\n' +\r\n                    sequenceLines.join('');\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private renderOrchestration(orchestrationId: string, orchestrationName: string, historyEvents: HistoryEvent[], isParentOrchestration: boolean): Promise<string>[] {\r\n\r\n        const results: Promise<string>[] = [];\r\n\r\n        const startedEvent = historyEvents.find(event => event.EventType === 'ExecutionStarted');\r\n        const completedEvent = historyEvents.find(event => event.EventType === 'ExecutionCompleted');\r\n\r\n        var needToAddAxisFormat = isParentOrchestration;\r\n        var nextLine: string;\r\n\r\n        if (!!startedEvent && !!completedEvent) {\r\n\r\n            if (needToAddAxisFormat) {\r\n\r\n                const longerThanADay = completedEvent.DurationInMs > 86400000;\r\n                nextLine = longerThanADay ? 'axisFormat %Y-%m-%d %H:%M \\n' : 'axisFormat %H:%M:%S \\n';\r\n                results.push(Promise.resolve(nextLine));\r\n                needToAddAxisFormat = false;\r\n            }\r\n            \r\n            nextLine = isParentOrchestration ? '' : `section ${orchestrationName}(${this.escapeTitle(orchestrationId)}) \\n`;\r\n\r\n            var lineName = this.formatDuration(completedEvent.DurationInMs);\r\n            if (!lineName) {\r\n                lineName = orchestrationName;\r\n            }\r\n\r\n            nextLine += `${lineName}: ${isParentOrchestration ? '' : 'active,'} ${this.formatDateTime(startedEvent.Timestamp)}, ${this.formatDurationInSeconds(completedEvent.DurationInMs)} \\n`;\r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        if (needToAddAxisFormat) {\r\n\r\n            nextLine = 'axisFormat %H:%M:%S \\n';\r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        for(var event of historyEvents) {\r\n        \r\n            switch (event.EventType) {\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationId = event.SubOrchestrationId;\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadHistory(subOrchestrationId).then(history => {\r\n\r\n                                Promise.all(this.renderOrchestration(subOrchestrationId, subOrchestrationName, history, false)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`%% Failed to load ${subOrchestrationName}. ${err.message} \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: done, ${this.formatDateTime(event.ScheduledTime)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: crit, ${this.formatDateTime(event.ScheduledTime)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of a custom liquid markup tab on OrchestrationDetails view\r\nexport class LiquidMarkupTabState implements ICustomTabState {\r\n\r\n    name: string = \"\";\r\n    readonly description: string = \"\";\r\n    readonly isMermaidDiagram: boolean = false;\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._rawHtml; };\r\n\r\n    constructor(private _orchestrationId: string, private _backendClient: IBackendClient) {\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus, cancelToken: CancelToken): Promise<void> {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/custom-tab-markup('${this.name}')`;\r\n        return this._backendClient.call('POST', uri).then(response => {\r\n\r\n            if (!cancelToken.isCancelled) {\r\n               \r\n                this._rawHtml = response;\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _rawHtml: string;\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { SequenceDiagramTabState } from './SequenceDiagramTabState';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { GanttDiagramTabState } from './GanttDiagramTabState';\r\nimport { LiquidMarkupTabState } from './LiquidMarkupTabState';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get tabIndex(): number { return this._tabIndex; }\r\n    set tabIndex(val: number) {\r\n\r\n        if (this._tabIndex === val) {\r\n            return;\r\n        }\r\n\r\n        this._tabIndex = val;\r\n        this._localStorage.setItem('tabIndex', val.toString());\r\n\r\n        if (!!this.selectedTab) {\r\n\r\n            this.loadCustomTab();\r\n\r\n        } else if (!this._history.length) {\r\n\r\n            this.loadHistory();\r\n        }\r\n    }\r\n\r\n    get selectedTab(): ICustomTabState {\r\n        return !this._tabIndex ? null : this._tabStates[this._tabIndex - 1];\r\n    }\r\n\r\n    @computed\r\n    get details(): DurableOrchestrationStatus { return this._details; }\r\n\r\n    @computed\r\n    get history(): HistoryEvent[] { return this._history; }\r\n\r\n    @computed\r\n    get historyTotalCount(): number { return this._historyTotalCount; }\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get loadInProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress || this.loadInProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        this.newCustomStatus = !!this._details.customStatus ? JSON.stringify(this._details.customStatus) : '';\r\n    }\r\n\r\n    @computed\r\n    get restartDialogOpen(): boolean { return this._restartDialogOpen; }\r\n    set restartDialogOpen(val: boolean) {\r\n        this._restartDialogOpen = val;\r\n        this.restartWithNewInstanceId = true;\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this._details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this._details.customStatus);\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n    @observable\r\n    restartWithNewInstanceId: boolean = true;\r\n\r\n    @computed\r\n    get tabStates(): ICustomTabState[] { return this._tabStates; }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const tabIndexString = this._localStorage.getItem('tabIndex');\r\n        if (!!tabIndexString) {\r\n            this._tabIndex = Number(tabIndexString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this._history = [];\r\n            this._details = new DurableOrchestrationStatus();\r\n            this._tabStates = [];\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    restart() {\r\n        this.restartDialogOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/restart`;\r\n        const requestBody = { restartWithNewInstanceId: this.restartWithNewInstanceId };\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to restart: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse event data: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse custom status: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to set custom status: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) { // We might end up here, if next timer occurs while a custom tab is still loading\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n            return;\r\n        }\r\n\r\n        this._inProgress = true;\r\n        this._noMorePagesToLoad = false;\r\n\r\n        if (!this._autoRefresh && (!this.selectedTab)) {\r\n            \r\n            this._history = [];\r\n            this._historyTotalCount = 0;\r\n        }\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n        \r\n            this._details = response;\r\n\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n\r\n            var tabStateIndex = 0;\r\n\r\n            // Loading sequence diagram tab\r\n            if (this._details.entityType === \"Orchestration\") {\r\n               \r\n                if (this._tabStates.length <= tabStateIndex) {\r\n                    this._tabStates.push(new SequenceDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                    this._tabStates.push(new GanttDiagramTabState((orchId) => this.loadAllHistory(orchId)));\r\n                }\r\n                tabStateIndex += 2;\r\n            }\r\n\r\n            // Loading custom tabs\r\n            if (!!this._details.tabTemplateNames) {\r\n                for (var templateName of this._details.tabTemplateNames) {\r\n\r\n                    if (this._tabStates.length <= tabStateIndex) {\r\n                        this._tabStates.push(new LiquidMarkupTabState(this._orchestrationId, this._backendClient));\r\n                    }\r\n                    this._tabStates[tabStateIndex].name = templateName;\r\n                    tabStateIndex++;\r\n                }                \r\n            }\r\n\r\n            // Ensuring tab index does not go out of sync\r\n            if (this._tabIndex < 0 || this._tabIndex > this._tabStates.length) {\r\n                this._tabIndex = 0;\r\n            }\r\n\r\n            this._inProgress = false;\r\n\r\n            if (!this.selectedTab) {\r\n                \r\n                this.loadHistory(!!this._autoRefresh);\r\n\r\n            } else {\r\n\r\n                this.loadCustomTab();\r\n            }\r\n            \r\n        }, err => {\r\n            this._inProgress = false;\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadHistory(isAutoRefresh: boolean = false): void {\r\n\r\n        if (!!this.inProgress || !!this.selectedTab || !!this._noMorePagesToLoad) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._history.length;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/history?$top=${this._pageSize}&$skip=${skip}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (cancelToken.isCancelled) {\r\n                return;\r\n            }\r\n\r\n            this._historyTotalCount = response.totalCount;\r\n\r\n            if (isAutoRefresh) {\r\n                this._history = response.history;\r\n            } else {\r\n                this._history.push(...response.history);\r\n\r\n                if (response.history.length < this._pageSize) {\r\n\r\n                    // Stop the infinite scrolling\r\n                    this._noMorePagesToLoad = true;\r\n                }\r\n            }\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Failed to load history: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    private loadCustomTab(): void {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n\r\n        const cancelToken = this._cancelToken;\r\n        cancelToken.inProgress = true;\r\n\r\n        this.selectedTab.load(this._details, cancelToken).then(() => {}, err => { \r\n                \r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Failed to load tab: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    private setAutoRefresh(): void {\r\n\r\n        if (!this._autoRefresh) {\r\n            return;\r\n        }\r\n\r\n        if (!!this._autoRefreshToken) {\r\n            clearTimeout(this._autoRefreshToken);\r\n        }\r\n        this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n    }\r\n\r\n    private loadAllHistory(orchestrationId: string): Promise<HistoryEvent[]> {\r\n\r\n        const uri = `/orchestrations('${orchestrationId}')/history`;\r\n        return this._backendClient.call('GET', uri).then(response => response.history);\r\n    }\r\n\r\n    @observable\r\n    private _tabStates: ICustomTabState[] = [];\r\n\r\n    @observable\r\n    private _details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n    @observable\r\n    private _history: HistoryEvent[] = [];\r\n    @observable\r\n    private _tabIndex: number = 0;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n    @observable\r\n    private _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _restartDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _historyTotalCount: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 200;\r\n}","\r\nconst space = '#32;';\r\n\r\nfunction getTriggerBindingText(binding: any): string {\r\n\r\n    switch (binding.type) {\r\n        case 'httpTrigger':\r\n            return `http${!binding.methods ? '' : ':[' + binding.methods.join(',') + ']'}${!binding.route ? '' : ':' + binding.route}`;\r\n        case 'blobTrigger':\r\n            return `blob:${binding.path}`;\r\n        case 'cosmosDBTrigger':\r\n            return `cosmosDB:${binding.databaseName}:${binding.collectionName}`;\r\n        case 'eventHubTrigger':\r\n            return `eventHub:${binding.eventHubName}`;\r\n        case 'serviceBusTrigger':\r\n            return `serviceBus:${!binding.queueName ? binding.topicName : binding.queueName}${!binding.subscriptionName ? '' : ':' + binding.subscriptionName}`;\r\n        case 'queueTrigger':\r\n            return `queue:${binding.queueName}`;\r\n        case 'timerTrigger':\r\n            return `timer:${binding.schedule}`;\r\n        default:\r\n            return binding.type;\r\n    }\r\n}\r\n\r\nfunction getBindingText(binding: any): string {\r\n\r\n    switch (binding.type) {\r\n        case 'blob':\r\n            return `blob:${binding.path}`;\r\n        case 'cosmosDB':\r\n            return `cosmosDB:${binding.databaseName}:${binding.collectionName}`;\r\n        case 'eventHub':\r\n            return `eventHub:${binding.eventHubName}`;\r\n        case 'serviceBus':\r\n            return `serviceBus:${!binding.queueName ? binding.topicName : binding.queueName}${!binding.subscriptionName ? '' : ':' + binding.subscriptionName}`;\r\n        case 'queue':\r\n            return `queue:${binding.queueName}`;\r\n        default:\r\n            return binding.type;\r\n    }\r\n}\r\n\r\nexport function buildFunctionDiagramCode(funcs: {}): string {\r\n\r\n    const functions = [];\r\n\r\n    // Determine what kind of function this one is\r\n    for (const name in funcs) {\r\n        const func = funcs[name];\r\n\r\n        var triggerBinding = undefined, inputBindings = [], outputBindings = [];\r\n        var nodeCode = `${name}{{\"${space}${name}\"}}:::function`;\r\n\r\n        for (const binding of func.bindings) {\r\n\r\n            if (binding.type === 'orchestrationTrigger') {\r\n                nodeCode = `${name}[[\"${space}${name}\"]]:::orchestrator`;\r\n            } else if (binding.type === 'activityTrigger') {\r\n                nodeCode = `${name}[/\"${space}${name}\"/]:::activity`;\r\n            } else if (binding.type === 'entityTrigger') {\r\n                nodeCode = `${name}[(\"${space}${name}\")]:::entity`;\r\n            }\r\n\r\n            if (binding.type.endsWith('Trigger')) {\r\n                triggerBinding = binding;\r\n            } else if (binding.direction === 'in') {\r\n                inputBindings.push(binding);\r\n            } else {\r\n                outputBindings.push(binding);\r\n            }\r\n        }\r\n\r\n        functions.push({ name, nodeCode, triggerBinding, inputBindings, outputBindings, ...func });\r\n    }\r\n\r\n    // Sorting by trigger type, then by name\r\n    functions.sort((f1, f2) => {\r\n\r\n        var s1 = (!!f1.isCalledBy?.length || !f1.triggerBinding || !f1.triggerBinding.type) ? '' : f1.triggerBinding.type;\r\n        s1 += '~' + f1.name;\r\n\r\n        var s2 = (!!f2.isCalledBy?.length || !f2.triggerBinding || !f2.triggerBinding.type) ? '' : f2.triggerBinding.type;\r\n        s2 += '~' + f2.name;\r\n\r\n        return (s1 > s2) ? 1 : ((s2 > s1) ? -1 : 0);\r\n    });\r\n\r\n    // Rendering\r\n    var code = '';\r\n    for (const func of functions) {\r\n\r\n        code += `${func.nodeCode}\\n`;\r\n\r\n        if (!!func.isCalledBy?.length) {\r\n\r\n            for (const calledBy of func.isCalledBy) {\r\n                code += `${calledBy} --> ${func.name}\\n`;\r\n            }\r\n\r\n        } else if (!!func.triggerBinding) {\r\n\r\n            code += `${func.name}.${func.triggerBinding.type}>\"${space}${getTriggerBindingText(func.triggerBinding)}\"]:::${func.triggerBinding.type} --> ${func.name}\\n`;\r\n        }\r\n\r\n        for (const inputBinding of func.inputBindings) {\r\n            code += `${func.name}.${inputBinding.type}([\"${space}${getBindingText(inputBinding)}\"]):::${inputBinding.type} -.-> ${func.name}\\n`;\r\n        }\r\n\r\n        for (const outputBinding of func.outputBindings) {\r\n            code += `${func.name} -.-> ${func.name}.${outputBinding.type}([\"${space}${getBindingText(outputBinding)}\"]):::${outputBinding.type}\\n`;\r\n        }\r\n\r\n        if (!!func.isSignalledBy?.length) {\r\n\r\n            for (const signalledBy of func.isSignalledBy) {\r\n                code += `${signalledBy.name} -. \"#9889; ${signalledBy.signalName}\" .-> ${func.name}\\n`;\r\n            }\r\n        }\r\n\r\n        if (!!func.isCalledByItself) {\r\n\r\n            code += `${func.name} -- \"[ContinueAsNew]\" --> ${func.name}\\n`;\r\n        }\r\n    }\r\n\r\n    return code;\r\n}","import { observable, computed } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { MermaidDiagramStateBase } from './MermaidDiagramStateBase';\r\n\r\nimport { buildFunctionDiagramCode } from './buildFunctionDiagramCode';\r\n\r\n// State of FunctionGraph view\r\nexport class FunctionGraphState extends MermaidDiagramStateBase {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n\r\n    @computed\r\n    get diagramCode(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get diagramSvg(): string { return this._diagramSvg; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    get projectPath(): string { return this._projectPath; };\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _projectPath: string,\r\n        private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    load() {\r\n\r\n        if (this._inProgress) {\r\n            return;\r\n        }\r\n\r\n        // Only doing this on demand, just in case\r\n        this.initMermaidWhenNeeded();\r\n\r\n        this._inProgress = true;\r\n        this.errorMessage = '';\r\n        this._diagramCode = '';\r\n        this._diagramSvg = '';\r\n\r\n        this._backendClient.call('TraverseFunctionProject', this._projectPath).then(response => {\r\n\r\n            try {\r\n                const diagramCode = buildFunctionDiagramCode(response.functions);\r\n\r\n                if (!diagramCode) {\r\n                    this._inProgress = false;\r\n                    return;\r\n                }\r\n\r\n                this._diagramCode = `graph LR\\n${diagramCode}`;\r\n\r\n                mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n\r\n                    this._diagramSvg = this.applyIcons(svg, response.pathToIcons);\r\n\r\n                    this._inProgress = false;\r\n                });\r\n\r\n            } catch (err) {\r\n                this.errorMessage = `Failed to render: ${err.message}`;\r\n                this._inProgress = false;\r\n            }\r\n\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to traverse project: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    private applyIcons(svg: string, pathToIcons: string): string {\r\n\r\n        svg = svg.replace(/<g class=\"node (\\w+).*?<g class=\"label\" transform=\"translate\\([0-9,.-]+\\)\"><g transform=\"translate\\([0-9,.-]+\\)\">/g,\r\n            `$&<image href=\"${pathToIcons}/$1.svg\" width=\"20px\"/>`);\r\n\r\n        return svg;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { observable, computed } from 'mobx'\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Clean Entity Storage Dialog\r\nexport class CleanEntityStorageDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(isOpen: boolean) {\r\n        this._dialogOpen = isOpen;\r\n\r\n        if (isOpen) {\r\n            this._response = null;\r\n            this.removeEmptyEntities = true;\r\n            this.releaseOrphanedLocks = true;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get response(): CleanEntityStorageResponse | null { return this._response; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return true;\r\n    };\r\n\r\n    @observable\r\n    removeEmptyEntities: boolean;\r\n    @observable\r\n    releaseOrphanedLocks: boolean;\r\n    \r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    clean() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/clean-entity-storage', {\r\n            removeEmptyEntities: this.removeEmptyEntities,\r\n            releaseOrphanedLocks: this.releaseOrphanedLocks\r\n        }).then(response => {\r\n            this._response = response;\r\n        }, err => {\r\n            this.errorMessage = `Clean Entity Storage failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _response: CleanEntityStorageResponse | null = null;\r\n}\r\n\r\nexport class CleanEntityStorageResponse\r\n{\r\n    numberOfEmptyEntitiesRemoved: number;\r\n    numberOfOrphanedLocksRemoved: number;\r\n}","\r\n// Helper class for dealing with browser's query string\r\nexport class QueryString {\r\n\r\n    constructor() {\r\n\r\n        const pairs = window.location.search.substr(1).split('&');\r\n        for (var pairString of pairs) {\r\n            const pair = pairString.split('=');\r\n            if (pair.length > 1) {\r\n                this._values[pair[0]] = decodeURIComponent(pair[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    get values(): { [key: string]: string } { return this._values; }\r\n\r\n    apply(): void {\r\n\r\n        var queryString = '';\r\n\r\n        for (var key in this._values) {\r\n            if (!!queryString) {\r\n                queryString += '&';\r\n            }\r\n            queryString += key + '=' + encodeURIComponent(this._values[key]);\r\n        }\r\n\r\n        window.history.replaceState(null, null, !queryString ? '' : '?' + queryString);\r\n    }\r\n\r\n    private _values: { [key: string]: string } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { QueryString } from './QueryString';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n\r\n        // Also placing into query string\r\n        const queryString = new QueryString();\r\n        queryString.values[fieldName] = value;\r\n        queryString.apply();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        // Also placing into query string\r\n        const queryString = new QueryString();\r\n\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n\r\n                delete queryString.values[item.fieldName];\r\n\r\n            } else {\r\n\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n\r\n                queryString.values[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        queryString.apply();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        // Query string should take precedence\r\n        const queryString = new QueryString();\r\n        if (!!queryString.values[fieldName]) {\r\n            return queryString.values[fieldName];\r\n        }\r\n\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n\r\n        // Also dropping from query string\r\n        const queryString = new QueryString();\r\n        delete queryString.values[fieldName];\r\n        queryString.apply();\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return null; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setCustomHandlers(purgeHistoryHandler: () => void, cleanEntityStorageHandler: () => void) {\r\n\r\n        this._handlers['purgeHistory'] = purgeHistoryHandler;\r\n        this._handlers['cleanEntityStorage'] = cleanEntityStorageHandler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const StateFromVsCode: {};\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n        this._state = StateFromVsCode[this._prefix];\r\n        if (!this._state) {\r\n            this._state = {};\r\n        }\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        this._state[fieldName] = value\r\n        this.save();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete this._state[item.fieldName];\r\n            } else {\r\n                this._state[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        this.save();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        return this._state[fieldName];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete this._state[fieldName];\r\n        this.save();\r\n    }\r\n\r\n    private readonly _state: any;\r\n\r\n    private save(): void {\r\n        this._vsCodeApi.postMessage({ method: 'PersistState', key: this._prefix, data: this._state });\r\n    }\r\n}\r\n","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { BackendClient } from '../services/BackendClient';\r\nimport { LoginState, OrchestrationsPathPrefix } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { ResultsListTabState } from './ResultsListTabState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { FunctionGraphState } from './FunctionGraphState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// Global variables declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\ndeclare const DfmFunctionProjectPath: string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    functionGraphState?: FunctionGraphState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n    cleanEntityStorageDialogState: CleanEntityStorageDialogState;\r\n\r\n    @computed\r\n    get typedInstanceId(): string {\r\n        return this._typedInstanceId;\r\n    }\r\n    set typedInstanceId(s: string) {\r\n        this._typedInstanceId = s;\r\n        this.reloadSuggestions();\r\n    }\r\n\r\n    @computed\r\n    get suggestions(): string[] {\r\n        return this._suggestions;\r\n    }\r\n\r\n    @computed\r\n    get isExactMatch(): boolean {\r\n        return this._suggestions.length === 1 && this._suggestions[0] === this._typedInstanceId;\r\n    }\r\n    \r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.functionProjectPath) {\r\n                this.functionGraphState = new FunctionGraphState(this.functionProjectPath, backendClient);\r\n            } else if (!!this.instanceId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.instanceId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState & ResultsListTabState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setCustomHandlers(\r\n                    () => this.purgeHistoryDialogState.dialogOpen = true,\r\n                    () => this.cleanEntityStorageDialogState.dialogOpen = true\r\n                );\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(() => this.loginState.taskHubName, () => this.loginState.getAuthorizationHeaderAsync());\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.instanceId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.instanceId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState, this.cleanEntityStorageDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Opens the entered orchestrationId in a new tab\r\n    goto() {\r\n        window.open(`${this._backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this._typedInstanceId}`);\r\n        this._typedInstanceId = '';\r\n        this._suggestions = [];\r\n    }\r\n\r\n    @observable\r\n    private _suggestions: string[] = [];\r\n    @observable\r\n    private _typedInstanceId: string = '';\r\n\r\n    private readonly _backendClient: IBackendClient;\r\n\r\n    // Extracts functionProjectPath from URL or from VsCode\r\n    private get functionProjectPath(): string {\r\n\r\n        if (!!DfmFunctionProjectPath) {\r\n            return DfmFunctionProjectPath;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get instanceId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const pos = window.location.pathname.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos < 0) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(pos + OrchestrationsPathPrefix.length);\r\n    }\r\n\r\n    // Reloads list of suggested instanceIds\r\n    private reloadSuggestions(): void {\r\n\r\n        if (!this._typedInstanceId || this._typedInstanceId.length < 2) {\r\n            this._suggestions = [];\r\n            return;\r\n        }\r\n\r\n        const uri = `/id-suggestions(prefix='${this._typedInstanceId}')`;\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response || !this._typedInstanceId) {\r\n                this._suggestions = [];\r\n            } else {\r\n                this._suggestions = response;\r\n            }\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport './index.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\n\r\nimport { Main } from './components/Main';\r\nimport { MainState } from './states/MainState';\r\nimport { Theme } from './theme';\r\n\r\ndocument.body.style.backgroundColor = Theme.palette.background.paper;\r\n\r\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\r\nconst appState = new MainState();\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={Theme} >\r\n        <Main state={appState} />\r\n    </ThemeProvider>,\r\n    document.getElementById('root') as HTMLElement\r\n);"],"sourceRoot":""}